{"version":3,"sources":["SpotifyAPI.js","graphql/mutations.ts","graphql/queries.ts","Utils.ts","Auth.js","Header.js","DevPublisher.js","SpotifyWebPlayer.js","useAuth.ts","SpotifyContext.tsx","useSpotifyAPI.js","useSpotifyWebPlayer.js","SongPlayerWithControls.js","Track.js","TrackList.js","EQBars.js","Listeners.tsx","graphql/subscriptions.ts","WakeLockControl.tsx","Listen.js","useSpotifyContext.ts","BroadcastPollingPublisher.tsx","BroadcastWebPlayerPublisher.tsx","BroadcastPublisher.tsx","PowerHourControl.js","ChangeUsername.tsx","BroadcastHeading.tsx","Broadcast.js","Channel.js","ChannelList.tsx","graphql/customQueries.ts","Home.tsx","RedirectToLoginOrBroadcast.tsx","App.js","serviceWorker.js","aws-exports.js","index.js","logo.png"],"names":["SpotifyAPI","accessToken","onUnauthorized","Error","this","maybeHandle401","bind","response","status","fetch","method","headers","Authorization","then","ok","json","console","error","data","device","id","uri","deviceID","query","body","JSON","stringify","uris","device_ids","play","updateUser","createSongEvent","usersByDisplayName","songEventsByUserId","isUserOnline","user","latestSongEvent","Math","floor","Date","now","isUserListening","latestListenPing","getListenerCount","listeners","items","filter","listener","length","AuthContext","createContext","AuthRedirect","style","textAlign","getAuthorizeURI","pathname","redirectURI","encodeURIComponent","process","currentPath","AuthProvider","children","useLocalStorage","authInfo","setAuthInfo","location","useLocation","history","useHistory","username","userImg","displayName","expiresAt","React","useEffect","hash","params","slice","split","map","param","forEach","tup","access_token","fetchUserInfo","spotifyIdentifier","images","url","API","graphql","graphqlOperation","userID","getUser","input","type","createUser","dislayName","oldImg","mutations","push","decodeURIComponent","state","catch","handleAuthRedirect","window","self","top","e","inIframe","iframe","timeoutID","refreshAuth","document","createElement","display","src","appendChild","timeUntilExpiry","setTimeout","clearTimeout","parentNode","removeChild","authContext","useMemo","logout","retryAuth","href","Provider","value","Header","useContext","authorizeURI","match","useRouteMatch","className","to","onClick","preventDefault","alt","DevPublisher","hostUserID","setInterval","songEvent","timestamp","position","spotifyURI","random","toString","log","clearInterval","SpotifyWebPlayer","player","spotifyAPI","getCurrentState","pause","resume","ms","seek","nextTrack","callback","addListener","removeListener","transferPlayback","Promise","resolve","Spotify","Player","onSpotifyWebPlaybackSDKReady","sdkScript","__accessToken","__onUnauthorized","__spotifyAPI","reject","EMGlobalPlayerInstance","volumeRef","current","localStorage","getItem","toFixed","name","getOAuthToken","cb","volume","getVolume","newVolume","newVol","setItem","on","message","device_id","connect","success","inject","initializePlayer","track_window","current_track","useSpotifyAPI","SpotifyContext","webPlayer","webPlayerUnsupported","lastMutationTimestamp","setLastMutationTimestamp","SpotifyProvider","useAuth","useState","setWebPlayer","setWebPlayerUnsupported","setSpotifyAPI","api","createInstance","inst","replace","spotifyContext","useSpotifyWebPlayerUnsupported","useSpotifyWebPlayer","SongPlayerWithControls","song","spotifyWebPlayer","devices","setDevices","activeDeviceID","setActiveDeviceID","activeDeviceIDRef","useRef","isReady","setIsReady","eardrumPlayer","getDeviceID","deviceList","find","d","fetchDevices","activeDevice","is_active","onChange","event","target","key","Track","track","albumImg","logo","artistName","TrackList","songs","EQBars","Listeners","hostDisplayName","hostUserImg","rerender","setRerender","r","Connect","listeningTo","sortDirection","limit","subscription","onSubscriptionMsg","prev","onUpdateUserByListeningTo","usersByListeningTo","index","findIndex","isListening","wasListening","audio","Audio","loading","onlineUsers","users","getActiveListeners","WakeLockControl","wlEnabled","setwlEnabled","NoSleep","noSleepRef","disable","handleChange","useCallback","enabled","enable","hasTouchScreen","nav","navigator","maxTouchPoints","msMaxTouchPoints","mQ","matchMedia","media","matches","UA","userAgent","test","htmlFor","checked","StartListening","publishListenPing","ListenPlayer","isCurrentlyLive","isListeningUsername","setIsListeningUsername","noSleep","intervalID","handleJoin","Listen","devPublisherEnabled","search","includes","sub","createUserObservable","subscribe","next","newHostDisplayName","onUpdateUserByUserID","unsubscribe","queries","onCreateSongEvent","songEventsByUserID","unshift","pop","online","useSpotifyContext","BroadcastPollingPublisher","onSongEvent","handlePlayerStateChangedRef","currentlyPlaying","newTrack","item","isPlaying","is_playing","trackID","durationMs","duration_ms","albumName","album","artists","progress_ms","timeoutIDRef","fetchCurrentlyPlaying","currentlyPlayingResponse","progressMs","timeoutDuration","BroadcastWebPlayerPublisher","newState","getTrackFromState","changeListener","initFunc","fetchState","addStateChangeListener","fetchCurrentDeviceID","removeStateChangeListener","publishBroadcastPing","BroadcastPublisher","currentSongEvent","currentSongEventRef","handleNewSongEvent","localSongEvent","__typename","publishTrack","publishSongEvent","PowerHourControl","phEnabled","setPhEnabled","phCount","setPhCount","phCallbackRef","ChangeUsername","initialVal","onSuccess","val","setVal","setSuccess","onSubmit","BroadcastHeading","editing","setEditing","nameUpdated","Broadcast","songHistory","setSongHistory","copied","setCopied","handleSongEvent","h","concat","trackList","shareURI","disabled","size","text","onCopy","Channel","useParams","setHostUserID","setHostUserImg","failedLookup","setFailedLookup","fetchHostByDisplayName","host","img","cta","title","subtitle","ChannelList","usersByLatestSongEvent","sort","a","b","latestSong","songEvents","numListeners","Home","RedirectToLoginOrBroadcast","App","path","exact","Boolean","hostname","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsconfig","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.df696e5b.chunk.js","sourcesContent":["export default class SpotifyAPI {\n  constructor(accessToken, onUnauthorized) {\n    if (accessToken == null) {\n      throw new Error(\"Access token was null\");\n    }\n    this.accessToken = accessToken;\n    this.onUnauthorized = onUnauthorized ?? (() => {});\n    this.maybeHandle401 = this.maybeHandle401.bind(this);\n  }\n\n  maybeHandle401(response) {\n    if (response.status === 401) {\n      this.onUnauthorized();\n      throw new Error(\"Unauthorized: \", response);\n    }\n    return response;\n  }\n\n  fetchUserInfo() {\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json();\n      });\n  }\n\n  fetchCurrentDeviceID() {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"error fetching device id\");\n        }\n        if (response.status === 204) {\n          return null;\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data?.device?.id) {\n          return data.device.id;\n        }\n        return null;\n      });\n  }\n\n  play(uri, deviceID) {\n    const query = deviceID != null ? `?device_id=${deviceID}` : \"\";\n    return fetch(`https://api.spotify.com/v1/me/player/play/${query}`, {\n      method: \"PUT\",\n      body: JSON.stringify({ uris: [uri] }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"Error playing uri\", response);\n        }\n      });\n  }\n\n  transferPlayback(deviceID) {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      body: JSON.stringify({ device_ids: [deviceID], play: true }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to transfer playback to device: \" + deviceID);\n        }\n      });\n  }\n\n  fetchDevices() {\n    return fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to fetch devices\");\n        }\n        return response.json();\n      });\n  }\n\n  fetchCurrentlyPlaying() {\n    return fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to currently playing\");\n        }\n        if (response.status === 204) {\n          return;\n        }\n        return response.json();\n      });\n  }\n\n  nextTrack() {\n    return fetch(\"https://api.spotify.com/v1/me/player/next\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to select next track\");\n        }\n        if (response.status === 204) {\n          return;\n        }\n        return response.json();\n      });\n  }\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const createTrack = /* GraphQL */ `\n  mutation CreateTrack(\n    $input: CreateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    createTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const updateTrack = /* GraphQL */ `\n  mutation UpdateTrack(\n    $input: UpdateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    updateTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const deleteTrack = /* GraphQL */ `\n  mutation DeleteTrack(\n    $input: DeleteTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    deleteTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getTrack = /* GraphQL */ `\n  query GetTrack($uri: String!) {\n    getTrack(uri: $uri) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const listTracks = /* GraphQL */ `\n  query ListTracks(\n    $uri: String\n    $filter: ModelTrackFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTracks(\n      uri: $uri\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByLatestSongEvent = /* GraphQL */ `\n  query UsersByLatestSongEvent(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByListeningTo = /* GraphQL */ `\n  query UsersByListeningTo(\n    $listeningTo: String\n    $latestListenPing: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByListeningTo(\n      listeningTo: $listeningTo\n      latestListenPing: $latestListenPing\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByDisplayName = /* GraphQL */ `\n  query UsersByDisplayName(\n    $displayName: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByDisplayName(\n      displayName: $displayName\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByType = /* GraphQL */ `\n  query SongEventsByType(\n    $type: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByType(\n      type: $type\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import type { User, SongEvent } from \"./Types\";\n\nexport function getActiveListeners(users: User[]): User[] {\n  return users.filter((user) => {\n    if (user == null) {\n      return false;\n    }\n    const isOnline =\n      Math.floor(Date.now() / 1000) - (user?.latestListenPing ?? 0) < 30;\n    return isOnline;\n  }) as User[];\n}\n\nexport function isUserOnline(user: User): boolean {\n  if (user == null) {\n    return false;\n  }\n  const latestSongEvent = user.latestSongEvent ?? 0;\n  return Math.floor(Date.now() / 1000) - latestSongEvent < 30;\n}\n\nexport function isUserListening(user: User): boolean {\n  if (user == null) {\n    return false;\n  }\n  const hasRecentPing =\n    Math.floor(Date.now() / 1000) - (user.latestListenPing ?? 0) < 30;\n  return hasRecentPing;\n}\n\nexport function isOnline(songEvents: SongEvent[]): boolean {\n  const mostRecentSongEvent = songEvents && songEvents[0];\n  if (mostRecentSongEvent == null) {\n    return false;\n  }\n  const isOnline =\n    Math.floor(Date.now() / 1000) - mostRecentSongEvent.timestamp <\n    (mostRecentSongEvent.track?.durationMs ?? 0) / 1000 + 60;\n  return isOnline;\n}\n\nexport function getListenerCount(user: User) {\n  return (\n    (user?.listeners?.items ?? []).filter((listener) => {\n      if (listener == null) {\n        return false;\n      }\n      return isUserListening(listener as User);\n    }).length + 1\n  );\n}\n\nexport function inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n\nexport function hasTouchScreen() {\n  let hasTouchScreen = false;\n  const nav = window.navigator as any;\n  if (\"maxTouchPoints\" in nav) {\n    hasTouchScreen = nav.maxTouchPoints > 0;\n  } else if (\"msMaxTouchPoints\" in nav) {\n    hasTouchScreen = nav.msMaxTouchPoints > 0;\n  } else {\n    var mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\n    if (mQ && mQ.media === \"(pointer:coarse)\") {\n      hasTouchScreen = !!mQ.matches;\n    } else if (\"orientation\" in window) {\n      hasTouchScreen = true; // deprecated, but good fallback\n    } else {\n      // Only as a last resort, fall back to user agent sniffing\n      var UA = nav.userAgent;\n      hasTouchScreen =\n        /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\n        /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA);\n    }\n  }\n  return hasTouchScreen;\n}\n","import React, { createContext } from \"react\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport * as queries from \"./graphql/queries\";\nimport { inIframe } from \"./Utils\";\n\nexport const AuthContext = createContext();\n\nexport function AuthRedirect() {\n  return <div style={{ textAlign: \"center\" }}>Logging in...</div>;\n}\n\nexport function getAuthorizeURI(pathname) {\n  const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\n  const scopes = process.env.REACT_APP_SPOTIFY_SCOPES;\n  const redirectURI = encodeURIComponent(\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n  );\n  const currentPath = encodeURIComponent(pathname);\n  return `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}&state=${currentPath}`;\n}\n\nfunction handleAuthRedirect(setAuthInfo, history, location) {\n  if (location.hash) {\n    const params = {};\n    location.hash\n      .slice(1)\n      .split(\"&\")\n      .map((param) => param.split(\"=\"))\n      .forEach((tup) => {\n        params[tup[0]] = tup[1];\n      });\n    const accessToken = params.access_token;\n    if (accessToken == null) {\n      return;\n    }\n    location.hash = \"\";\n    new SpotifyAPI(accessToken).fetchUserInfo().then((user) => {\n      const spotifyIdentifier = user.id;\n      const userImg = user.images?.[0]?.url ?? null;\n      // Ensure the user is created upon login\n      API.graphql(\n        graphqlOperation(queries.getUser, {\n          userID: spotifyIdentifier,\n        })\n      )\n        .then((data) => {\n          if (data.data.getUser == null) {\n            return API.graphql(\n              graphqlOperation(mutations.createUser, {\n                input: {\n                  userID: spotifyIdentifier,\n                  displayName: spotifyIdentifier,\n                  userImg: userImg,\n                  type: \"USER\",\n                },\n              })\n            ).then((data) => {\n              return data.data.createUser.dislayName;\n            });\n          } else {\n            const oldImg = data?.data?.getUser?.userImg;\n            if (userImg != null && userImg !== oldImg) {\n              API.graphql(\n                graphqlOperation(mutations.updateUser, {\n                  input: {\n                    userID: spotifyIdentifier,\n                    userImg: userImg,\n                  },\n                })\n              );\n            }\n          }\n          return data.data.getUser.displayName;\n        })\n        .then((displayName) => {\n          setAuthInfo({\n            accessToken,\n            username: spotifyIdentifier,\n            displayName,\n            userImg,\n            expiresAt: Math.floor(Date.now() / 1000) + (3600 - 30),\n          });\n          history.push(decodeURIComponent(params.state));\n        })\n        .catch(() => {\n          history.push(\"/\");\n          console.error(\"user creation failed\");\n        });\n    });\n  }\n  return null;\n}\n\nexport function AuthProvider({ children }) {\n  const [authInfo, setAuthInfo] = useLocalStorage(\"EMAuthInfo\");\n  const location = useLocation();\n  const history = useHistory();\n  const username = authInfo?.username;\n  const accessToken = authInfo?.accessToken;\n  const userImg = authInfo?.userImg;\n  const displayName = authInfo?.displayName || username;\n  const expiresAt = authInfo?.expiresAt;\n\n  React.useEffect(() => {\n    handleAuthRedirect(setAuthInfo, history, location);\n  }, [setAuthInfo, history, location]);\n\n  React.useEffect(() => {\n    if (expiresAt == null || inIframe()) {\n      return;\n    }\n\n    let iframe = null;\n    let timeoutID = null;\n    const refreshAuth = () => {\n      iframe = document.createElement(\"iframe\");\n      iframe.style.display = \"none\";\n      iframe.src = getAuthorizeURI(\"/auth\");\n      document.body.appendChild(iframe);\n    };\n    const timeUntilExpiry = (expiresAt ?? 0) - Math.floor(Date.now() / 1000);\n    if (timeUntilExpiry > 0) {\n      timeoutID = setTimeout(() => {\n        refreshAuth();\n      }, timeUntilExpiry * 1000);\n    } else {\n      refreshAuth();\n    }\n    return () => {\n      if (timeoutID != null) {\n        clearTimeout(timeoutID);\n      }\n      if (iframe != null) {\n        iframe.parentNode.removeChild(iframe);\n      }\n    };\n  }, [expiresAt, location]);\n\n  const authContext = React.useMemo(() => {\n    return accessToken != null && username != null\n      ? {\n          accessToken: accessToken,\n          username: username,\n          userImg: userImg,\n          displayName: displayName,\n          logout: () => setAuthInfo(null),\n          retryAuth: () => {\n            setAuthInfo(null);\n            window.location.href = getAuthorizeURI(window.location.pathname);\n          },\n          setAuthInfo: setAuthInfo,\n        }\n      : null;\n  }, [username, accessToken, setAuthInfo, userImg, displayName]);\n\n  return (\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\n\nfunction Header() {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const authorizeURI = getAuthorizeURI(location.pathname);\n  const match = useRouteMatch(\"/u/\" + authInfo?.displayName);\n\n  function handleLogout(e) {\n    e.preventDefault();\n    authInfo.logout();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      {authInfo != null ? (\n        <>\n          {match == null ? (\n            <Link className=\"App-link\" to={`/u/${authInfo.displayName}`}>\n              Host a channel\n            </Link>\n          ) : (\n            /* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n            <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          )}\n          <div className=\"App-headerPhoto\">\n            <Link className=\"App-smallLink\" to={`/u/${authInfo.displayName}`}>\n              {authInfo.displayName}\n            </Link>\n            {authInfo.userImg ? (\n              <img\n                className=\"App-headerImg\"\n                src={authInfo.userImg}\n                alt=\"profile pic\"\n              />\n            ) : (\n              authInfo.displayName\n            )}\n          </div>\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Host a channel\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\n\nexport default function DevPublisher({ hostUserID }) {\n  React.useEffect(() => {\n    const timeoutID = setInterval(() => {\n      const tracks = [\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\n      ];\n      const songEvent = {\n        userID: hostUserID,\n        timestamp: Math.floor(Date.now() / 1000),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n        type: \"NEW_SONG\",\n      };\n      API.graphql(\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\n      ).then((data) => console.log(\"Publishing: \", data));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeoutID);\n    };\n  }, [hostUserID]);\n\n  return <h1>DevPublisher enabled</h1>;\n}\n","export default class SpotifyWebPlayer {\n  constructor(player, spotifyAPI) {\n    this.player = player;\n    this.spotifyAPI = spotifyAPI;\n  }\n\n  fetchState() {\n    return this.player.getCurrentState();\n  }\n\n  pause() {\n    return this.player.pause();\n  }\n\n  resume() {\n    return this.player.resume();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  addStateChangeListener(callback) {\n    this.player.addListener(\"player_state_changed\", callback);\n  }\n\n  removeStateChangeListener(callback) {\n    this.player.removeListener(\"player_state_changed\", callback);\n  }\n\n  getDeviceID() {\n    return this.player.deviceID;\n  }\n\n  transferPlayback() {\n    return this.spotifyAPI.transferPlayback(this.player.deviceID);\n  }\n\n  static inject() {\n    return new Promise((resolve) => {\n      if (window?.Spotify?.Player) {\n        resolve();\n        return;\n      }\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n      };\n      const sdkScript = document.createElement(\"script\");\n      sdkScript.src = process.env.REACT_APP_SPOTIFY_WEB_PLAYER_SDK;\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  static initializePlayer(spotifyAPI, accessToken, onUnauthorized) {\n    // Update accessToken singleton so existing players can access it;\n    SpotifyWebPlayer.__accessToken = accessToken;\n    SpotifyWebPlayer.__onUnauthorized = onUnauthorized;\n    SpotifyWebPlayer.__spotifyAPI = spotifyAPI;\n\n    return new Promise((resolve, reject) => {\n      if (window.EMGlobalPlayerInstance != null) {\n        resolve(window.EMGlobalPlayerInstance);\n        return;\n      }\n\n      let volumeRef = {\n        current:\n          window.localStorage.getItem(\"EMPlayerVolume\") ?? (0.1).toFixed(2),\n      };\n      const player = new window.Spotify.Player({\n        name: \"eardrum.monster\",\n        getOAuthToken: (cb) => {\n          cb(SpotifyWebPlayer.__accessToken);\n          SpotifyWebPlayer.__spotifyAPI.fetchUserInfo();\n        },\n        volume: volumeRef.current,\n      });\n\n      // Update volume on change\n      setInterval(() => {\n        player.getVolume().then((newVolume) => {\n          if (typeof newVolume === \"number\") {\n            const newVol = newVolume.toFixed(2);\n            if (newVol > 0 && volumeRef.current !== newVol) {\n              volumeRef.current = newVol;\n              window.localStorage.setItem(\"EMPlayerVolume\", newVol);\n            }\n          }\n        });\n      }, 5000);\n\n      player.on(\"initialization_error\", ({ message }) => {\n        console.error(\"Failed to initialize\", message);\n        reject(\"initialization_error\");\n      });\n      player.on(\"authentication_error\", ({ message }) => {\n        console.error(\"Failed to authenticate\", message);\n        SpotifyWebPlayer.__onUnauthorized();\n      });\n      player.on(\"account_error\", ({ message }) => {\n        console.error(\"Spotify premium required\", message);\n        reject(\"premium_required\");\n      });\n      player.on(\"playback_error\", ({ message }) => {\n        console.error(\"Failed to perform playback\", message);\n        reject(\"playback_error\");\n      });\n      player.on(\"ready\", ({ device_id: id }) => {\n        player.deviceID = id;\n        window.EMGlobalPlayerInstance = player;\n        resolve(player);\n      });\n\n      player\n        .connect()\n        .then((success) => {\n          if (!success) {\n            console.error(\"Failed to connect to the web player\");\n          }\n        })\n        .catch(() => {\n          reject();\n        });\n    });\n  }\n\n  static createInstance(accessToken, spotifyAPI, onUnauthorized) {\n    return SpotifyWebPlayer.inject()\n      .then(() =>\n        SpotifyWebPlayer.initializePlayer(\n          spotifyAPI,\n          accessToken,\n          onUnauthorized\n        )\n      )\n      .then((player) => new SpotifyWebPlayer(player, spotifyAPI));\n  }\n\n  static getTrackFromState(state) {\n    return state?.track_window?.current_track;\n  }\n}\n","import React from \"react\";\nimport { AuthContext } from \"./Auth\";\n\nexport type AuthInfo = {\n  username: string;\n  accessToken: string;\n  userImg: string | null;\n  displayName: string | null;\n  retryAuth: () => void;\n  setAuthInfo: (authInfo: AuthInfo) => void;\n} | null;\n\nexport default function useSpotifyAPI(): AuthInfo {\n  const authContext = React.useContext(AuthContext);\n  return authContext as AuthInfo;\n}\n","import React, { createContext } from \"react\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\nimport useAuth from \"./useAuth\";\nimport { useHistory } from \"react-router-dom\";\n\ntype SpotifyContextType = {\n  webPlayer: SpotifyWebPlayer | null;\n  webPlayerUnsupported: boolean;\n  spotifyAPI: SpotifyAPI | null;\n  lastMutationTimestamp: number | null;\n  setLastMutationTimestamp: (time: number) => void;\n};\n\nexport const SpotifyContext = createContext<SpotifyContextType>({\n  webPlayer: null,\n  webPlayerUnsupported: false,\n  spotifyAPI: null,\n  lastMutationTimestamp: null,\n  setLastMutationTimestamp: () => {},\n});\n\nexport function SpotifyProvider({\n  children,\n}: {\n  children: React.ReactChildren;\n}) {\n  const authInfo = useAuth();\n  const history = useHistory();\n  const [webPlayer, setWebPlayer] = React.useState<null | SpotifyWebPlayer>(\n    null\n  );\n  const [webPlayerUnsupported, setWebPlayerUnsupported] = React.useState(false);\n  const [spotifyAPI, setSpotifyAPI] = React.useState<null | SpotifyAPI>(null);\n  const [lastMutationTimestamp, setLastMutationTimestamp] = React.useState<\n    null | number\n  >(null);\n\n  React.useEffect(() => {\n    if (authInfo == null) {\n      setWebPlayer(null);\n      setSpotifyAPI(null);\n    } else {\n      const api = new SpotifyAPI(authInfo.accessToken, authInfo.retryAuth);\n      setSpotifyAPI(api);\n      SpotifyWebPlayer.createInstance(\n        authInfo.accessToken,\n        api,\n        authInfo.retryAuth\n      )\n        .then((inst) => {\n          setWebPlayer(inst);\n        })\n        .catch((error) => {\n          switch (error) {\n            case \"premium_required\": {\n              history.replace(\"/premium_required\");\n              break;\n            }\n            case \"initialization_error\":\n            case \"playback_error\":\n            default: {\n              setWebPlayer(null);\n              setWebPlayerUnsupported(true);\n            }\n          }\n        });\n    }\n  }, [authInfo, history]);\n\n  const spotifyContext = React.useMemo(\n    () => ({\n      webPlayer,\n      webPlayerUnsupported,\n      spotifyAPI,\n      lastMutationTimestamp,\n      setLastMutationTimestamp,\n    }),\n    [webPlayer, spotifyAPI, lastMutationTimestamp, webPlayerUnsupported]\n  );\n\n  return (\n    <SpotifyContext.Provider value={spotifyContext}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext\";\n\nexport default function useSpotifyAPI() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.spotifyAPI;\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext\";\n\nexport function useSpotifyWebPlayerUnsupported() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext.webPlayerUnsupported;\n}\n\nexport default function useSpotifyWebPlayer() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.webPlayer;\n}\n","import React from \"react\";\nimport useSpotifyAPI from \"./useSpotifyAPI.js\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\n\nexport default function SongPlayerWithControls({ song }) {\n  const spotifyAPI = useSpotifyAPI();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [devices, setDevices] = React.useState(null);\n  const [activeDeviceID, setActiveDeviceID] = React.useState(null);\n  const activeDeviceIDRef = React.useRef(null);\n  const [isReady, setIsReady] = React.useState(false);\n  activeDeviceIDRef.current = activeDeviceID;\n\n  const eardrumPlayer = spotifyWebPlayer && {\n    id: spotifyWebPlayer.getDeviceID(),\n    name: \"eardrum.monster\",\n  };\n  const deviceList = devices ?? [];\n  if (\n    eardrumPlayer != null &&\n    !deviceList.find((d) => d.id === eardrumPlayer.id)\n  ) {\n    deviceList.push(eardrumPlayer);\n  }\n\n  // Fetch devices\n  React.useEffect(() => {\n    spotifyAPI &&\n      spotifyAPI.fetchDevices().then((data) => {\n        setDevices(data.devices);\n      });\n  }, [spotifyAPI]);\n\n  // Use web player if there is no active device\n  React.useEffect(() => {\n    if (spotifyAPI && devices) {\n      const activeDevice = devices.find((device) => device.is_active === true);\n      if (activeDevice) {\n        setActiveDeviceID(activeDevice.id);\n        setIsReady(true);\n      } else if (spotifyWebPlayer) {\n        setActiveDeviceID(spotifyWebPlayer.getDeviceID());\n        setIsReady(true);\n      }\n    }\n  }, [spotifyAPI, devices, spotifyWebPlayer]);\n\n  React.useEffect(() => {\n    activeDeviceIDRef.current &&\n      isReady &&\n      spotifyAPI &&\n      spotifyAPI.play(song.spotifyURI, activeDeviceIDRef.current);\n  }, [spotifyAPI, song, isReady]);\n\n  const handleChange = (event) => {\n    const deviceID = event.target.value;\n    spotifyAPI.transferPlayback(deviceID);\n    setActiveDeviceID(deviceID);\n  };\n\n  return (\n    <div className=\"Listen-controls\">\n      <div>Playing on device:</div>\n      <select value={activeDeviceID ?? \"\"} onChange={handleChange}>\n        {deviceList?.map((device) => (\n          <option key={device.id} value={device.id}>\n            {device.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Track.css\";\nimport logo from \"./logo.png\";\n\nfunction Track({ track }) {\n  return (\n    <div className=\"Track\">\n      <img\n        className=\"Track-albumImg\"\n        src={track?.albumImg ?? logo}\n        alt=\"Album art\"\n      />\n      <div className=\"Track-details\">\n        <p className=\"Track-name\">{track?.name ?? \"Unknown\"}</p>\n        <p className=\"Track-artist\">{track?.artistName}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"./Track.js\";\n\nexport default function TrackList({ songs }) {\n  return (\n    <>\n      <h3>Recently played tracks</h3>\n      {songs.map(\n        (song) =>\n          song != null && (\n            <div key={song.id} className=\"Listen-track\">\n              <Track track={song.track} />\n            </div>\n          )\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./EQBars.css\";\n\nexport default function EQBars({ className }) {\n  return (\n    <div className={className}>\n      <div className=\"EQBars-container\">\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Connect } from \"aws-amplify-react\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as queries from \"./graphql/queries\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { getActiveListeners, isUserListening } from \"./Utils\";\nimport \"./Listeners.css\";\n\nimport type {\n  OnUpdateUserByListeningToSubscription,\n  UsersByListeningToQuery,\n} from \"./API\";\nimport type { User } from \"./Types\";\n\nexport default function Listeners({\n  hostUserID,\n  hostDisplayName,\n  hostUserImg,\n}: {\n  hostUserID: string;\n  hostDisplayName: string;\n  hostUserImg: string;\n}) {\n  const [rerender, setRerender] = React.useState(false);\n\n  // Re-render every 10s to update listeners\n  React.useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      setRerender((r) => !r);\n    }, 10000);\n    return () => {\n      clearTimeout(timeoutID);\n    };\n  }, [rerender]);\n\n  return (\n    <div className=\"Listeners\">\n      <div className=\"Listeners-title\">Listeners</div>\n      <div className=\"Listeners-list\">\n        <Connect\n          query={graphqlOperation(queries.usersByListeningTo, {\n            listeningTo: hostUserID,\n            sortDirection: \"DESC\",\n            limit: 50,\n          })}\n          subscription={graphqlOperation(\n            subscriptions.onUpdateUserByListeningTo,\n            {\n              listeningTo: hostUserID,\n            }\n          )}\n          // @ts-ignore\n          onSubscriptionMsg={(\n            prev: UsersByListeningToQuery,\n            data: OnUpdateUserByListeningToSubscription\n          ) => {\n            const { onUpdateUserByListeningTo } = data;\n            const items = prev.usersByListeningTo?.items;\n            if (items == null || onUpdateUserByListeningTo == null) {\n              console.error(\"unexpected null Listeners\", prev);\n              return prev;\n            }\n            const index = items.findIndex(\n              (user) => user && user.userID === onUpdateUserByListeningTo.userID\n            );\n            const isListening = isUserListening(onUpdateUserByListeningTo);\n            let wasListening = isUserListening(items[index] as User);\n            if (index >= 0) {\n              items[index] = onUpdateUserByListeningTo;\n            } else {\n              items.push(onUpdateUserByListeningTo);\n            }\n            if (isListening && !wasListening) {\n              const audio = new Audio(process.env.PUBLIC_URL + \"/notif.wav\");\n              audio.volume = 0.2;\n              audio.play();\n            }\n            return prev;\n          }}\n        >\n          {({ data, loading, error }: any) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users =\n              (data.usersByListeningTo && data.usersByListeningTo.items) ?? [];\n            const onlineUsers = getActiveListeners(users);\n            return (\n              <>\n                <div className=\"Listeners-item\">\n                  {hostUserImg && (\n                    <img\n                      className=\"Listeners-userImg\"\n                      src={hostUserImg}\n                      alt={`Profile Pic`}\n                    />\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                  <div>{hostDisplayName} ⭐</div>\n                </div>\n                {onlineUsers.map((user) => {\n                  if (user == null) {\n                    return null;\n                  }\n                  return (\n                    <div className=\"Listeners-item\" key={user.userID}>\n                      {user?.userImg && (\n                        <img\n                          className=\"Listeners-userImg\"\n                          src={user?.userImg}\n                          alt={`Profile Pic`}\n                        />\n                      )}\n                      <span>{user.displayName || user.userID}</span>\n                    </div>\n                  );\n                })}\n              </>\n            );\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const onUpdateUserByListeningTo = /* GraphQL */ `\n  subscription OnUpdateUserByListeningTo($listeningTo: String) {\n    onUpdateUserByListeningTo(listeningTo: $listeningTo) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const onUpdateUserByUserId = /* GraphQL */ `\n  subscription OnUpdateUserByUserId($userID: String) {\n    onUpdateUserByUserID(userID: $userID) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const onCreateTrack = /* GraphQL */ `\n  subscription OnCreateTrack {\n    onCreateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onUpdateTrack = /* GraphQL */ `\n  subscription OnUpdateTrack {\n    onUpdateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onDeleteTrack = /* GraphQL */ `\n  subscription OnDeleteTrack {\n    onDeleteTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","import React from \"react\";\nimport Switch from \"react-switch\";\nimport { hasTouchScreen } from \"./Utils\";\n\nexport default function WakeLockControl() {\n  const [wlEnabled, setwlEnabled] = React.useState(false);\n  const NoSleep = (window as Window & typeof globalThis & { NoSleep: any })\n    .NoSleep;\n  const noSleepRef = React.useRef<any>(null);\n\n  React.useEffect(() => {\n    return () => {\n      if (noSleepRef.current != null) {\n        noSleepRef.current.disable();\n      }\n    };\n  }, []);\n\n  const handleChange = React.useCallback(\n    (enabled) => {\n      setwlEnabled(enabled);\n      if (enabled && NoSleep != null) {\n        noSleepRef.current = new NoSleep();\n        noSleepRef.current.enable();\n      } else {\n        noSleepRef.current.disable();\n      }\n    },\n    [setwlEnabled, NoSleep]\n  );\n\n  if (NoSleep == null || !hasTouchScreen()) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"Broadcast-controls\">\n        <label htmlFor=\"wlToggle\">Prevent screen lock</label>\n        <Switch\n          className=\"Broadcast-switch\"\n          id=\"wlToggle\"\n          onChange={handleChange}\n          checked={wlEnabled}\n        />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Listen.css\";\nimport DevPublisher from \"./DevPublisher.js\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\nimport SongPlayerWithControls from \"./SongPlayerWithControls.js\";\nimport TrackList from \"./TrackList.js\";\nimport Track from \"./Track.js\";\nimport EQBars from \"./EQBars.js\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport Listeners from \"./Listeners\";\nimport { isUserOnline } from \"./Utils\";\nimport WakeLockControl from \"./WakeLockControl\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as mutations from \"./graphql/mutations\";\n\nfunction createUserObservable(hostUserID) {\n  return API.graphql(\n    graphqlOperation(subscriptions.onUpdateUserByUserId, {\n      userID: hostUserID,\n    })\n  );\n}\n\nfunction StartListening({ children, isListening, onClick }) {\n  const location = useLocation();\n  const authInfo = React.useContext(AuthContext);\n\n  if (isListening) {\n    return children;\n  }\n\n  return (\n    <div className=\"Listen-startListening\">\n      <div className=\"Listen-startListeningMask\">{children}</div>\n      <div className=\"Listen-startListeningContent\">\n        <EQBars className=\"Listen-EQ\" />\n      </div>\n      <div className=\"Listen-startListeningContent\">\n        <a className=\"Listen-play\" href={location.pathname} onClick={onClick}>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          👂\n          <span className=\"Listen-playLink\">\n            {authInfo == null ? \"Login to join ▶\" : \"Join ▶\"}\n          </span>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          😈\n        </a>\n      </div>\n    </div>\n  );\n}\n\nfunction publishListenPing(userID, hostUserID) {\n  return API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID,\n        latestListenPing: Math.floor(Date.now() / 1000),\n        listeningTo: hostUserID,\n      },\n    })\n  );\n}\n\nfunction ListenPlayer({ isCurrentlyLive, songs, hostUserID, hostDisplayName }) {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const [isListeningUsername, setIsListeningUsername] = useLocalStorage(\n    \"EMisListeningUsername\"\n  );\n  const isListening = authInfo && hostUserID === isListeningUsername;\n  const NoSleep = window.NoSleep;\n\n  React.useEffect(() => {\n    if (isListening && NoSleep != null) {\n      const noSleep = new NoSleep();\n      noSleep.enable();\n      return () => noSleep.disable();\n    }\n  }, [isListening, NoSleep]);\n\n  React.useEffect(() => {\n    if (isListening && authInfo) {\n      publishListenPing(authInfo.username, hostUserID);\n      const intervalID = setInterval(() => {\n        publishListenPing(authInfo.username, hostUserID);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [isListening, authInfo, hostUserID]);\n\n  const handleJoin = React.useCallback(\n    (e) => {\n      e.preventDefault();\n      setIsListeningUsername(hostUserID);\n      if (authInfo == null) {\n        window.location.href = getAuthorizeURI(location.pathname);\n      }\n    },\n    [setIsListeningUsername, authInfo, location, hostUserID]\n  );\n\n  if (!isCurrentlyLive) {\n    return <h1>offline</h1>;\n  }\n\n  return (\n    <StartListening isListening={isListening} onClick={handleJoin}>\n      {isListening && <p>Listening to {hostDisplayName}'s channel!</p>}\n      {isListening && <SongPlayerWithControls song={songs[0]} />}\n      {isListening && <WakeLockControl />}\n      <div>Now Playing:</div>\n      <Track track={songs[0].track} />\n    </StartListening>\n  );\n}\n\nfunction Listen({ hostDisplayName, hostUserID, hostUserImg }) {\n  const location = useLocation();\n  const history = useHistory();\n  const devPublisherEnabled = location.search.includes(\"DEV=1\");\n\n  // Setup host subscription\n  React.useEffect(() => {\n    const obs = createUserObservable(hostUserID);\n    const sub = obs.subscribe({\n      next: (event) => {\n        if (event) {\n          const newHostDisplayName =\n            event.value.data.onUpdateUserByUserID?.displayName;\n          if (\n            newHostDisplayName != null &&\n            newHostDisplayName !== hostDisplayName\n          ) {\n            history.replace(`/u/${newHostDisplayName}`);\n          }\n        }\n      },\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [hostUserID, hostDisplayName, history]);\n\n  return (\n    <div className=\"Listen\">\n      <Connect\n        query={graphqlOperation(queries.songEventsByUserId, {\n          userID: hostUserID,\n          sortDirection: \"DESC\",\n          limit: 50,\n        })}\n        subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\n          userID: hostUserID,\n        })}\n        onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n          if (prev?.songEventsByUserID?.items == null) {\n            console.error(\"bad state in listen\", prev);\n            return prev;\n          }\n          prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n          if (prev.songEventsByUserID.items.length > 50) {\n            prev.songEventsByUserID.items.pop();\n          }\n          return prev;\n        }}\n      >\n        {({ data, loading, error }) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const songs =\n            (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n          const online = songs.length > 0 && isUserOnline(songs[0].user);\n\n          return (\n            <>\n              {online && (\n                <div className=\"Listen-listeners\">\n                  <Listeners\n                    hostUserID={hostUserID}\n                    hostDisplayName={hostDisplayName}\n                    hostUserImg={hostUserImg}\n                  />\n                </div>\n              )}\n              <div className=\"Listen-trackList\">\n                <div className=\"Listen-header\">\n                  {hostDisplayName}'s Channel\n                  {devPublisherEnabled && (\n                    <DevPublisher hostUserID={hostUserID} />\n                  )}\n                </div>\n                <>\n                  <ListenPlayer\n                    isCurrentlyLive={online}\n                    songs={songs}\n                    hostDisplayName={hostDisplayName}\n                    hostUserID={hostUserID}\n                  />\n                  <TrackList songs={online ? songs.slice(1) : songs} />\n                </>\n              </div>\n            </>\n          );\n        }}\n      </Connect>\n    </div>\n  );\n}\n\nexport default Listen;\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext\";\n\nexport default function useSpotifyContext() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext;\n}\n","import React from \"react\";\nimport useSpotifyAPI from \"./useSpotifyAPI\";\nimport useAuth from \"./useAuth\";\nimport useSpotifyContext from \"./useSpotifyContext\";\n\nimport type { CreateSongEventInput, CreateTrackInput } from \"./API\";\nimport type { CurrentlyPlayingResponse } from \"./SpotifyAPITypes\";\n\nexport type BroadcastPublisherProps = {\n  onSongEvent: (\n    trackInput: CreateTrackInput,\n    songEventInput: CreateSongEventInput\n  ) => void;\n};\n\nexport default function BroadcastPollingPublisher({\n  onSongEvent,\n}: BroadcastPublisherProps) {\n  const authInfo = useAuth();\n  const spotifyAPI = useSpotifyAPI();\n  const handlePlayerStateChangedRef = React.useRef<\n    (currentlyPlaying: CurrentlyPlayingResponse) => void\n  >(() => {});\n  const { lastMutationTimestamp } = useSpotifyContext();\n\n  const handlePlayerStateChanged = (\n    currentlyPlaying: CurrentlyPlayingResponse\n  ) => {\n    const newTrack = currentlyPlaying?.item;\n    const isPlaying = currentlyPlaying?.is_playing ?? false;\n    if (newTrack == null || isPlaying === false || authInfo == null) {\n      return;\n    }\n    const track = {\n      uri: newTrack.uri,\n      trackID: newTrack.id,\n      name: newTrack.name,\n      durationMs: newTrack.duration_ms,\n      albumName: newTrack.album.name,\n      artistName: newTrack.artists[0].name,\n      albumImg: newTrack.album.images[0].url,\n    };\n    const songEvent = {\n      userID: authInfo.username,\n      timestamp: Math.floor(Date.now() / 1000),\n      position: Math.floor(currentlyPlaying?.progress_ms ?? 0),\n      spotifyURI: newTrack.uri,\n      type: \"NEW_SONG\",\n    };\n    onSongEvent(track, songEvent);\n  };\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\n\n  React.useEffect(() => {\n    if (spotifyAPI) {\n      const timeoutIDRef: { current: NodeJS.Timeout | null } = {\n        current: null,\n      };\n      const fetchCurrentlyPlaying = () => {\n        spotifyAPI.fetchCurrentlyPlaying().then((currentlyPlayingResponse) => {\n          const progressMs = currentlyPlayingResponse?.progress_ms;\n          const durationMs = currentlyPlayingResponse?.item?.duration_ms;\n          // Poll more frequently earlier in the song\n          const timeoutDuration =\n            progressMs != null && durationMs != null && progressMs / 1000 < 30\n              ? 4000\n              : (durationMs - progressMs) / 1000 < 20\n              ? 3000\n              : 10000;\n          handlePlayerStateChangedRef.current(currentlyPlayingResponse);\n          timeoutIDRef.current = setTimeout(\n            fetchCurrentlyPlaying,\n            timeoutDuration\n          );\n        });\n      };\n      fetchCurrentlyPlaying();\n      return () => {\n        if (timeoutIDRef.current != null) {\n          clearTimeout(timeoutIDRef.current);\n        }\n      };\n    }\n  }, [spotifyAPI, lastMutationTimestamp, handlePlayerStateChangedRef]);\n\n  return null;\n}\n","import React from \"react\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer\";\nimport useAuth from \"./useAuth\";\n\nimport type { CreateSongEventInput, CreateTrackInput } from \"./API\";\nimport type { SpotifyWebPlayerState } from \"./SpotifyWebPlayerTypes\";\n\nexport type BroadcastPublisherProps = {\n  onSongEvent: (\n    trackInput: CreateTrackInput,\n    songEventInput: CreateSongEventInput\n  ) => void;\n};\n\nexport default function BroadcastWebPlayerPublisher({\n  onSongEvent,\n}: BroadcastPublisherProps) {\n  const authInfo = useAuth();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const handlePlayerStateChangedRef = React.useRef<(newState: any) => void>(\n    () => {}\n  );\n\n  const handlePlayerStateChanged = (newState: SpotifyWebPlayerState) => {\n    const newTrack = SpotifyWebPlayer.getTrackFromState(newState);\n    // If there is not a valid track, dont publish\n    if (newTrack == null || authInfo == null) {\n      return;\n    }\n    const track = {\n      uri: newTrack.uri,\n      trackID: newTrack.id,\n      name: newTrack.name,\n      durationMs: newTrack.duration_ms,\n      albumName: newTrack.album.name,\n      artistName: newTrack.artists[0].name,\n      albumImg: newTrack.album.images[0].url,\n    };\n    const songEvent = {\n      userID: authInfo.username,\n      timestamp: Math.floor(Date.now() / 1000),\n      position: Math.floor(newState.position ?? 0),\n      spotifyURI: newTrack.uri,\n      type: \"NEW_SONG\",\n    };\n\n    onSongEvent(track, songEvent);\n  };\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\n\n  React.useEffect(() => {\n    if (spotifyWebPlayer != null) {\n      const changeListener = (newState: any) =>\n        handlePlayerStateChangedRef.current(newState);\n      const initFunc = {\n        current: (id: any) => {\n          if (id === spotifyWebPlayer.getDeviceID()) {\n            // Request current state\n            spotifyWebPlayer.fetchState().then((newState: any) => {\n              handlePlayerStateChangedRef.current(newState);\n            });\n            spotifyWebPlayer.resume();\n          } else {\n            // Transfer playback to the web player\n            spotifyWebPlayer.transferPlayback();\n          }\n        },\n      };\n      // Subscribe to future changes\n      spotifyWebPlayer.addStateChangeListener(changeListener);\n\n      // get current state or transfer playback\n      spotifyWebPlayer.spotifyAPI.fetchCurrentDeviceID().then((id: any) => {\n        initFunc.current(id);\n      });\n\n      // Remove the listener on unMount\n      return () => {\n        spotifyWebPlayer.removeStateChangeListener(changeListener);\n        initFunc.current = () => {};\n        spotifyWebPlayer.pause();\n      };\n    }\n  }, [spotifyWebPlayer, handlePlayerStateChangedRef]);\n\n  return null;\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport * as mutations from \"./graphql/mutations\";\nimport useSpotifyWebPlayer, {\n  useSpotifyWebPlayerUnsupported,\n} from \"./useSpotifyWebPlayer\";\nimport useAuth from \"./useAuth\";\nimport BroadcastPollingPublisher from \"./BroadcastPollingPublisher\";\nimport BroadcastWebPlayerPublisher from \"./BroadcastWebPlayerPublisher\";\n\nimport type { CreateSongEventInput, CreateTrackInput } from \"./API\";\nimport type { SongEvent } from \"./Types\";\n\nexport type BroadcastPublisherProps = {\n  currentSongEvent: SongEvent;\n  onSongEvent: (songEvent: SongEvent) => void;\n};\n\nfunction publishSongEvent(songEvent: CreateSongEventInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createSongEvent, {\n      input: songEvent,\n    })\n  );\n}\n\nfunction publishBroadcastPing(username: string) {\n  API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID: username,\n        latestSongEvent: Math.floor(Date.now() / 1000),\n      },\n    })\n  );\n}\n\nfunction publishTrack(track: CreateTrackInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createTrack, { input: track })\n  ) as Promise<GraphQLResult>;\n}\n\nexport default function BroadcastPublisher({\n  currentSongEvent,\n  onSongEvent,\n}: BroadcastPublisherProps) {\n  const authInfo = useAuth();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const webPlayerUnsupported = useSpotifyWebPlayerUnsupported();\n  const currentSongEventRef = React.useRef<SongEvent>(currentSongEvent);\n\n  const handleNewSongEvent = (\n    track: CreateTrackInput,\n    songEvent: CreateSongEventInput\n  ) => {\n    const isSameTrack =\n      songEvent.spotifyURI === currentSongEventRef.current?.spotifyURI;\n    if (isSameTrack) {\n      return;\n    }\n    const localSongEvent = {\n      __typename: \"SongEvent\" as \"SongEvent\",\n      ...songEvent,\n      track: {\n        __typename: \"Track\" as \"Track\",\n        ...track,\n      },\n      id: Math.random().toString(),\n      user: null,\n    };\n    currentSongEventRef.current = localSongEvent as SongEvent;\n    onSongEvent(localSongEvent as SongEvent);\n    publishTrack(track).then(() => {\n      publishSongEvent(songEvent);\n    });\n  };\n\n  React.useEffect(() => {\n    if (authInfo) {\n      publishBroadcastPing(authInfo.username);\n      const intervalID = setInterval(() => {\n        publishBroadcastPing(authInfo.username);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [authInfo]);\n\n  if (spotifyWebPlayer) {\n    return <BroadcastWebPlayerPublisher onSongEvent={handleNewSongEvent} />;\n  }\n  if (webPlayerUnsupported) {\n    return <BroadcastPollingPublisher onSongEvent={handleNewSongEvent} />;\n  }\n  return null;\n}\n","import React from \"react\";\nimport Switch from \"react-switch\";\nimport useSpotifyAPI from \"./useSpotifyAPI\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport useSpotifyContext from \"./useSpotifyContext\";\n\nexport default function PowerHourControl() {\n  const [phEnabled, setPhEnabled] = useLocalStorage(\"EMPhEnabled\", false);\n  const [phCount, setPhCount] = useLocalStorage(\"EMPhCount\", 1);\n  const spotifyAPI = useSpotifyAPI();\n  const phCallbackRef = React.useRef();\n  const { setLastMutationTimestamp } = useSpotifyContext();\n\n  const nextTrack = React.useCallback(() => {\n    spotifyAPI\n      .nextTrack()\n      .then(() => {\n        setLastMutationTimestamp(Date.now());\n      })\n      .catch(() => {\n        console.error(\"error playing next track\");\n      });\n  }, [spotifyAPI, setLastMutationTimestamp]);\n\n  const phCallback = (timeoutID) => {\n    if (phEnabled) {\n      setPhCount(phCount + 1);\n      nextTrack();\n    } else {\n      clearInterval(timeoutID);\n    }\n  };\n  phCallbackRef.current = phCallback;\n\n  const handleChange = React.useCallback(\n    (enabled) => {\n      setPhEnabled(enabled);\n      if (enabled) {\n        setPhCount(1);\n        if (spotifyAPI) {\n          nextTrack();\n        }\n      }\n    },\n    [setPhEnabled, setPhCount, spotifyAPI, nextTrack]\n  );\n\n  React.useEffect(() => {\n    if (phEnabled) {\n      const timeoutID = setInterval(() => {\n        phCallbackRef.current(timeoutID);\n      }, 60000);\n      return () => {\n        clearInterval(timeoutID);\n      };\n    }\n  }, [phEnabled, phCallbackRef]);\n\n  return (\n    <>\n      <div className=\"Broadcast-controls\">\n        <label htmlFor=\"phToggle\">Power hour mode</label>\n        <Switch\n          className=\"Broadcast-switch\"\n          id=\"phToggle\"\n          onChange={handleChange}\n          checked={phEnabled}\n        />\n      </div>\n      {phEnabled && <h1>{phCount}</h1>}\n    </>\n  );\n}\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport * as queries from \"./graphql/queries\";\n\nfunction updateDisplayName(userID: string, displayName: string) {\n  return (API.graphql(\n    graphqlOperation(queries.usersByDisplayName, {\n      displayName,\n    })\n  ) as Promise<GraphQLResult>)\n    .then((data: any) => {\n      const user = data?.data?.usersByDisplayName?.items?.[0];\n      if (user != null) {\n        throw new Error(\"Username exists\");\n      }\n    })\n    .then(() => {\n      return API.graphql(\n        graphqlOperation(mutations.updateUser, {\n          input: {\n            userID,\n            displayName,\n          },\n        })\n      ) as Promise<GraphQLResult>;\n    }) as Promise<GraphQLResult>;\n}\n\nexport default function ChangeUsername({\n  initialVal,\n  className,\n  onSuccess,\n}: {\n  initialVal: string;\n  className?: string;\n  onSuccess: (name: string) => void;\n}) {\n  const [val, setVal] = React.useState(initialVal);\n  const [success, setSuccess] = React.useState<boolean | null>(null);\n  const authInfo = useAuth();\n\n  const handleUpdate = (e: any) => {\n    setVal(e.target.value);\n  };\n\n  const updateName = (event: any) => {\n    if (authInfo == null) {\n      return;\n    }\n    event.preventDefault();\n    updateDisplayName(authInfo.username, val)\n      .then(() => {\n        setSuccess(true);\n        onSuccess(val);\n        authInfo.setAuthInfo({ ...authInfo, displayName: val });\n      })\n      .catch(() => {\n        setSuccess(false);\n      });\n  };\n\n  return (\n    <div className={className}>\n      <form onSubmit={updateName}>\n        <label>New name:</label>\n        <input value={val} onChange={handleUpdate} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      {success === null ? null : success === false ? \"Error\" : \"Success!\"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport ChangeUsername from \"./ChangeUsername\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function BroadcastHeading({\n  hostDisplayName,\n}: {\n  hostDisplayName: string;\n}) {\n  const authInfo = useAuth();\n  const history = useHistory();\n  const [editing, setEditing] = React.useState(false);\n\n  if (authInfo == null || authInfo.displayName !== hostDisplayName) {\n    return `${hostDisplayName}'s Channel`;\n  }\n\n  const nameUpdated = (name: string) => {\n    setEditing(false);\n    history.replace(`/u/${name}`);\n  };\n\n  if (!editing) {\n    return (\n      <div className=\"Broadcast-heading\">\n        <div className=\"Broadcast-headingTitle\">\n          {hostDisplayName}'s Channel\n        </div>\n        <button onClick={() => setEditing(true)}>Edit</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Broadcast-heading\">\n      <ChangeUsername\n        initialVal={hostDisplayName}\n        onSuccess={(name) => nameUpdated(name)}\n      />\n      <button onClick={() => setEditing(false)}>Cancel</button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"./graphql/queries\";\nimport useSpotifyWebPlayer, {\n  useSpotifyWebPlayerUnsupported,\n} from \"./useSpotifyWebPlayer\";\nimport Track from \"./Track.js\";\nimport TrackList from \"./TrackList.js\";\nimport \"./Broadcast.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport BroadcastPublisher from \"./BroadcastPublisher\";\nimport PowerHourControl from \"./PowerHourControl.js\";\nimport EQBars from \"./EQBars.js\";\nimport Listeners from \"./Listeners\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport BroadcastHeading from \"./BroadcastHeading\";\nimport WakeLockControl from \"./WakeLockControl\";\n\nfunction Broadcast() {\n  const authInfo = React.useContext(AuthContext);\n  const [songHistory, setSongHistory] = React.useState(null);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const webPlayerUnsupported = useSpotifyWebPlayerUnsupported();\n  const [copied, setCopied] = React.useState(false);\n\n  const handleSongEvent = React.useCallback(\n    (songEvent) => {\n      setSongHistory((h) => [songEvent].concat(h));\n    },\n    [setSongHistory]\n  );\n\n  React.useEffect(() => {\n    if (authInfo) {\n      API.graphql(\n        graphqlOperation(queries.songEventsByUserId, {\n          userID: authInfo.username,\n          sortDirection: \"DESC\",\n          limit: 10,\n        })\n      ).then((response) => {\n        setSongHistory(response.data?.songEventsByUserID?.items ?? []);\n      });\n    }\n  }, [authInfo]);\n\n  React.useEffect(() => {\n    if (copied) {\n      const timeoutID = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n      return () => clearTimeout(timeoutID);\n    }\n  }, [copied]);\n\n  if (authInfo == null) {\n    return <div>Login to spotify to set the eardrum monster free</div>;\n  }\n\n  const trackList =\n    songHistory == null ? null : (\n      <div className=\"Broadcast-history\">\n        <TrackList songs={songHistory.slice(1)} />\n      </div>\n    );\n\n  const shareURI = `https://eardrum.monster/u/${authInfo.displayName}`;\n\n  const player =\n    (spotifyWebPlayer == null && webPlayerUnsupported === false) ||\n    songHistory == null ? (\n      <div>Initializing Spotify...</div>\n    ) : (\n      <>\n        <div className=\"Broadcast-title\">\n          <BroadcastHeading hostDisplayName={authInfo.displayName} />\n        </div>\n        <div className=\"Broadcast-text\">You are the DJ.</div>\n        <div className=\"Broadcast-text\">\n          <div>1. Control your spotify like normal to change the music</div>\n          <div>2. keep this page open to continue streaming</div>\n        </div>\n        <div className=\"Broadcast-text\">\n          Share this URL to add listeners:\n          <input value={shareURI} disabled size={shareURI.length} />\n          <button>\n            <CopyToClipboard\n              text={`https://eardrum.monster/u/${authInfo.displayName}`}\n              onCopy={() => {\n                setCopied(true);\n              }}\n            >\n              <span>{copied ? \"Copied!\" : \"Copy\"}</span>\n            </CopyToClipboard>\n          </button>\n        </div>\n        <WakeLockControl />\n        <PowerHourControl />\n        <EQBars className=\"Broadcast-streaming\" />\n        <p>Now playing:</p>\n        <div className=\"Broadcast-currentTrack\">\n          <BroadcastPublisher\n            currentSongEvent={songHistory[0]}\n            onSongEvent={handleSongEvent}\n          />\n          <Track track={songHistory[0]?.track} />\n        </div>\n      </>\n    );\n\n  return (\n    <div className=\"Broadcast\">\n      <div className=\"Broadcast-listeners\">\n        <Listeners\n          hostUserID={authInfo.username}\n          hostDisplayName={authInfo.displayName}\n          hostUserImg={authInfo.userImg}\n        />\n      </div>\n      <div className=\"Broadcast-player\">\n        {player}\n        {trackList}\n      </div>\n    </div>\n  );\n}\n\nexport default Broadcast;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Listen from \"./Listen.js\";\nimport Broadcast from \"./Broadcast.js\";\nimport { AuthContext } from \"./Auth.js\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"./graphql/queries\";\n\nfunction fetchHostByDisplayName(hostDisplayName) {\n  return API.graphql(\n    graphqlOperation(queries.usersByDisplayName, {\n      displayName: hostDisplayName,\n      sortDirection: \"DESC\",\n      limit: 1,\n    })\n  ).then((data) => {\n    return data?.data?.usersByDisplayName?.items?.[0];\n  });\n}\n\nfunction Channel() {\n  const authInfo = React.useContext(AuthContext);\n  const { id } = useParams();\n  const [hostUserID, setHostUserID] = React.useState(null);\n  const [hostUserImg, setHostUserImg] = React.useState(null);\n  const [failedLookup, setFailedLookup] = React.useState(false);\n  const hostDisplayName = id;\n\n  //Resolve host username\n  React.useEffect(() => {\n    if (authInfo != null && authInfo.displayName === hostDisplayName) {\n      setHostUserID(authInfo?.username);\n      return;\n    }\n\n    fetchHostByDisplayName(hostDisplayName)\n      .then((host) => {\n        if (host?.userID == null) {\n          throw new Error(\"Could not locate user\");\n        }\n        setHostUserID(host.userID);\n        setHostUserImg(host?.userImg);\n      })\n      .catch(() => {\n        setFailedLookup(true);\n      });\n  }, [authInfo, id, hostDisplayName]);\n\n  if (failedLookup) {\n    return <div className=\"Listen\">User not found</div>;\n  }\n\n  if (hostUserID == null) {\n    return null;\n  }\n\n  if (authInfo?.displayName === hostDisplayName) {\n    return <Broadcast />;\n  }\n\n  return (\n    <Listen\n      hostDisplayName={hostDisplayName}\n      hostUserID={hostUserID}\n      hostUserImg={hostUserImg}\n    />\n  );\n}\n\nexport default Channel;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Home.css\";\n// import { AuthContext } from \"./Auth.js\";\nimport * as queries from \"./graphql/customQueries\";\n// import EQBars from \"./EQBars.js\";\n// import useAuth from \"./useAuth\";\nimport logo from \"./logo.png\";\nimport { isUserOnline, getListenerCount } from \"./Utils\";\n\nimport type { User } from \"./Types\";\n\nfunction Channel({\n  img,\n  cta,\n  title,\n  subtitle,\n}: {\n  img: string | null;\n  title: string;\n  subtitle: string;\n  cta: React.ReactNode;\n}) {\n  return (\n    <div className=\"Home-user\">\n      <div className=\"Home-userTitle\">{title}</div>\n      <div className=\"Home-userSubtitle\">{subtitle}</div>\n      <img className=\"Home-userImg\" src={img ?? logo} alt=\"Album art\" />\n      {cta}\n    </div>\n  );\n}\n\nexport default function ChannelList() {\n  return (\n    <div className=\"ChannelList\">\n      <h2 className=\"Home-title\">\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        😈 Users currently streaming 😈\n      </h2>\n      <Connect\n        query={graphqlOperation(queries.usersByLatestSongEventCustom, {\n          type: \"USER\",\n          sortDirection: \"DESC\",\n          limit: 50,\n        })}\n      >\n        {({ data, loading, error }: any) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const users =\n            (data.usersByLatestSongEvent &&\n              data.usersByLatestSongEvent.items) ??\n            [];\n          const onlineUsers = users\n            .filter((user: User) => isUserOnline(user))\n            .sort((a: User, b: User) =>\n              getListenerCount(a) > getListenerCount(b) ? -1 : 1\n            );\n          return (\n            <div className=\"Home-userList\">\n              {onlineUsers.map((user: User) => {\n                if (user == null) {\n                  return null;\n                }\n                const latestSong = user.songEvents?.items?.[0];\n                const img = latestSong?.track?.albumImg ?? null;\n                const numListeners = getListenerCount(user);\n                return (\n                  <Channel\n                    key={user.userID}\n                    img={img}\n                    title={user.displayName || user.userID}\n                    subtitle={`${numListeners} ${\n                      numListeners === 1 ? \"listener\" : \"listeners\"\n                    }`}\n                    cta={\n                      <Link\n                        className=\"Home-link\"\n                        to={`/u/${user.displayName || user.userID}`}\n                      >\n                        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                        Join ▶️\n                      </Link>\n                    }\n                  />\n                );\n              })}\n              <Channel\n                img={null}\n                title=\"Start a channel\"\n                subtitle=\"\"\n                cta={\n                  <Link className=\"Home-link\" to={`/broadcast`}>\n                    My channel\n                  </Link>\n                }\n              />\n            </div>\n          );\n        }}\n      </Connect>\n    </div>\n  );\n}\n","export const usersByLatestSongEventCustom = /* GraphQL */ `\n  query UsersByLatestSongEventCustom(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        displayName\n        userImg\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents(sortDirection: DESC) {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n            track {\n              durationMs\n              name\n              albumName\n              albumImg\n            }\n          }\n          nextToken\n        }\n        listeners(sortDirection: DESC) {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import React from \"react\";\nimport \"./Home.css\";\nimport ChannelList from \"./ChannelList\";\n\nfunction Home() {\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <div className=\"Home\">\n      <div>\n        <em>\n          eardrum.monster allows you to sync your spotify client with friends\n        </em>\n      </div>\n      <div className=\"Home-list\">\n        <ChannelList />\n      </div>\n      <div className=\"Home-content\">\n        <h1>How do I use it?</h1>\n        <div>1. Join a channel or create your own ☝️</div>\n        <div>2. Share the URL with your friends️</div>\n        <h1>Its great for:</h1>\n        <div>\n          ✅ Streamers who want to let their viewers sync up their music with\n          high quality spotify audio\n        </div>\n        <div>✅ Online gamers who want listen together while gaming</div>\n        <div>\n          ✅ People who are quarantined and want to have virtual power hours\n          together\n        </div>\n\n        <h1>Did you say power hour?</h1>\n        <div>\n          ✅ Yes! eardrum.monster now features <em>Power hour mode™️</em> that\n          will automatically change the song every 60s. Everybody must drink\n          when the song changes.\n        </div>\n\n        <h1>Can I play century club?</h1>\n        <div>\n          ✅ We've got you covered! <em>Power hour mode™️</em> will keep em'\n          coming well beyond the traditional 60 minutes so you can attempt to\n          join the century club as many times as you want!\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { getAuthorizeURI } from \"./Auth\";\n\nexport default function RedirectToLoginOrBroadcast() {\n  const location = useLocation();\n  const authInfo = useAuth();\n  if (authInfo) {\n    return <Redirect to={`/u/${authInfo.displayName}`} />;\n  }\n  window.location.href = getAuthorizeURI(location.pathname);\n  return null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport Channel from \"./Channel.js\";\nimport Home from \"./Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AuthProvider, AuthRedirect } from \"./Auth.js\";\nimport { SpotifyProvider } from \"./SpotifyContext\";\nimport RedirectToLoginOrBroadcast from \"./RedirectToLoginOrBroadcast\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AuthProvider>\n          <Header />\n          <Switch>\n            <Route path=\"/auth/\">\n              <AuthRedirect />\n            </Route>\n            <SpotifyProvider>\n              <div className=\"App-content\">\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/u/:id\">\n                  <Channel />\n                </Route>\n                <Route path=\"/broadcast\">\n                  <RedirectToLoginOrBroadcast />\n                </Route>\n                <Route path=\"/premium_required\">\n                  {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                  <div className=\"App-msg\">\n                    Error: Spotify premium required for syncing with\n                    eardrum.monster 😞\n                  </div>\n                </Route>\n              </div>\n            </SpotifyProvider>\n          </Switch>\n        </AuthProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n  aws_project_region: \"us-east-1\",\n  aws_appsync_graphqlEndpoint:\n    \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n  aws_appsync_region: \"us-east-1\",\n  aws_appsync_authenticationType: \"API_KEY\",\n  aws_appsync_apiKey: \"da2-jxgfvq7zzvacfozrt7vucdiipq\",\n};\n\nexport default awsmobile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport awsconfig from \"./aws-exports\";\nimport Amplify from \"aws-amplify\";\n\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";"],"sourceRoot":""}