{"version":3,"sources":["logo.svg","spotify.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SpotifyClient","accessToken","this","freshAccessToken","player","getCurrentState","console","error","Promise","reject","state","paused","pause","newUri","getUriFromState","fetchState","then","currentState","isAd","play","Math","abs","position","seek","ms","uri","fetch","deviceId","method","body","JSON","stringify","uris","headers","Authorization","response","ok","callback","addListener","newSong","getTrackFromState","newSongUri","currentSongUri","newState","resolve","window","onSpotifyWebPlaybackSDKReady","initializePlayer","sdkScript","document","createElement","src","appendChild","Spotify","Player","name","getOAuthToken","fetchOauthToken","bind","volume","on","message","id","device_id","device_ids","connect","success","device","log","track_window","current_track","type","App","redirectURI","encodeURIComponent","process","authorizeURI","initialToken","localStorage","getItem","React","useState","setAccessToken","location","hash","params","slice","split","map","param","forEach","tup","access_token","setItem","useEffect","client","prepareSpotifyClient","data","initSpotifyClient","className","logo","alt","href","onClick","e","preventDefault","removeItem","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,yMCAtBC,E,WACnB,WAAYC,GAAc,oBACxBC,KAAKD,YAAcA,EACnBC,KAAKC,kBAAmB,EACxBD,KAAKE,OAAS,K,yDAUd,OAAKF,KAAKE,OAKHF,KAAKE,OAAOC,mBAJjBC,QAAQC,MAAM,0BACPC,QAAQC,OAAO,6B,qCAWXC,GAAQ,IAAD,OACpB,GAAKA,EAIL,GAAIA,EAAMC,OACRT,KAAKU,YADP,CAQA,IAAMC,EAASb,EAAcc,gBAAgBJ,GAE/B,MAAVG,EAKAX,KAAKE,OAEPF,KAAKa,aAAaC,MAAK,SAAAC,GACD,MAAhBA,EAKAjB,EAAckB,KAAKD,KAIJjB,EAAcc,gBAAgBG,KAE9BJ,IAAkC,IAAxBI,EAAaN,OAO1C,EAAKQ,KAAKN,GANJO,KAAKC,IAAIX,EAAMY,SAAWL,EAAaK,UAAY,KACrD,EAAKC,KAAKb,EAAMY,WAZlB,EAAKH,KAAKN,MAqBdX,KAAKiB,KAAKN,GA7BVP,QAAQC,MAAM,kBAAmBG,M,8BAsCnC,OAAOR,KAAKE,OAAOQ,U,2BAGhBY,GACH,OAAOtB,KAAKE,OAAOmB,KAAKC,K,2BAUrBC,GACH,OAAOC,MAAM,uDAAD,OAC6CxB,KAAKyB,UAC5D,CACEC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEC,KAAM,CAACP,KAC9BQ,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYhC,KAAKD,gBAGlCe,MAAK,SAAAmB,GACAA,EAASC,IACZ9B,QAAQC,MAAM,0B,2CAeC8B,GAAW,IAAD,OAC7BnC,KAAKE,OAAOkC,YAAY,wBAAwB,SAAA5B,GAC9C,IAAI6B,EAAUvC,EAAcwC,kBAAkB9B,GACxC+B,EAAazC,EAAcc,gBAAgBJ,GAE7C+B,IAAe,EAAKC,iBACtBH,EAAU,MAGZ,EAAKG,eAAiBD,EAEtBJ,EAAS,CACPM,SAAUjC,EACV6B,iB,6CAKkB,IAAD,OACrB,OAAO,IAAI/B,SAAQ,SAAAoC,GACjBC,OAAOC,6BAA+B,WACpC,EAAKC,mBAAmB/B,KAAK4B,IAG/B,IAAMI,EAAYC,SAASC,cAAc,UACzCF,EAAUG,IAAM,wCAChBF,SAASpB,KAAKuB,YAAYJ,Q,yCAIV,IAAD,OACjB,OAAO,IAAIxC,SAAQ,SAAAoC,GACjB,EAAKxC,OAAS,IAAIyC,OAAOQ,QAAQC,OAAO,CACtCC,KAAM,kBACNC,cAAe,EAAKC,gBAAgBC,KAAK,GACzCC,OAAQ,KAGV,EAAKvD,OAAOwD,GAAG,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QACxCvD,QAAQC,MAAM,uBAAwBsD,MAExC,EAAKzD,OAAOwD,GAAG,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QACxCvD,QAAQC,MAAM,yBAA0BsD,MAE1C,EAAKzD,OAAOwD,GAAG,iBAAiB,YAAkB,IAAfC,EAAc,EAAdA,QACjCvD,QAAQC,MAAM,qCAAsCsD,MAEtD,EAAKzD,OAAOwD,GAAG,kBAAkB,YAAkB,IAAfC,EAAc,EAAdA,QAClCvD,QAAQC,MAAM,6BAA8BsD,MAE9C,EAAKzD,OAAOwD,GAAG,SAAS,YAAwB,IAAVE,EAAS,EAApBC,UAEzB,EAAKpC,SAAWmC,EAChBpC,MAAM,uCAAwC,CAC5CE,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAEiC,WAAY,CAAC,EAAKrC,YACzCM,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAY,EAAKjC,gBAE/Be,MAAK,SAAAmB,GACFA,EAASC,GACXQ,IAEAtC,QAAQC,MAAM,mDAKpB,EAAKH,OAAO6D,UAAUjD,MAAK,SAAAkD,GACpBA,GACH5D,QAAQC,MAAM,+C,sCAWN8B,GACVnC,KAAKC,kBAIPG,QAAQC,MAAM,yCAHd8B,EAASnC,KAAKD,e,6CAsChB,OAAOyB,MAAM,uCAAwC,CACnDE,OAAQ,MACRK,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYhC,KAAKD,gBAE/Be,MAAK,SAAAmB,GAIN,OAHKA,EAASC,IACZ9B,QAAQC,MAAM,4BAEZ4B,EAASN,KAAKsC,QAAUhC,EAASN,KAAKsC,OAAOL,IAC7CxD,QAAQ8D,IAAI,qBACPjC,EAASN,KAAKsC,OAAOL,IAGvB,U,kCAICA,GACV5D,KAAKyB,SAAWmC,K,yCAlDOpD,GACvB,OAAIA,GAASA,EAAM2D,cAAgB3D,EAAM2D,aAAaC,cAC7C5D,EAAM2D,aAAaC,cAGrB,O,sCAGc5D,GACrB,OAAIA,GAASA,EAAM2D,cAAgB3D,EAAM2D,aAAaC,cAC7C5D,EAAM2D,aAAaC,cAAc7C,IAGnC,O,2BAQGf,GACV,SAAIA,GAASA,EAAM2D,cAAgB3D,EAAM2D,aAAaC,gBACH,OAA1C5D,EAAM2D,aAAaC,cAAcC,S,KC/K/BC,MA1Df,WACE,IAEMC,EAAcC,mBAAmBC,4BACjCC,EAAY,+EAHD,mCAGC,kBAFH,8HAEG,yBAAoHH,GAEhII,EAAehC,OAAOiC,aAAaC,QAAQ,sBANpC,EAOyBC,IAAMC,SAASJ,GAPxC,mBAON5E,EAPM,KAOOiF,EAPP,KASb,GAAIrC,OAAOsC,SAASC,KAAM,CACxB,IAAMC,EAAS,GACfxC,OAAOsC,SAASC,KAAKE,MAAM,GAAGC,MAAM,KAAKC,KAAI,SAAAC,GAAK,OAAIA,EAAMF,MAAM,QAAMG,SAAQ,SAAAC,GAASN,EAAOM,EAAI,IAAMA,EAAI,MAC9G,IAAM1F,EAAcoF,EAAOO,aAC3B/C,OAAOiC,aAAae,QAAQ,qBAAsB5F,GAClDiF,EAAejF,GACf4C,OAAOsC,SAASC,KAAO,GA0BzB,OAvBAJ,IAAMc,WAAU,WACV7F,GAWN,WACI,IAAM8F,EAAS,IAAI/F,EAAcC,GACjC8F,EACGC,uBACAhF,MAAK,kBAAM+E,EAAOhF,gBAClBC,MAAK,SAACiF,GACLF,EAAO5E,KAAK,2CAhBhB+E,KAED,CAACjG,IAoBF,yBAAKkG,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,mBACA,yBAAKhD,IAAKiD,IAAMD,UAAU,WAAWE,IAAI,SACzB,MAAfpG,EACC,uBAAGkG,UAAU,WAAWG,KAAK,IAAIC,QAvBzC,SAA0BC,GACxBA,EAAEC,iBACF5D,OAAOiC,aAAa4B,WAAW,sBAC/BxB,EAAe,QAoBT,UACA,uBAAGiB,UAAU,WAAWG,KAAM1B,GAA9B,uBAGJ,6BACE,8CC7CY+B,QACW,cAA7B9D,OAAOsC,SAASyB,UAEe,UAA7B/D,OAAOsC,SAASyB,UAEhB/D,OAAOsC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/D,SAASgE,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdC,OAAM,SAAAhH,GACLD,QAAQC,MAAMA,EAAMsD,c","file":"static/js/main.d3a43d78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f7341243.svg\";","export default class SpotifyClient {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n    this.freshAccessToken = true;\n    this.player = null;\n  }\n\n  /**\n   * Fetches the current Spotify status.\n   * Resolves instantly with default params. (No long polling)\n   * @params - Query params that can add/overwrite default params.\n   * @returns { Promise } - Spotify status\n   */\n  fetchState() {\n    if (!this.player) {\n      console.error('Player not initialized');\n      return Promise.reject('player not initialized');\n    }\n\n    return this.player.getCurrentState();\n  }\n\n  // TODO Mejorar esta funcion\n  /**\n   * Handles a new state by pausing/playing/seeking depending on current status\n   * @param state\n   */\n  handleNewState(state) {\n    if (!state) {\n      return;\n    }\n\n    if (state.paused) {\n      this.pause();\n      // STORE DISPATCH HERE\n    //   store.dispatch(`channel/${channelActionTypes.SET_IS_PLAYING}`, false);\n\n      return;\n    }\n\n    const newUri = SpotifyClient.getUriFromState(state);\n\n    if (newUri == null) {\n      console.error('new uri is null', state);\n      return;\n    }\n\n    if (this.player) {\n      // We're using the web player\n      this.fetchState().then(currentState => {\n        if (currentState == null) {\n          this.play(newUri);\n          return;\n        }\n\n        if (SpotifyClient.isAd(currentState)) {\n          return;\n        }\n\n        const currentUri = SpotifyClient.getUriFromState(currentState);\n\n        if (currentUri === newUri && currentState.paused === false) {\n          if (Math.abs(state.position - currentState.position) > 10000) {\n            this.seek(state.position);\n          }\n          return;\n        }\n\n        this.play(newUri);\n      });\n    } else {\n      // We arent using the web player\n      this.play(newUri);\n    }\n  }\n\n  /**\n   * Pause Spotify client\n   * @returns { Promise } - Spotify Status\n   */\n  pause() {\n    return this.player.pause();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  /**\n   * Play a song given a uri and seek to seconds (optional)\n   * We have to call pause() initially because calling play with the same song errors out\n   * @param uri - Track uri\n   * @param seconds - Seconds where the player should seek to\n   * @returns { Promise } - Spotify Status\n   */\n  play(uri) {\n    return fetch(\n      `https://api.spotify.com/v1/me/player/play?device_id=${this.deviceId}`,\n      {\n        method: 'PUT',\n        body: JSON.stringify({ uris: [uri] }),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      },\n    ).then(response => {\n      if (!response.ok) {\n        console.error('error playing uri');\n      }\n      // DISPATCH HERE\n    //   return store.dispatch(\n    //     `channel/${channelActionTypes.SET_IS_PLAYING}`,\n    //     true,\n    //   );\n    });\n  }\n\n  /**\n   * Sets polling query params and calls fetchStatus\n   * This is a long polling implementation with Spotify's client which\n   * resolves when play/pause/seek or after 60 seconds\n   */\n  onPlayerStateChanged(callback) {\n    this.player.addListener('player_state_changed', state => {\n      let newSong = SpotifyClient.getTrackFromState(state);\n      const newSongUri = SpotifyClient.getUriFromState(state);\n\n      if (newSongUri === this.currentSongUri) {\n        newSong = null;\n      }\n\n      this.currentSongUri = newSongUri;\n\n      callback({\n        newState: state,\n        newSong,\n      });\n    });\n  }\n\n  prepareSpotifyClient() {\n    return new Promise(resolve => {\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        this.initializePlayer().then(resolve);\n      };\n\n      const sdkScript = document.createElement('script');\n      sdkScript.src = 'https://sdk.scdn.co/spotify-player.js';\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  initializePlayer() {\n    return new Promise(resolve => {\n      this.player = new window.Spotify.Player({\n        name: 'eardrum.monster',\n        getOAuthToken: this.fetchOauthToken.bind(this),\n        volume: 0.1,\n      });\n\n      this.player.on('initialization_error', ({ message }) => {\n        console.error('Failed to initialize', message);\n      });\n      this.player.on('authentication_error', ({ message }) => {\n        console.error('Failed to authenticate', message);\n      });\n      this.player.on('account_error', ({ message }) => {\n        console.error('Failed to validate Spotify account', message);\n      });\n      this.player.on('playback_error', ({ message }) => {\n        console.error('Failed to perform playback', message);\n      });\n      this.player.on('ready', ({ device_id: id }) => {\n        // Transfer playback to web player\n        this.deviceId = id;\n        fetch('https://api.spotify.com/v1/me/player', {\n          method: 'PUT',\n          body: JSON.stringify({ device_ids: [this.deviceId] }),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.accessToken}`,\n          },\n        }).then(response => {\n          if (response.ok) {\n            resolve();\n          } else {\n            console.error('unable to transfer playback to web player');\n          }\n        });\n      });\n\n      this.player.connect().then(success => {\n        if (!success) {\n          console.error('Failed to connect to the web player');\n        }\n      });\n    });\n  }\n\n  /**\n   * Fetch and set Spotify's Oauth token needed to authenticate requests\n   * @returns {Promise.<*>}\n   * @private\n   */\n  fetchOauthToken(callback) {\n    if (this.freshAccessToken) {\n      callback(this.accessToken);\n    } else {\n      // TODO: Fetch a new access token from the server\n      console.error('fetchOauthToken called more than once');\n      callback(this.accessToken);\n    }\n  }\n\n  static getTrackFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track;\n    }\n\n    return null;\n  }\n\n  static getUriFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.uri;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns if a given status is an Ad\n   * @param state\n   * @returns { boolean } - true if the track is an ad, false otherwise\n   */\n  static isAd(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.type === 'ad';\n    }\n\n    return false;\n  }\n\n  fetchCurrentDeviceId() {\n    return fetch('https://api.spotify.com/v1/me/player', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    }).then(response => {\n      if (!response.ok) {\n        console.error('error fetching device id');\n      }\n      if (response.body.device && response.body.device.id) {\n          console.log('fetched device ID');\n        return response.body.device.id;\n      }\n\n      return null;\n    });\n  }\n\n  setDeviceId(id) {\n    this.deviceId = id;\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SpotifyClient from './spotify.js';\n\nfunction App() {\n  const clientID = 'd73f9dfa97c44b57ac7cefcc031c4df9';\n  const scopes = 'streaming+user-read-email+user-read-private+user-read-playback-state+user-modify-playback-state+user-read-currently-playing';\n  const redirectURI = encodeURIComponent(process.env.REACT_APP_SPOTIFY_REDIRECT_URI);\n  const authorizeURI = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}`;\n\n  const initialToken = window.localStorage.getItem('spotifyAccessToken');\n  const [accessToken, setAccessToken] = React.useState(initialToken);\n\n  if (window.location.hash) {\n    const params = {};\n    window.location.hash.slice(1).split('&').map(param => param.split('=')).forEach(tup => { params[tup[0]] = tup[1] });\n    const accessToken = params.access_token;\n    window.localStorage.setItem('spotifyAccessToken', accessToken);\n    setAccessToken(accessToken);\n    window.location.hash = '';\n  }\n\n  React.useEffect(() => {\n    if (accessToken) {\n      initSpotifyClient();\n    }\n  }, [accessToken]);\n\n  function clearAccessToken(e) {\n    e.preventDefault();\n    window.localStorage.removeItem('spotifyAccessToken');\n    setAccessToken(null);\n  }\n\n  function initSpotifyClient() {\n      const client = new SpotifyClient(accessToken);\n      client\n        .prepareSpotifyClient()\n        .then(() => client.fetchState())\n        .then((data) => {\n          client.play('spotify:track:727LbE4pV6RtLK5FnH1WIe');\n        });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">EARDRUM MONSTER</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {accessToken != null ?\n          <a className=\"App-link\" href=\"#\" onClick={clearAccessToken} >Logout</a> :\n          <a className=\"App-link\" href={authorizeURI}>Login with Spotify</a>\n        }\n      </header>\n      <div>\n        <h2>now playing</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}