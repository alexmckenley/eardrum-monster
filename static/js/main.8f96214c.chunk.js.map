{"version":3,"sources":["SpotifyAPI.js","graphql/mutations.ts","graphql/queries.ts","Auth.js","Header.js","DevPublisher.js","SpotifyWebPlayer.js","SpotifyContext.js","useSpotifyWebPlayer.js","SongPlayerWithControls.js","useSpotifyAPI.js","Track.js","TrackList.js","EQBars.js","Utils.ts","Listeners.tsx","graphql/subscriptions.ts","Listen.js","useAuth.ts","BroadcastPublisher.tsx","PowerHourControl.js","Broadcast.js","Channel.js","Home.js","graphql/customQueries.ts","RedirectToLoginOrBroadcast.tsx","App.js","serviceWorker.js","aws-exports.js","index.js","logo.png"],"names":["SpotifyAPI","accessToken","onUnauthorized","Error","this","maybeHandle401","bind","response","status","fetch","method","headers","Authorization","then","ok","json","console","error","data","device","id","uri","deviceID","query","body","JSON","stringify","uris","device_ids","play","updateUser","createSongEvent","songEventsByUserId","AuthContext","createContext","AuthRedirect","style","textAlign","getAuthorizeURI","pathname","redirectURI","encodeURIComponent","process","currentPath","AuthProvider","children","useLocalStorage","authInfo","setAuthInfo","location","useLocation","history","useHistory","username","React","useEffect","hash","params","slice","split","map","param","forEach","tup","access_token","fetchUserInfo","user","spotifyIdentifier","display_name","API","graphql","graphqlOperation","userID","getUser","input","type","push","decodeURIComponent","state","catch","handleAuthRedirect","authContext","useMemo","logout","retryAuth","window","href","Provider","value","Header","useContext","authorizeURI","match","useRouteMatch","className","to","src","logo","alt","onClick","e","preventDefault","DevPublisher","hostUsername","timeoutID","setInterval","songEvent","timestamp","Math","floor","Date","now","position","spotifyURI","random","toString","mutations","log","clearInterval","SpotifyWebPlayer","player","spotifyAPI","getCurrentState","pause","ms","seek","nextTrack","callback","addListener","removeListener","transferPlayback","Promise","resolve","Spotify","Player","onSpotifyWebPlaybackSDKReady","sdkScript","document","createElement","appendChild","__accessToken","__onUnauthorized","__spotifyAPI","EMglobalPlayerInstance","EMGlobalPlayerInstance","name","getOAuthToken","cb","volume","on","message","device_id","connect","success","inject","initializePlayer","track_window","current_track","SpotifyContext","SpotifyProvider","useState","webPlayer","setWebPlayer","setSpotifyAPI","api","createInstance","inst","spotifyContext","useSpotifyWebPlayer","SongPlayerWithControls","song","useSpotifyAPI","spotifyWebPlayer","devices","setDevices","activeDeviceID","setActiveDeviceID","activeDeviceIDRef","useRef","isReady","setIsReady","current","eardrumPlayer","getDeviceID","deviceList","find","d","fetchDevices","activeDevice","is_active","onChange","event","target","key","Track","track","albumImg","artistName","TrackList","songs","EQBars","getListenerCount","listeners","items","filter","listener","latestListenPing","length","Listeners","hostID","rerender","setRerender","setTimeout","r","clearTimeout","Connect","listeningTo","sortDirection","limit","subscription","onSubscriptionMsg","prev","onUpdateUser","usersByListeningTo","index","findIndex","loading","onlineUsers","users","getActiveListeners","StartListening","isListening","publishListenPing","ListenPlayer","isCurrentlyLive","isListeningUsername","setIsListeningUsername","NoSleep","noSleep","enable","disable","intervalID","handleJoin","useCallback","Listen","devPublisherEnabled","search","includes","queries","onCreateSongEvent","songEventsByUserID","unshift","pop","online","songEvents","mostRecentSongEvent","durationMs","isOnline","publishBroadcastPing","latestSongEvent","BroadcastPublisher","currentSongEvent","onSongEvent","useAuth","handlePlayerStateChangedRef","currentSongEventRef","newState","newTrack","getTrackFromState","isSameTrack","trackInProgress","trackID","duration_ms","albumName","album","artists","images","url","localSongEvent","__typename","publishTrack","publishSongEvent","changeListener","initFunc","fetchState","addStateChangeListener","fetchCurrentDeviceID","removeStateChangeListener","PowerHourControl","phEnabled","setPhEnabled","phCount","setPhCount","phCallbackRef","handleChange","enabled","htmlFor","checked","Broadcast","songHistory","setSongHistory","copied","setCopied","handleSongEvent","h","concat","trackList","shareURI","disabled","size","text","onCopy","Channel","useParams","User","img","cta","title","subtitle","UserList","numListeners","Home","usersByLatestSongEvent","isUserOnline","sort","a","b","RedirectToLoginOrBroadcast","App","exact","path","Boolean","hostname","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsconfig","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8f96214c.chunk.js","sourcesContent":["export default class SpotifyAPI {\n  constructor(accessToken, onUnauthorized) {\n    if (accessToken == null) {\n      throw new Error(\"Access token was null\");\n    }\n    this.accessToken = accessToken;\n    this.onUnauthorized = onUnauthorized ?? (() => {});\n    this.maybeHandle401 = this.maybeHandle401.bind(this);\n  }\n\n  maybeHandle401(response) {\n    if (response.status === 401) {\n      this.onUnauthorized();\n      throw new Error(\"Unauthorized: \", response);\n    }\n    return response;\n  }\n\n  fetchUserInfo() {\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json();\n      });\n  }\n\n  fetchCurrentDeviceID() {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"error fetching device id\");\n        }\n        if (response.status === 204) {\n          return null;\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data?.device?.id) {\n          return data.device.id;\n        }\n        return null;\n      });\n  }\n\n  play(uri, deviceID) {\n    const query = deviceID != null ? `?device_id=${deviceID}` : \"\";\n    return fetch(`https://api.spotify.com/v1/me/player/play/${query}`, {\n      method: \"PUT\",\n      body: JSON.stringify({ uris: [uri] }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"Error playing uri\", response);\n        }\n      });\n  }\n\n  transferPlayback(deviceID) {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      body: JSON.stringify({ device_ids: [deviceID], play: true }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to transfer playback to device: \" + deviceID);\n        }\n      });\n  }\n\n  fetchDevices() {\n    return fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to fetch devices\");\n        }\n        return response.json();\n      });\n  }\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        nextToken\n      }\n      type\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        nextToken\n      }\n      type\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        nextToken\n      }\n      type\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      type\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      type\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      type\n    }\n  }\n`;\nexport const createTrack = /* GraphQL */ `\n  mutation CreateTrack(\n    $input: CreateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    createTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const updateTrack = /* GraphQL */ `\n  mutation UpdateTrack(\n    $input: UpdateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    updateTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const deleteTrack = /* GraphQL */ `\n  mutation DeleteTrack(\n    $input: DeleteTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    deleteTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        nextToken\n      }\n      type\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      type\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getTrack = /* GraphQL */ `\n  query GetTrack($uri: String!) {\n    getTrack(uri: $uri) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const listTracks = /* GraphQL */ `\n  query ListTracks(\n    $uri: String\n    $filter: ModelTrackFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTracks(\n      uri: $uri\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByLatestSongEvent = /* GraphQL */ `\n  query UsersByLatestSongEvent(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByListeningTo = /* GraphQL */ `\n  query UsersByListeningTo(\n    $listeningTo: String\n    $latestListenPing: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByListeningTo(\n      listeningTo: $listeningTo\n      latestListenPing: $latestListenPing\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByType = /* GraphQL */ `\n  query SongEventsByType(\n    $type: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByType(\n      type: $type\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import React, { createContext } from \"react\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport * as queries from \"./graphql/queries\";\n\nexport const AuthContext = createContext();\n\nexport function AuthRedirect() {\n  return <div style={{ textAlign: \"center\" }}>Logging in...</div>;\n}\n\nexport function getAuthorizeURI(pathname) {\n  const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\n  const scopes = process.env.REACT_APP_SPOTIFY_SCOPES;\n  const redirectURI = encodeURIComponent(\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n  );\n  const currentPath = encodeURIComponent(pathname);\n  return `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}&state=${currentPath}`;\n}\n\nfunction handleAuthRedirect(setAuthInfo, history, location) {\n  if (location.hash) {\n    const params = {};\n    location.hash\n      .slice(1)\n      .split(\"&\")\n      .map((param) => param.split(\"=\"))\n      .forEach((tup) => {\n        params[tup[0]] = tup[1];\n      });\n    const accessToken = params.access_token;\n    if (accessToken == null) {\n      return;\n    }\n    location.hash = \"\";\n    new SpotifyAPI(accessToken).fetchUserInfo().then((user) => {\n      const spotifyIdentifier = user.display_name.split(\" \")[0];\n      // Ensure the user is created upon login\n      API.graphql(\n        graphqlOperation(queries.getUser, {\n          userID: spotifyIdentifier,\n        })\n      )\n        .then((data) => {\n          if (data.data.getUser == null) {\n            return API.graphql(\n              graphqlOperation(mutations.createUser, {\n                input: {\n                  userID: spotifyIdentifier,\n                  type: \"USER\",\n                },\n              })\n            );\n          }\n        })\n        .then(() => {\n          setAuthInfo({ accessToken, username: spotifyIdentifier });\n          history.push(decodeURIComponent(params.state));\n        })\n        .catch(() => {\n          history.push(\"/\");\n          console.error(\"user creation failed\");\n        });\n    });\n  }\n  return null;\n}\n\nexport function AuthProvider({ children }) {\n  const [authInfo, setAuthInfo] = useLocalStorage(\"EMAuthInfo\");\n  const location = useLocation();\n  const history = useHistory();\n  const username = authInfo?.username;\n  const accessToken = authInfo?.accessToken;\n\n  React.useEffect(() => {\n    handleAuthRedirect(setAuthInfo, history, location);\n  }, [setAuthInfo, history, location]);\n\n  const authContext = React.useMemo(() => {\n    return accessToken != null && username != null\n      ? {\n          accessToken: accessToken,\n          username: username,\n          logout: () => setAuthInfo(null),\n          retryAuth: () => {\n            setAuthInfo(null);\n            window.location.href = getAuthorizeURI(window.location.pathname);\n          },\n        }\n      : null;\n  }, [username, accessToken, setAuthInfo]);\n\n  return (\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\n\nfunction Header() {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const authorizeURI = getAuthorizeURI(location.pathname);\n  const match = useRouteMatch(\"/u/\" + authInfo?.username);\n\n  function handleLogout(e) {\n    e.preventDefault();\n    authInfo.logout();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      {authInfo != null ? (\n        <>\n          {match == null ? (\n            <Link className=\"App-link\" to={`/u/${authInfo.username}`}>\n              My Channel\n            </Link>\n          ) : (\n            /* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n            <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          )}\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Login\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\n\nexport default function DevPublisher({ hostUsername }) {\n  React.useEffect(() => {\n    const timeoutID = setInterval(() => {\n      const tracks = [\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\n      ];\n      const songEvent = {\n        userID: hostUsername,\n        timestamp: Math.floor(Date.now() / 1000),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n        type: \"NEW_SONG\",\n      };\n      API.graphql(\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\n      ).then((data) => console.log(\"Publishing: \", data));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeoutID);\n    };\n  }, [hostUsername]);\n\n  return <h1>DevPublisher enabled</h1>;\n}\n","export default class SpotifyWebPlayer {\n  constructor(player, spotifyAPI) {\n    this.player = player;\n    this.spotifyAPI = spotifyAPI;\n  }\n\n  fetchState() {\n    return this.player.getCurrentState();\n  }\n\n  pause() {\n    return this.player.pause();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  addStateChangeListener(callback) {\n    this.player.addListener(\"player_state_changed\", callback);\n  }\n\n  removeStateChangeListener(callback) {\n    this.player.removeListener(\"player_state_changed\", callback);\n  }\n\n  getDeviceID() {\n    return this.player.deviceID;\n  }\n\n  transferPlayback() {\n    return this.spotifyAPI.transferPlayback(this.player.deviceID);\n  }\n\n  static inject() {\n    return new Promise((resolve) => {\n      if (window?.Spotify?.Player) {\n        resolve();\n        return;\n      }\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n      };\n      const sdkScript = document.createElement(\"script\");\n      sdkScript.src = process.env.REACT_APP_SPOTIFY_WEB_PLAYER_SDK;\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  static initializePlayer(spotifyAPI, accessToken, onUnauthorized) {\n    // Update accessToken singleton so existing players can access it;\n    SpotifyWebPlayer.__accessToken = accessToken;\n    SpotifyWebPlayer.__onUnauthorized = onUnauthorized;\n    SpotifyWebPlayer.__spotifyAPI = spotifyAPI;\n\n    return new Promise((resolve) => {\n      if (window.EMglobalPlayerInstance) {\n        resolve(window.EMGlobalPlayerInstance);\n        return;\n      }\n\n      const player = new window.Spotify.Player({\n        name: \"eardrum.monster\",\n        getOAuthToken: (cb) => {\n          cb(SpotifyWebPlayer.__accessToken);\n          SpotifyWebPlayer.__spotifyAPI.fetchUserInfo();\n        },\n        volume: 0.1,\n      });\n\n      player.on(\"initialization_error\", ({ message }) => {\n        console.error(\"Failed to initialize\", message);\n      });\n      player.on(\"authentication_error\", ({ message }) => {\n        console.error(\"Failed to authenticate\", message);\n        SpotifyWebPlayer.__onUnauthorized();\n      });\n      player.on(\"account_error\", ({ message }) => {\n        console.error(\"Spotify premium required\", message);\n      });\n      player.on(\"playback_error\", ({ message }) => {\n        console.error(\"Failed to perform playback\", message);\n      });\n      player.on(\"ready\", ({ device_id: id }) => {\n        player.deviceID = id;\n        window.EMGlobalPlayerInstance = player;\n        resolve(player);\n      });\n\n      player.connect().then((success) => {\n        if (!success) {\n          console.error(\"Failed to connect to the web player\");\n        }\n      });\n    });\n  }\n\n  static createInstance(accessToken, spotifyAPI, onUnauthorized) {\n    return SpotifyWebPlayer.inject()\n      .then(() =>\n        SpotifyWebPlayer.initializePlayer(\n          spotifyAPI,\n          accessToken,\n          onUnauthorized\n        )\n      )\n      .then((player) => new SpotifyWebPlayer(player, spotifyAPI));\n  }\n\n  static getTrackFromState(state) {\n    return state?.track_window?.current_track;\n  }\n}\n","import React, { createContext } from \"react\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nexport const SpotifyContext = createContext();\n\nexport function SpotifyProvider({ children }) {\n  const authInfo = React.useContext(AuthContext);\n  const [webPlayer, setWebPlayer] = React.useState(null);\n  const [spotifyAPI, setSpotifyAPI] = React.useState(null);\n\n  React.useEffect(() => {\n    if (authInfo == null) {\n      setWebPlayer(null);\n      setSpotifyAPI(null);\n    } else {\n      const api = new SpotifyAPI(authInfo.accessToken, authInfo.retryAuth);\n      setSpotifyAPI(api);\n      SpotifyWebPlayer.createInstance(\n        authInfo.accessToken,\n        api,\n        authInfo.retryAuth\n      ).then((inst) => {\n        setWebPlayer(inst);\n      });\n    }\n  }, [authInfo]);\n\n  const spotifyContext = React.useMemo(\n    () => ({\n      webPlayer,\n      spotifyAPI,\n    }),\n    [webPlayer, spotifyAPI]\n  );\n\n  return (\n    <SpotifyContext.Provider value={spotifyContext}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyWebPlayer() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.webPlayer;\n}\n","import React from \"react\";\nimport useSpotifyAPI from \"./useSpotifyAPI.js\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\n\nexport default function SongPlayerWithControls({ song }) {\n  const spotifyAPI = useSpotifyAPI();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [devices, setDevices] = React.useState(null);\n  const [activeDeviceID, setActiveDeviceID] = React.useState(null);\n  const activeDeviceIDRef = React.useRef(null);\n  const [isReady, setIsReady] = React.useState(false);\n  activeDeviceIDRef.current = activeDeviceID;\n\n  const eardrumPlayer = spotifyWebPlayer && {\n    id: spotifyWebPlayer.getDeviceID(),\n    name: \"eardrum.monster\",\n  };\n  const deviceList = devices ?? [];\n  if (\n    eardrumPlayer != null &&\n    !deviceList.find((d) => d.id === eardrumPlayer.id)\n  ) {\n    deviceList.push(eardrumPlayer);\n  }\n\n  // Fetch devices\n  React.useEffect(() => {\n    spotifyAPI &&\n      spotifyAPI.fetchDevices().then((data) => {\n        setDevices(data.devices);\n      });\n  }, [spotifyAPI]);\n\n  // Use web player if there is no active device\n  React.useEffect(() => {\n    if (spotifyAPI && devices) {\n      const activeDevice = devices.find((device) => device.is_active === true);\n      if (activeDevice) {\n        setActiveDeviceID(activeDevice.id);\n        setIsReady(true);\n      } else if (spotifyWebPlayer) {\n        setActiveDeviceID(spotifyWebPlayer.getDeviceID());\n        setIsReady(true);\n      }\n    }\n  }, [spotifyAPI, devices, spotifyWebPlayer]);\n\n  React.useEffect(() => {\n    activeDeviceIDRef.current &&\n      isReady &&\n      spotifyAPI &&\n      spotifyAPI.play(song.spotifyURI, activeDeviceIDRef.current);\n  }, [spotifyAPI, song, isReady]);\n\n  const handleChange = (event) => {\n    const deviceID = event.target.value;\n    spotifyAPI.transferPlayback(deviceID);\n    setActiveDeviceID(deviceID);\n  };\n\n  return (\n    <div className=\"Listen-controls\">\n      <div>Playing on device:</div>\n      <select value={activeDeviceID ?? \"\"} onChange={handleChange}>\n        {deviceList?.map((device) => (\n          <option key={device.id} value={device.id}>\n            {device.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyAPI() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.spotifyAPI;\n}\n","import React from \"react\";\nimport \"./Track.css\";\nimport logo from \"./logo.png\";\n\nfunction Track({ track }) {\n  return (\n    <div className=\"Track\">\n      <img\n        className=\"Track-albumImg\"\n        src={track?.albumImg ?? logo}\n        alt=\"Album art\"\n      />\n      <div className=\"Track-details\">\n        <p className=\"Track-name\">{track?.name ?? \"Unknown\"}</p>\n        <p className=\"Track-artist\">{track?.artistName}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"./Track.js\";\n\nexport default function TrackList({ songs }) {\n  return (\n    <>\n      <h3>Recently played tracks</h3>\n      {songs.map(\n        (song) =>\n          song != null && (\n            <div key={song.id} className=\"Listen-track\">\n              <Track track={song.track} />\n            </div>\n          )\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./EQBars.css\";\n\nexport default function EQBars({ className }) {\n  return (\n    <div className={className}>\n      <div className=\"EQBars-container\">\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n      </div>\n    </div>\n  );\n}\n","import type { User, SongEvent } from \"./Types\";\n\nexport function getActiveListeners(users: User[]): User[] {\n  return users.filter((user) => {\n    if (user == null) {\n      return false;\n    }\n    const isOnline =\n      Math.floor(Date.now() / 1000) - (user?.latestListenPing ?? 0) < 30;\n    return isOnline;\n  }) as User[];\n}\n\nexport function isUserOnline(user: User): boolean {\n  const latestSongEvent = user.latestSongEvent ?? 0;\n  return Math.floor(Date.now() / 1000) - latestSongEvent < 30;\n}\n\nexport function isOnline(songEvents: SongEvent[]): boolean {\n  const mostRecentSongEvent = songEvents && songEvents[0];\n  if (mostRecentSongEvent == null) {\n    return false;\n  }\n  const isOnline =\n    Math.floor(Date.now() / 1000) - mostRecentSongEvent.timestamp <\n    (mostRecentSongEvent.track?.durationMs ?? 0) / 1000 + 60;\n  return isOnline;\n}\n\nexport function getListenerCount(user: User) {\n  return (\n    (user?.listeners?.items ?? []).filter((listener) => {\n      if (listener == null) {\n        return false;\n      }\n      const hasRecentPing =\n        Math.floor(Date.now() / 1000) - (listener?.latestListenPing ?? 0) < 30;\n      return hasRecentPing;\n    }).length + 1\n  );\n}\n","import React from \"react\";\nimport { Connect } from \"aws-amplify-react\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as queries from \"./graphql/queries\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { getActiveListeners } from \"./Utils\";\nimport \"./Listeners.css\";\n\nimport type { OnUpdateUserSubscription, UsersByListeningToQuery } from \"./API\";\nexport default function Listeners({ hostID }: { hostID: string }) {\n  const [rerender, setRerender] = React.useState(false);\n\n  // Re-render every 10s to update listeners\n  React.useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      setRerender((r) => !r);\n    }, 10000);\n    return () => {\n      clearTimeout(timeoutID);\n    };\n  }, [rerender]);\n\n  return (\n    <div className=\"Listeners\">\n      <div className=\"Listeners-title\">Listeners</div>\n      <div className=\"Listeners-list\">\n        <Connect\n          query={graphqlOperation(queries.usersByListeningTo, {\n            listeningTo: hostID,\n            sortDirection: \"DESC\",\n            limit: 50,\n          })}\n          subscription={graphqlOperation(subscriptions.onUpdateUser, {\n            listeningTo: hostID,\n            userID: \"Ccc\",\n          })}\n          // @ts-ignore\n          onSubscriptionMsg={(\n            prev: UsersByListeningToQuery,\n            data: OnUpdateUserSubscription\n          ) => {\n            const { onUpdateUser } = data;\n            const items = prev.usersByListeningTo?.items;\n            if (items == null || onUpdateUser == null) {\n              console.error(\"unexpected null Listeners\", prev);\n              return prev;\n            }\n            const index = items.findIndex(\n              (user) => user && user.userID === onUpdateUser.userID\n            );\n            if (index >= 0) {\n              items[index] = onUpdateUser;\n            } else {\n              items.push(onUpdateUser);\n            }\n            return prev;\n          }}\n        >\n          {({ data, loading, error }: any) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users =\n              (data.usersByListeningTo && data.usersByListeningTo.items) ?? [];\n            const onlineUsers = getActiveListeners(users);\n            return (\n              <>\n                {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                <div>{hostID} ⭐</div>\n                {onlineUsers.map((user) => {\n                  return <div key={user.userID}>{user.userID}</div>;\n                })}\n              </>\n            );\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      type\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser($listeningTo: String) {\n    onUpdateUser(listeningTo: $listeningTo) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          type\n        }\n        nextToken\n      }\n      type\n    }\n  }\n`;\nexport const onCreateTrack = /* GraphQL */ `\n  subscription OnCreateTrack {\n    onCreateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onUpdateTrack = /* GraphQL */ `\n  subscription OnUpdateTrack {\n    onUpdateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onDeleteTrack = /* GraphQL */ `\n  subscription OnDeleteTrack {\n    onDeleteTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Listen.css\";\nimport DevPublisher from \"./DevPublisher.js\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\nimport SongPlayerWithControls from \"./SongPlayerWithControls.js\";\nimport TrackList from \"./TrackList.js\";\nimport Track from \"./Track.js\";\nimport EQBars from \"./EQBars.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport Listeners from \"./Listeners\";\nimport { isOnline } from \"./Utils\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as mutations from \"./graphql/mutations\";\n\nfunction StartListening({ children, isListening, onClick }) {\n  const location = useLocation();\n  const authInfo = React.useContext(AuthContext);\n\n  if (isListening) {\n    return children;\n  }\n\n  return (\n    <div className=\"Listen-startListening\">\n      <div className=\"Listen-startListeningMask\">{children}</div>\n      <div className=\"Listen-startListeningContent\">\n        <EQBars className=\"Listen-EQ\" />\n      </div>\n      <div className=\"Listen-startListeningContent\">\n        <a className=\"Listen-play\" href={location.pathname} onClick={onClick}>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          👂\n          <span className=\"Listen-playLink\">\n            {authInfo == null ? \"Login to join ▶\" : \"Join ▶\"}\n          </span>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          😈\n        </a>\n      </div>\n    </div>\n  );\n}\n\nfunction publishListenPing(userID, hostUsername) {\n  return API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID,\n        latestListenPing: Math.floor(Date.now() / 1000),\n        listeningTo: hostUsername,\n      },\n    })\n  );\n}\n\nfunction ListenPlayer({ isCurrentlyLive, songs, hostUsername }) {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const [isListeningUsername, setIsListeningUsername] = useLocalStorage(\n    \"EMisListeningUsername\"\n  );\n  const isListening = authInfo && hostUsername === isListeningUsername;\n  const NoSleep = window.NoSleep;\n\n  React.useEffect(() => {\n    if (isListening && NoSleep != null) {\n      const noSleep = new NoSleep();\n      noSleep.enable();\n      return () => noSleep.disable();\n    }\n  }, [isListening, NoSleep]);\n\n  React.useEffect(() => {\n    if (isListening && authInfo) {\n      publishListenPing(authInfo.username, hostUsername);\n      const intervalID = setInterval(() => {\n        publishListenPing(authInfo.username, hostUsername);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [isListening, authInfo, hostUsername]);\n\n  const handleJoin = React.useCallback(\n    (e) => {\n      e.preventDefault();\n      setIsListeningUsername(hostUsername);\n      if (authInfo == null) {\n        window.location.href = getAuthorizeURI(location.pathname);\n      }\n    },\n    [setIsListeningUsername, authInfo, location, hostUsername]\n  );\n\n  if (!isCurrentlyLive) {\n    return <h1>offline</h1>;\n  }\n\n  return (\n    <StartListening isListening={isListening} onClick={handleJoin}>\n      {isListening && <p>Listening to {hostUsername}'s channel!</p>}\n      {isListening && <SongPlayerWithControls song={songs[0]} />}\n      <div>Now Playing:</div>\n      <Track track={songs[0].track} />\n    </StartListening>\n  );\n}\n\nfunction Listen({ hostUsername }) {\n  const location = useLocation();\n  const devPublisherEnabled = location.search.includes(\"DEV=1\");\n\n  return (\n    <div className=\"Listen\">\n      <Connect\n        query={graphqlOperation(queries.songEventsByUserId, {\n          userID: hostUsername,\n          sortDirection: \"DESC\",\n          limit: 50,\n        })}\n        subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\n          userID: hostUsername,\n        })}\n        onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n          if (prev?.songEventsByUserID?.items == null) {\n            console.error(\"bad state in listen\", prev);\n            return prev;\n          }\n          prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n          if (prev.songEventsByUserID.items.length > 50) {\n            prev.songEventsByUserID.items.pop();\n          }\n          return prev;\n        }}\n      >\n        {({ data, loading, error }) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const songs =\n            (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n          if (songs.length === 0) {\n            return <div>No track history for {hostUsername}</div>;\n          }\n          const online = isOnline(songs);\n\n          return (\n            <>\n              {online && (\n                <div className=\"Listen-listeners\">\n                  <Listeners hostID={hostUsername} />\n                </div>\n              )}\n              <div className=\"Listen-trackList\">\n                <div className=\"Listen-header\">\n                  {hostUsername}'s Channel\n                  {devPublisherEnabled && (\n                    <DevPublisher hostUsername={hostUsername} />\n                  )}\n                </div>\n                <>\n                  <ListenPlayer\n                    isCurrentlyLive={online}\n                    songs={songs}\n                    hostUsername={hostUsername}\n                  />\n                  <TrackList songs={online ? songs.slice(1) : songs} />\n                </>\n              </div>\n            </>\n          );\n        }}\n      </Connect>\n    </div>\n  );\n}\n\nexport default Listen;\n","import React from \"react\";\nimport { AuthContext } from \"./Auth\";\n\nexport type AuthInfo = { username: string; accessToken: string } | null;\n\nexport default function useSpotifyAPI(): AuthInfo {\n  const authContext = React.useContext(AuthContext);\n  return authContext as AuthInfo;\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport * as mutations from \"./graphql/mutations\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer\";\nimport useAuth from \"./useAuth\";\n\nimport type { CreateSongEventInput, CreateTrackInput } from \"./API\";\nimport type { SongEvent } from \"./Types\";\nimport type { SpotifyWebPlayerState } from \"./SpotifyWebPlayerTypes\";\n\nexport type BroadcastPublisherProps = {\n  currentSongEvent: SongEvent;\n  onSongEvent: (songEvent: SongEvent) => void;\n};\n\nfunction publishSongEvent(username: string, songEvent: CreateSongEventInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createSongEvent, {\n      input: songEvent,\n    })\n  );\n}\n\nfunction publishBroadcastPing(username: string) {\n  API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID: username,\n        latestSongEvent: Math.floor(Date.now() / 1000),\n      },\n    })\n  );\n}\n\nfunction publishTrack(track: CreateTrackInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createTrack, { input: track })\n  ) as Promise<GraphQLResult>;\n}\n\nexport default function BroadcastPublisher({\n  currentSongEvent,\n  onSongEvent,\n}: BroadcastPublisherProps) {\n  const authInfo = useAuth();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const handlePlayerStateChangedRef = React.useRef<(newState: any) => void>(\n    () => {}\n  );\n  const currentSongEventRef = React.useRef<SongEvent>(currentSongEvent);\n\n  React.useEffect(() => {\n    if (authInfo) {\n      publishBroadcastPing(authInfo.username);\n      const intervalID = setInterval(() => {\n        publishBroadcastPing(authInfo.username);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [authInfo]);\n\n  const handlePlayerStateChanged = (newState: SpotifyWebPlayerState) => {\n    const newTrack = SpotifyWebPlayer.getTrackFromState(newState);\n    // If there is not a valid track, dont publish\n    if (newTrack == null || authInfo == null) {\n      return;\n    }\n    const isSameTrack =\n      newTrack.uri === currentSongEventRef.current?.spotifyURI;\n    const trackInProgress =\n      currentSongEventRef.current != null &&\n      currentSongEventRef.current.track != null &&\n      currentSongEventRef.current.track.durationMs != null &&\n      Math.floor(Date.now() / 1000) - currentSongEventRef.current.timestamp <\n        currentSongEventRef.current.track.durationMs / 1000 + 60;\n    // Avoid updating if track is the same\n    if (isSameTrack && trackInProgress) {\n      return;\n    }\n    const track = {\n      uri: newTrack.uri,\n      trackID: newTrack.id,\n      name: newTrack.name,\n      durationMs: newTrack.duration_ms,\n      albumName: newTrack.album.name,\n      artistName: newTrack.artists[0].name,\n      albumImg: newTrack.album.images[0].url,\n    };\n    const songEvent = {\n      userID: authInfo.username,\n      timestamp: Math.floor(Date.now() / 1000),\n      position: Math.floor(newState.position ?? 0),\n      spotifyURI: newTrack.uri,\n      type: \"NEW_SONG\",\n    };\n    const localSongEvent = {\n      ...songEvent,\n      __typename: \"SongEvent\" as \"SongEvent\",\n      track: {\n        __typename: \"Track\" as \"Track\",\n        ...track,\n      },\n      id: Math.random().toString(),\n      user: null,\n    };\n    currentSongEventRef.current = localSongEvent;\n    onSongEvent(localSongEvent);\n    publishTrack(track).then(() => {\n      publishSongEvent(authInfo.username, songEvent);\n    });\n  };\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\n\n  React.useEffect(() => {\n    if (spotifyWebPlayer) {\n      const changeListener = (newState: any) =>\n        handlePlayerStateChangedRef.current(newState);\n      const initFunc = {\n        current: (id: any) => {\n          if (id === spotifyWebPlayer.getDeviceID()) {\n            // Request current state\n            spotifyWebPlayer.fetchState().then((newState: any) => {\n              handlePlayerStateChangedRef.current(newState);\n            });\n          } else {\n            // Transfer playback to the web player\n            spotifyWebPlayer.transferPlayback();\n          }\n        },\n      };\n      // Subscribe to future changes\n      spotifyWebPlayer.addStateChangeListener(changeListener);\n\n      // get current state or transfer playback\n      spotifyWebPlayer.spotifyAPI.fetchCurrentDeviceID().then((id: any) => {\n        initFunc.current(id);\n      });\n\n      // Remove the listener on unMount\n      return () => {\n        spotifyWebPlayer.removeStateChangeListener(changeListener);\n        initFunc.current = () => {};\n      };\n    }\n  }, [spotifyWebPlayer, handlePlayerStateChangedRef]);\n\n  return null;\n}\n","import React from \"react\";\nimport Switch from \"react-switch\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\n\nexport default function PowerHourControl() {\n  const [phEnabled, setPhEnabled] = useLocalStorage(\"EMPhEnabled\", false);\n  const [phCount, setPhCount] = useLocalStorage(\"EMPhCount\", 1);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const phCallbackRef = React.useRef();\n\n  const phCallback = (timeoutID) => {\n    if (phEnabled) {\n      spotifyWebPlayer.nextTrack();\n      setPhCount(phCount + 1);\n    } else {\n      clearInterval(timeoutID);\n    }\n  };\n  phCallbackRef.current = phCallback;\n\n  const handleChange = React.useCallback(\n    (enabled) => {\n      setPhEnabled(enabled);\n      if (enabled) {\n        setPhCount(1);\n        spotifyWebPlayer && spotifyWebPlayer.nextTrack();\n      }\n    },\n    [setPhEnabled, setPhCount, spotifyWebPlayer]\n  );\n\n  React.useEffect(() => {\n    if (phEnabled && spotifyWebPlayer) {\n      const timeoutID = setInterval(() => {\n        phCallbackRef.current(timeoutID);\n      }, 60000);\n      return () => {\n        clearInterval(timeoutID);\n      };\n    }\n  }, [phEnabled, spotifyWebPlayer, phCallbackRef]);\n\n  return (\n    <>\n      <div className=\"Broadcast-controls\">\n        <label htmlFor=\"phToggle\">Power hour mode</label>\n        <Switch\n          className=\"Broadcast-switch\"\n          id=\"phToggle\"\n          onChange={handleChange}\n          checked={phEnabled}\n        />\n      </div>\n      {phEnabled && <h1>{phCount}</h1>}\n    </>\n  );\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"./graphql/queries\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport Track from \"./Track.js\";\nimport TrackList from \"./TrackList.js\";\nimport \"./Broadcast.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport BroadcastPublisher from \"./BroadcastPublisher\";\nimport PowerHourControl from \"./PowerHourControl.js\";\nimport EQBars from \"./EQBars.js\";\nimport Listeners from \"./Listeners\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nfunction Broadcast() {\n  const authInfo = React.useContext(AuthContext);\n  const [songHistory, setSongHistory] = React.useState(null);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [copied, setCopied] = React.useState(false);\n\n  const handleSongEvent = React.useCallback(\n    (songEvent) => {\n      setSongHistory((h) => [songEvent].concat(h));\n    },\n    [setSongHistory]\n  );\n\n  React.useEffect(() => {\n    if (authInfo) {\n      API.graphql(\n        graphqlOperation(queries.songEventsByUserId, {\n          userID: authInfo.username,\n          sortDirection: \"DESC\",\n          limit: 10,\n        })\n      ).then((response) => {\n        setSongHistory(response.data?.songEventsByUserID?.items ?? []);\n      });\n    }\n  }, [authInfo]);\n\n  React.useEffect(() => {\n    if (copied) {\n      const timeoutID = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n      return () => clearTimeout(timeoutID);\n    }\n  }, [copied]);\n\n  if (authInfo == null) {\n    return <div>Login to spotify to set the eardrum monster free</div>;\n  }\n\n  const trackList =\n    songHistory == null ? null : (\n      <div className=\"Broadcast-history\">\n        <TrackList songs={songHistory.slice(1)} />\n      </div>\n    );\n\n  const shareURI = `https://eardrum.monster/u/${authInfo.username}`;\n\n  const player =\n    spotifyWebPlayer == null || songHistory == null ? (\n      <div>Initializing Spotify web player...</div>\n    ) : (\n      <>\n        <div className=\"Broadcast-title\">{authInfo.username}'s channel</div>\n        <div className=\"Broadcast-share\">\n          Share this URL to add listeners:\n          <input value={shareURI} disabled size={shareURI.length} />\n          <button>\n            <CopyToClipboard\n              text={`https://eardrum.monster/u/${authInfo.username}`}\n              onCopy={() => {\n                setCopied(true);\n              }}\n            >\n              <span>{copied ? \"Copied!\" : \"Copy\"}</span>\n            </CopyToClipboard>\n          </button>\n        </div>\n        <PowerHourControl />\n        <EQBars className=\"Broadcast-streaming\" />\n        <p>Now playing:</p>\n        <div className=\"Broadcast-currentTrack\">\n          <BroadcastPublisher\n            currentSongEvent={songHistory[0]}\n            onSongEvent={handleSongEvent}\n          />\n          <Track track={songHistory[0]?.track} />\n        </div>\n      </>\n    );\n\n  return (\n    <div className=\"Broadcast\">\n      <div className=\"Broadcast-listeners\">\n        <Listeners hostID={authInfo.username} />\n      </div>\n      <div className=\"Broadcast-player\">\n        {player}\n        {trackList}\n      </div>\n    </div>\n  );\n}\n\nexport default Broadcast;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Listen from \"./Listen.js\";\nimport Broadcast from \"./Broadcast.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nfunction Channel() {\n  const authInfo = React.useContext(AuthContext);\n  const { id } = useParams();\n\n  if (authInfo?.username === id) {\n    return <Broadcast />;\n  }\n\n  return <Listen hostUsername={id} />;\n}\n\nexport default Channel;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Home.css\";\n// import { AuthContext } from \"./Auth.js\";\nimport * as queries from \"./graphql/customQueries\";\n// import EQBars from \"./EQBars.js\";\n// import useAuth from \"./useAuth\";\nimport logo from \"./logo.png\";\nimport { isUserOnline, getListenerCount } from \"./Utils\";\n\nfunction User({ img, cta, title, subtitle }) {\n  return (\n    <div className=\"Home-user\">\n      <div className=\"Home-userTitle\">{title}</div>\n      <div className=\"Home-userSubtitle\">{subtitle}</div>\n      <img className=\"Home-userImg\" src={img ?? logo} alt=\"Album art\" />\n      {cta}\n    </div>\n  );\n}\n\nconst UserList = ({ users }) => (\n  <div className=\"Home-userList\">\n    {users.map((user) => {\n      const img = user.songEvents?.items[0]?.track?.albumImg;\n      const numListeners = getListenerCount(user);\n      return (\n        <User\n          key={user.userID}\n          img={img}\n          title={user.userID}\n          subtitle={`${numListeners} ${\n            numListeners === 1 ? \"listener\" : \"listeners\"\n          }`}\n          cta={\n            <Link\n              key={user.userID}\n              className=\"Home-link\"\n              to={`/u/${user.userID}`}\n            >\n              {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n              Join ▶️\n            </Link>\n          }\n        />\n      );\n    })}\n    <User\n      img={null}\n      title=\"Start a channel\"\n      cta={\n        <Link className=\"Home-link\" to={`/broadcast`}>\n          My channel\n        </Link>\n      }\n    />\n  </div>\n);\n\nfunction Home() {\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <div className=\"Home\">\n      <div>\n        <em>\n          eardrum.monster allows you to sync your spotify client with friends\n        </em>\n      </div>\n      <div className=\"Home-list\">\n        <h2 className=\"Home-title\">\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          😈 Users currently streaming 😈\n        </h2>\n        <Connect\n          query={graphqlOperation(queries.usersByLatestSongEventCustom, {\n            type: \"USER\",\n            sortDirection: \"DESC\",\n            limit: 50,\n          })}\n        >\n          {({ data, loading, error }) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users =\n              (data.usersByLatestSongEvent &&\n                data.usersByLatestSongEvent.items) ??\n              [];\n            const onlineUsers = users\n              .filter((user) => isUserOnline(user))\n              .sort((a, b) =>\n                getListenerCount(a) > getListenerCount(b) ? -1 : 1\n              );\n            return <UserList users={onlineUsers} />;\n          }}\n        </Connect>\n      </div>\n      <div className=\"Home-content\">\n        <h1>How do I use it?</h1>\n        <div>1. Join a channel or create your own ☝️</div>\n        <div>2. Share the URL with your friends️</div>\n        <h1>Its great for:</h1>\n        <div>\n          ✅ Streamers who want to let their viewers sync up their music with\n          high quality spotify audio\n        </div>\n        <div>✅ Online gamers who want listen together while gaming</div>\n        <div>\n          ✅ People who are quarantined and want to have virtual power hours\n          together\n        </div>\n\n        <h1>Did you say power hour?</h1>\n        <div>\n          ✅ Yes! eardrum.monster now features <em>Power hour mode™️</em> that\n          will automatically change the song every 60s. Everybody must drink\n          when the song changes.\n        </div>\n\n        <h1>Can I play century club?</h1>\n        <div>\n          ✅ We've got you covered! <em>Power hour mode™️</em> will keep em'\n          coming well beyond the traditional 60 minutes so you can attempt to\n          join the century club as many times as you want!\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","export const usersByLatestSongEventCustom = /* GraphQL */ `\n  query UsersByLatestSongEvent(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents(sortDirection: DESC) {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n            track {\n              durationMs\n              name\n              albumName\n              albumImg\n            }\n          }\n          nextToken\n        }\n        listeners(sortDirection: DESC) {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { getAuthorizeURI } from \"./Auth\";\n\nexport default function RedirectToLoginOrBroadcast() {\n  const location = useLocation();\n  const authInfo = useAuth();\n  if (authInfo) {\n    return <Redirect to={`/u/${authInfo.username}`} />;\n  }\n  window.location.href = getAuthorizeURI(location.pathname);\n  return null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport Channel from \"./Channel.js\";\nimport Home from \"./Home.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AuthProvider, AuthRedirect } from \"./Auth.js\";\nimport { SpotifyProvider } from \"./SpotifyContext.js\";\nimport RedirectToLoginOrBroadcast from \"./RedirectToLoginOrBroadcast\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AuthProvider>\n          <SpotifyProvider>\n            <Header />\n            <div className=\"App-content\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/auth/\">\n                  <AuthRedirect />\n                </Route>\n                <Route path=\"/u/:id\">\n                  <Channel />\n                </Route>\n                <Route path=\"/broadcast\">\n                  <RedirectToLoginOrBroadcast />\n                </Route>\n              </Switch>\n            </div>\n          </SpotifyProvider>\n        </AuthProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n  aws_project_region: \"us-east-1\",\n  aws_appsync_graphqlEndpoint:\n    \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n  aws_appsync_region: \"us-east-1\",\n  aws_appsync_authenticationType: \"API_KEY\",\n  aws_appsync_apiKey: \"da2-jxgfvq7zzvacfozrt7vucdiipq\",\n};\n\nexport default awsmobile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport awsconfig from \"./aws-exports\";\nimport Amplify from \"aws-amplify\";\n\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";"],"sourceRoot":""}