{"version":3,"sources":["SpotifyAPI.js","graphql/mutations.js","Auth.js","Header.js","DevPublisher.js","SpotifyWebPlayer.js","SpotifyContext.js","useSpotifyWebPlayer.js","SongPlayerWithControls.js","useSpotifyAPI.js","Track.js","TrackList.js","EQBars.js","graphql/queries.js","Listen.js","graphql/subscriptions.js","BroadcastPublisher.js","PowerHourControl.js","Broadcast.js","Channel.js","Home.js","App.js","serviceWorker.js","aws-exports.js","index.js","logo.png"],"names":["SpotifyAPI","accessToken","onUnauthorized","Error","this","maybeHandle401","bind","response","status","fetch","method","headers","Authorization","then","ok","json","console","error","data","device","id","uri","deviceID","query","body","JSON","stringify","uris","device_ids","play","createSongEvent","AuthContext","createContext","AuthRedirect","getAuthorizeURI","pathname","redirectURI","encodeURIComponent","process","currentPath","AuthProvider","children","useLocalStorage","authInfo","setAuthInfo","location","useLocation","history","useHistory","username","React","useEffect","hash","params","slice","split","map","param","forEach","tup","access_token","fetchUserInfo","user","spotifyIdentifier","display_name","push","decodeURIComponent","state","API","graphql","graphqlOperation","input","userID","catch","handleAuthRedirect","authContext","useMemo","logout","retryAuth","window","href","Provider","value","Header","useContext","authorizeURI","match","useRouteMatch","className","to","src","logo","alt","onClick","e","preventDefault","DevPublisher","hostUsername","timeoutID","setInterval","songEvent","timestamp","Math","floor","Date","now","position","spotifyURI","random","toString","mutations","log","clearInterval","SpotifyWebPlayer","player","spotifyAPI","getCurrentState","pause","ms","seek","nextTrack","callback","addListener","removeListener","transferPlayback","Promise","resolve","Spotify","Player","onSpotifyWebPlaybackSDKReady","sdkScript","document","createElement","appendChild","__accessToken","__onUnauthorized","__spotifyAPI","EMglobalPlayerInstance","EMGlobalPlayerInstance","name","getOAuthToken","cb","volume","on","message","device_id","connect","success","inject","initializePlayer","track_window","current_track","type","SpotifyContext","SpotifyProvider","useState","webPlayer","setWebPlayer","setSpotifyAPI","api","createInstance","inst","spotifyContext","useSpotifyWebPlayer","SongPlayerWithControls","song","useSpotifyAPI","spotifyWebPlayer","devices","setDevices","activeDeviceID","setActiveDeviceID","activeDeviceIDRef","useRef","isReady","setIsReady","current","eardrumPlayer","getDeviceID","deviceList","find","d","fetchDevices","activeDevice","is_active","onChange","event","target","key","Track","track","albumImg","artistName","TrackList","songs","EQBars","songEventsByUserId","StartListening","isListening","ListenPlayer","isCurrentlyLive","isListeningUsername","setIsListeningUsername","noSleep","NoSleep","enable","disable","handleJoin","useCallback","Listen","devPublisherEnabled","search","includes","Connect","queries","sortDirection","limit","subscription","onSubscriptionMsg","prev","onCreateSongEvent","songEventsByUserID","items","unshift","length","pop","loading","isRecent","BroadcastPublisher","currentTrack","onSongEvent","handlePlayerStateChangedRef","currentTrackRef","newState","newTrack","getTrackFromState","trackData","trackID","durationMs","duration_ms","albumName","album","artists","images","url","publishSongEvent","changeListener","initFunc","fetchState","addStateChangeListener","fetchCurrentDeviceID","removeStateChangeListener","PowerHourControl","phEnabled","setPhEnabled","phCount","setPhCount","phCallbackRef","handleChange","enabled","htmlFor","checked","Broadcast","songHistory","setSongHistory","setCurrentTrack","handleSongEvent","h","concat","trackList","Channel","useParams","UserList","users","Home","onUserUpdate","listUsers","App","exact","path","Boolean","hostname","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsconfig","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5d779d07.chunk.js","sourcesContent":["export default class SpotifyAPI {\n  constructor(accessToken, onUnauthorized) {\n    if (accessToken == null) {\n      throw new Error(\"Access token was null\");\n    }\n    this.accessToken = accessToken;\n    this.onUnauthorized = onUnauthorized ?? (() => {});\n    this.maybeHandle401 = this.maybeHandle401.bind(this);\n  }\n\n  maybeHandle401(response) {\n    if (response.status === 401) {\n      this.onUnauthorized();\n      throw new Error(\"Unauthorized: \", response);\n    }\n    return response;\n  }\n\n  fetchUserInfo() {\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json();\n      });\n  }\n\n  fetchCurrentDeviceID() {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"error fetching device id\");\n        }\n        if (response.status === 204) {\n          return null;\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data?.device?.id) {\n          return data.device.id;\n        }\n        return null;\n      });\n  }\n\n  play(uri, deviceID) {\n    const query = deviceID != null ? `?device_id=${deviceID}` : \"\";\n    return fetch(`https://api.spotify.com/v1/me/player/play/${query}`, {\n      method: \"PUT\",\n      body: JSON.stringify({ uris: [uri] }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"Error playing uri\", response);\n        }\n      });\n  }\n\n  transferPlayback(deviceID) {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      body: JSON.stringify({ device_ids: [deviceID], play: true }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to transfer playback to device: \" + deviceID);\n        }\n      });\n  }\n\n  fetchDevices() {\n    return fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to fetch devices\");\n        }\n        return response.json();\n      });\n  }\n}\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const createTrack = /* GraphQL */ `\n  mutation CreateTrack(\n    $input: CreateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    createTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const updateTrack = /* GraphQL */ `\n  mutation UpdateTrack(\n    $input: UpdateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    updateTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const deleteTrack = /* GraphQL */ `\n  mutation DeleteTrack(\n    $input: DeleteTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    deleteTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","import React, { createContext } from \"react\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\n\nexport const AuthContext = createContext();\n\nexport function AuthRedirect() {\n  return null;\n}\n\nexport function getAuthorizeURI(pathname) {\n  const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\n  const scopes = process.env.REACT_APP_SPOTIFY_SCOPES;\n  const redirectURI = encodeURIComponent(\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n  );\n  const currentPath = encodeURIComponent(pathname);\n  return `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}&state=${currentPath}`;\n}\n\nfunction handleAuthRedirect(setAuthInfo, history, location) {\n  if (location.hash) {\n    const params = {};\n    location.hash\n      .slice(1)\n      .split(\"&\")\n      .map((param) => param.split(\"=\"))\n      .forEach((tup) => {\n        params[tup[0]] = tup[1];\n      });\n    const accessToken = params.access_token;\n    if (accessToken == null) {\n      return;\n    }\n    location.hash = \"\";\n    new SpotifyAPI(accessToken).fetchUserInfo().then((user) => {\n      const spotifyIdentifier = user.display_name.split(\" \")[0];\n      setAuthInfo({ accessToken, username: spotifyIdentifier });\n      history.push(decodeURIComponent(params.state));\n      // Ensure the user is created upon login\n      API.graphql(\n        graphqlOperation(mutations.createUser, {\n          input: {\n            userID: spotifyIdentifier,\n          },\n        })\n      ).catch(() => console.error(\"user creation failed\"));\n    });\n  }\n  return null;\n}\n\nexport function AuthProvider({ children }) {\n  const [authInfo, setAuthInfo] = useLocalStorage(\"EMAuthInfo\");\n  const location = useLocation();\n  const history = useHistory();\n  const username = authInfo?.username;\n  const accessToken = authInfo?.accessToken;\n\n  React.useEffect(() => {\n    handleAuthRedirect(setAuthInfo, history, location);\n  }, [setAuthInfo, history, location]);\n\n  const authContext = React.useMemo(() => {\n    return accessToken != null && username != null\n      ? {\n          accessToken: accessToken,\n          username: username,\n          logout: () => setAuthInfo(null),\n          retryAuth: () => {\n            setAuthInfo(null);\n            window.location.href = getAuthorizeURI(window.location.pathname);\n          },\n        }\n      : null;\n  }, [username, accessToken, setAuthInfo]);\n\n  return (\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\n\nfunction Header() {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const authorizeURI = getAuthorizeURI(location.pathname);\n  const match = useRouteMatch(\"/u/\" + authInfo?.username);\n\n  function handleLogout(e) {\n    e.preventDefault();\n    authInfo.logout();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      {authInfo != null ? (\n        <>\n          {match == null ? (\n            <Link className=\"App-link\" to={`/u/${authInfo.username}`}>\n              Broadcast\n            </Link>\n          ) : (\n            /* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n            <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          )}\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Login\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\n\nexport default function DevPublisher({ hostUsername }) {\n  React.useEffect(() => {\n    const timeoutID = setInterval(() => {\n      const tracks = [\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\n      ];\n      const songEvent = {\n        userID: hostUsername,\n        timestamp: Math.floor(Date.now() / 1000),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n      };\n      API.graphql(\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\n      ).then((data) => console.log(\"Publishing: \", data));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeoutID);\n    };\n  }, [hostUsername]);\n\n  return <h1>DevPublisher enabled</h1>;\n}\n","export default class SpotifyWebPlayer {\n  constructor(player, spotifyAPI) {\n    this.player = player;\n    this.spotifyAPI = spotifyAPI;\n  }\n\n  fetchState() {\n    return this.player.getCurrentState();\n  }\n\n  pause() {\n    return this.player.pause();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  addStateChangeListener(callback) {\n    this.player.addListener(\"player_state_changed\", callback);\n  }\n\n  removeStateChangeListener(callback) {\n    this.player.removeListener(\"player_state_changed\", callback);\n  }\n\n  getDeviceID() {\n    return this.player.deviceID;\n  }\n\n  transferPlayback() {\n    return this.spotifyAPI.transferPlayback(this.player.deviceID);\n  }\n\n  static inject() {\n    return new Promise((resolve) => {\n      if (window?.Spotify?.Player) {\n        resolve();\n        return;\n      }\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n      };\n      const sdkScript = document.createElement(\"script\");\n      sdkScript.src = process.env.REACT_APP_SPOTIFY_WEB_PLAYER_SDK;\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  static initializePlayer(spotifyAPI, accessToken, onUnauthorized) {\n    // Update accessToken singleton so existing players can access it;\n    SpotifyWebPlayer.__accessToken = accessToken;\n    SpotifyWebPlayer.__onUnauthorized = onUnauthorized;\n    SpotifyWebPlayer.__spotifyAPI = spotifyAPI;\n\n    return new Promise((resolve) => {\n      if (window.EMglobalPlayerInstance) {\n        resolve(window.EMGlobalPlayerInstance);\n        return;\n      }\n\n      const player = new window.Spotify.Player({\n        name: \"eardrum.monster\",\n        getOAuthToken: (cb) => {\n          cb(SpotifyWebPlayer.__accessToken);\n          SpotifyWebPlayer.__spotifyAPI.fetchUserInfo();\n        },\n        volume: 0.1,\n      });\n\n      player.on(\"initialization_error\", ({ message }) => {\n        console.error(\"Failed to initialize\", message);\n      });\n      player.on(\"authentication_error\", ({ message }) => {\n        console.error(\"Failed to authenticate\", message);\n        SpotifyWebPlayer.__onUnauthorized();\n      });\n      player.on(\"account_error\", ({ message }) => {\n        console.error(\"Spotify premium required\", message);\n      });\n      player.on(\"playback_error\", ({ message }) => {\n        console.error(\"Failed to perform playback\", message);\n      });\n      player.on(\"ready\", ({ device_id: id }) => {\n        player.deviceID = id;\n        window.EMGlobalPlayerInstance = player;\n        resolve(player);\n      });\n\n      player.connect().then((success) => {\n        if (!success) {\n          console.error(\"Failed to connect to the web player\");\n        }\n      });\n    });\n  }\n\n  static createInstance(accessToken, spotifyAPI, onUnauthorized) {\n    return SpotifyWebPlayer.inject()\n      .then(() =>\n        SpotifyWebPlayer.initializePlayer(\n          spotifyAPI,\n          accessToken,\n          onUnauthorized\n        )\n      )\n      .then((player) => new SpotifyWebPlayer(player, spotifyAPI));\n  }\n\n  static getTrackFromState(state) {\n    return state?.track_window?.current_track;\n  }\n\n  static isAd(state) {\n    return state?.track_window?.current_track?.type === \"ad\";\n  }\n}\n","import React, { createContext } from \"react\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nexport const SpotifyContext = createContext();\n\nexport function SpotifyProvider({ children }) {\n  const authInfo = React.useContext(AuthContext);\n  const [webPlayer, setWebPlayer] = React.useState(null);\n  const [spotifyAPI, setSpotifyAPI] = React.useState(null);\n\n  React.useEffect(() => {\n    if (authInfo == null) {\n      setWebPlayer(null);\n      setSpotifyAPI(null);\n    } else {\n      const api = new SpotifyAPI(authInfo.accessToken, authInfo.retryAuth);\n      setSpotifyAPI(api);\n      SpotifyWebPlayer.createInstance(\n        authInfo.accessToken,\n        api,\n        authInfo.retryAuth\n      ).then((inst) => {\n        setWebPlayer(inst);\n      });\n    }\n  }, [authInfo]);\n\n  const spotifyContext = React.useMemo(\n    () => ({\n      webPlayer,\n      spotifyAPI,\n    }),\n    [webPlayer, spotifyAPI]\n  );\n\n  return (\n    <SpotifyContext.Provider value={spotifyContext}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyWebPlayer() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.webPlayer;\n}\n","import React from \"react\";\nimport useSpotifyAPI from \"./useSpotifyAPI.js\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\n\nexport default function SongPlayerWithControls({ song }) {\n  const spotifyAPI = useSpotifyAPI();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [devices, setDevices] = React.useState(null);\n  const [activeDeviceID, setActiveDeviceID] = React.useState(null);\n  const activeDeviceIDRef = React.useRef(null);\n  const [isReady, setIsReady] = React.useState(false);\n  activeDeviceIDRef.current = activeDeviceID;\n\n  const eardrumPlayer = spotifyWebPlayer && {\n    id: spotifyWebPlayer.getDeviceID(),\n    name: \"eardrum.monster\",\n  };\n  const deviceList = devices ?? [];\n  if (\n    eardrumPlayer != null &&\n    !deviceList.find((d) => d.id === eardrumPlayer.id)\n  ) {\n    deviceList.push(eardrumPlayer);\n  }\n\n  // Fetch devices\n  React.useEffect(() => {\n    spotifyAPI &&\n      spotifyAPI.fetchDevices().then((data) => {\n        setDevices(data.devices);\n      });\n  }, [spotifyAPI]);\n\n  // Use web player if there is no active device\n  React.useEffect(() => {\n    if (spotifyAPI && devices) {\n      const activeDevice = devices.find((device) => device.is_active === true);\n      if (activeDevice) {\n        setActiveDeviceID(activeDevice.id);\n        setIsReady(true);\n      } else if (spotifyWebPlayer) {\n        setActiveDeviceID(spotifyWebPlayer.getDeviceID());\n        setIsReady(true);\n      }\n    }\n  }, [spotifyAPI, devices, spotifyWebPlayer]);\n\n  React.useEffect(() => {\n    activeDeviceIDRef.current &&\n      isReady &&\n      spotifyAPI &&\n      spotifyAPI.play(song.spotifyURI, activeDeviceIDRef.current);\n  }, [spotifyAPI, song, isReady]);\n\n  const handleChange = (event) => {\n    const deviceID = event.target.value;\n    spotifyAPI.transferPlayback(deviceID);\n    setActiveDeviceID(deviceID);\n  };\n\n  return (\n    <div className=\"Listen-controls\">\n      <div>Playing on device:</div>\n      <select value={activeDeviceID ?? \"\"} onChange={handleChange}>\n        {deviceList?.map((device) => (\n          <option key={device.id} value={device.id}>\n            {device.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyAPI() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.spotifyAPI;\n}\n","import React from \"react\";\nimport \"./Track.css\";\nimport logo from \"./logo.png\";\n\nfunction Track({ track }) {\n  return (\n    <div className=\"Track\">\n      <img\n        className=\"Track-albumImg\"\n        src={track?.albumImg ?? logo}\n        alt=\"Album art\"\n      />\n      <div className=\"Track-details\">\n        <p className=\"Track-name\">{track?.name ?? \"Unknown\"}</p>\n        <p className=\"Track-artist\">{track?.artistName}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"./Track.js\";\n\nexport default function TrackList({ songs }) {\n  return (\n    <>\n      <h3>Recently played tracks</h3>\n      {songs.map((song) => (\n        <div key={song.id} className=\"Listen-track\">\n          <Track track={song.track} />\n        </div>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./EQBars.css\";\n\nexport default function EQBars({ className }) {\n  return (\n    <div className={className}>\n      <div className=\"EQBars-container\">\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestEvent\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getTrack = /* GraphQL */ `\n  query GetTrack($uri: String!) {\n    getTrack(uri: $uri) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const listTracks = /* GraphQL */ `\n  query ListTracks(\n    $uri: String\n    $filter: ModelTrackFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTracks(\n      uri: $uri\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestEvent\n        }\n      }\n      nextToken\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Listen.css\";\nimport DevPublisher from \"./DevPublisher.js\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\nimport SongPlayerWithControls from \"./SongPlayerWithControls.js\";\nimport TrackList from \"./TrackList.js\";\nimport Track from \"./Track.js\";\nimport EQBars from \"./EQBars.js\";\nimport { useLocation } from \"react-router-dom\";\nimport NoSleep from \"nosleep.js\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\n\nfunction StartListening({ children, isListening, onClick }) {\n  const location = useLocation();\n  const authInfo = React.useContext(AuthContext);\n\n  if (isListening) {\n    return children;\n  }\n\n  return (\n    <div className=\"Listen-startListening\">\n      <div className=\"Listen-startListeningMask\">{children}</div>\n      <div className=\"Listen-startListeningContent\">\n        <EQBars className=\"Listen-EQ\" />\n      </div>\n      <div className=\"Listen-startListeningContent\">\n        <a className=\"Listen-play\" href={location.pathname} onClick={onClick}>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          👂\n          <span className=\"Listen-playLink\">\n            {authInfo == null ? \"Login to join ▶\" : \"Join ▶\"}\n          </span>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          😈\n        </a>\n      </div>\n    </div>\n  );\n}\n\nfunction ListenPlayer({ isCurrentlyLive, songs, hostUsername }) {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const [isListeningUsername, setIsListeningUsername] = useLocalStorage(\n    \"EMisListeningUsername\"\n  );\n  const isListening = authInfo && hostUsername === isListeningUsername;\n\n  React.useEffect(() => {\n    if (isListening) {\n      const noSleep = new NoSleep();\n      noSleep.enable();\n      return () => noSleep.disable();\n    }\n  }, [isListening]);\n\n  const handleJoin = React.useCallback(\n    (e) => {\n      e.preventDefault();\n      setIsListeningUsername(hostUsername);\n      if (authInfo == null) {\n        window.location.href = getAuthorizeURI(location.pathname);\n      }\n    },\n    [setIsListeningUsername, authInfo, location, hostUsername]\n  );\n\n  if (!isCurrentlyLive) {\n    return <h1>{hostUsername} is offline</h1>;\n  }\n\n  return (\n    <StartListening isListening={isListening} onClick={handleJoin}>\n      {isListening && <p>Listening to {hostUsername}'s channel!</p>}\n      {isListening && <SongPlayerWithControls song={songs[0]} />}\n      <div>Now Playing:</div>\n      <Track track={songs[0].track} />\n    </StartListening>\n  );\n}\n\nfunction Listen({ hostUsername }) {\n  const location = useLocation();\n  const devPublisherEnabled = location.search.includes(\"DEV=1\");\n\n  return (\n    <div className=\"Listen\">\n      <div className=\"Listen-header\">\n        {devPublisherEnabled && <DevPublisher hostUsername={hostUsername} />}\n      </div>\n\n      <div className=\"Listen-trackList\">\n        <Connect\n          query={graphqlOperation(queries.songEventsByUserId, {\n            userID: hostUsername,\n            sortDirection: \"DESC\",\n            limit: 50,\n          })}\n          subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\n            userID: hostUsername,\n          })}\n          onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n            if (prev?.songEventsByUserID?.items == null) {\n              console.error(\"bad state in listen\", prev);\n              return prev;\n            }\n            prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n            if (prev.songEventsByUserID.items.length > 50) {\n              prev.songEventsByUserID.items.pop();\n            }\n            return prev;\n          }}\n        >\n          {({ data, loading, error }) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const songs =\n              (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n            if (songs.length === 0) {\n              return <div>No track history for {hostUsername}</div>;\n            }\n            const isRecent =\n              Math.floor(Date.now() / 1000) - songs[0].timestamp < 600; // 10 minutes in seconds\n            return (\n              <>\n                <ListenPlayer\n                  isCurrentlyLive={isRecent}\n                  songs={songs}\n                  hostUsername={hostUsername}\n                />\n                <TrackList songs={isRecent ? songs.slice(1) : songs} />\n              </>\n            );\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n\nexport default Listen;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestEvent\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const onCreateUser = /* GraphQL */ `\n  subscription OnCreateUser {\n    onCreateUser {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser {\n    onUpdateUser {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onDeleteUser = /* GraphQL */ `\n  subscription OnDeleteUser {\n    onDeleteUser {\n      userID\n      latestEvent\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onCreateTrack = /* GraphQL */ `\n  subscription OnCreateTrack {\n    onCreateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onUpdateTrack = /* GraphQL */ `\n  subscription OnUpdateTrack {\n    onUpdateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onDeleteTrack = /* GraphQL */ `\n  subscription OnDeleteTrack {\n    onDeleteTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nfunction publishSongEvent(songEvent) {\n  return API.graphql(\n    graphqlOperation(mutations.createSongEvent, {\n      input: songEvent,\n    })\n  );\n}\n\nfunction publishTrack(track) {\n  return API.graphql(graphqlOperation(mutations.createTrack, { input: track }));\n}\n\nexport default function BroadcastPublisher({ currentTrack, onSongEvent }) {\n  const authInfo = React.useContext(AuthContext);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const handlePlayerStateChangedRef = React.useRef(null);\n  const currentTrackRef = React.useRef(null);\n\n  // Cache currentTrack locally to prevent high frequency duplicate updates\n  if (currentTrackRef.current == null && currentTrack != null) {\n    currentTrackRef.current = currentTrack;\n  }\n\n  const handlePlayerStateChanged = (newState) => {\n    const newTrack = SpotifyWebPlayer.getTrackFromState(newState);\n    // Avoid updating if track is the same\n    if (newTrack == null || newTrack.uri === currentTrackRef?.current?.uri) {\n      return;\n    }\n    const songEvent = {\n      userID: authInfo.username,\n      timestamp: Math.floor(Date.now() / 1000),\n      position: Math.floor(newState.position ?? 0),\n      spotifyURI: newTrack.uri,\n    };\n    const trackData = {\n      uri: newTrack.uri,\n      trackID: newTrack.id,\n      name: newTrack.name,\n      durationMs: newTrack.duration_ms,\n      albumName: newTrack.album.name,\n      artistName: newTrack.artists[0].name,\n      albumImg: newTrack.album.images[0].url,\n    };\n    currentTrackRef.current = trackData;\n    onSongEvent(trackData, songEvent);\n    publishTrack(trackData).then(() => publishSongEvent(songEvent));\n  };\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\n\n  React.useEffect(() => {\n    if (spotifyWebPlayer) {\n      const changeListener = (newState) =>\n        handlePlayerStateChangedRef.current(newState);\n      const initFunc = {\n        current: (id) => {\n          if (id === spotifyWebPlayer.getDeviceID()) {\n            // Request current state\n            spotifyWebPlayer.fetchState().then((newState) => {\n              handlePlayerStateChangedRef.current(newState);\n            });\n          } else {\n            // Transfer playback to the web player\n            spotifyWebPlayer.transferPlayback();\n          }\n        },\n      };\n      // Subscribe to future changes\n      spotifyWebPlayer.addStateChangeListener(changeListener);\n\n      // get current state or transfer playback\n      spotifyWebPlayer.spotifyAPI.fetchCurrentDeviceID().then((id) => {\n        initFunc.current(id);\n      });\n\n      // Remove the listener on unMount\n      return () => {\n        spotifyWebPlayer.removeStateChangeListener(changeListener);\n        initFunc.current = () => {};\n      };\n    }\n  }, [spotifyWebPlayer, handlePlayerStateChangedRef]);\n\n  return null;\n}\n","import React from \"react\";\nimport Switch from \"react-switch\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\n\nexport default function PowerHourControl() {\n  const [phEnabled, setPhEnabled] = useLocalStorage(\"EMPhEnabled\", false);\n  const [phCount, setPhCount] = useLocalStorage(\"EMPhCount\", 1);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const phCallbackRef = React.useRef();\n\n  const phCallback = (timeoutID) => {\n    if (phEnabled) {\n      spotifyWebPlayer.nextTrack();\n      setPhCount(phCount + 1);\n    } else {\n      clearInterval(timeoutID);\n    }\n  };\n  phCallbackRef.current = phCallback;\n\n  const handleChange = React.useCallback(\n    (enabled) => {\n      setPhEnabled(enabled);\n      if (enabled) {\n        setPhCount(1);\n        spotifyWebPlayer && spotifyWebPlayer.nextTrack();\n      }\n    },\n    [setPhEnabled, setPhCount, spotifyWebPlayer]\n  );\n\n  React.useEffect(() => {\n    if (phEnabled && spotifyWebPlayer) {\n      const timeoutID = setInterval(() => {\n        phCallbackRef.current(timeoutID);\n      }, 60000);\n      return () => {\n        clearInterval(timeoutID);\n      };\n    }\n  }, [phEnabled, spotifyWebPlayer, phCallbackRef]);\n\n  return (\n    <>\n      <div className=\"Broadcast-controls\">\n        <label htmlFor=\"phToggle\">Power hour mode</label>\n        <Switch\n          className=\"Broadcast-switch\"\n          id=\"phToggle\"\n          onChange={handleChange}\n          checked={phEnabled}\n        />\n      </div>\n      {phEnabled && <h1>{phCount}</h1>}\n    </>\n  );\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"./graphql/queries\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport Track from \"./Track.js\";\nimport TrackList from \"./TrackList.js\";\nimport \"./Broadcast.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport BroadcastPublisher from \"./BroadcastPublisher.js\";\nimport PowerHourControl from \"./PowerHourControl.js\";\nimport EQBars from \"./EQBars.js\";\n\nfunction Broadcast() {\n  const authInfo = React.useContext(AuthContext);\n  const [songHistory, setSongHistory] = React.useState(null);\n  const [currentTrack, setCurrentTrack] = React.useState(null);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n\n  const handleSongEvent = React.useCallback(\n    (track, songEvent) => {\n      setSongHistory((h) =>\n        [{ ...songEvent, track, id: Math.random() }].concat(h)\n      );\n      setCurrentTrack(track);\n    },\n    [setSongHistory, setCurrentTrack]\n  );\n\n  React.useEffect(() => {\n    if (authInfo) {\n      API.graphql(\n        graphqlOperation(queries.songEventsByUserId, {\n          userID: authInfo.username,\n          sortDirection: \"DESC\",\n          limit: 10,\n        })\n      ).then((response) => {\n        setSongHistory(response.data?.songEventsByUserID?.items ?? []);\n      });\n    }\n  }, [authInfo]);\n\n  if (authInfo == null) {\n    return <div>Login to spotify to set the eardrum monster free</div>;\n  }\n\n  const trackList =\n    songHistory == null ? null : (\n      <div className=\"Broadcast-history\">\n        <TrackList songs={songHistory.slice(1)} />\n      </div>\n    );\n\n  const player =\n    spotifyWebPlayer == null || songHistory == null ? (\n      <div>Initializing Spotify web player...</div>\n    ) : (\n      <>\n        <PowerHourControl />\n        <h1>Connected.</h1>\n        <EQBars className=\"Broadcast-streaming\" />\n        <p>Now Playing:</p>\n        <div className=\"Broadcast-currentTrack\">\n          <BroadcastPublisher\n            currentTrack={currentTrack ?? songHistory[0]?.track}\n            onSongEvent={handleSongEvent}\n          />\n          <Track track={currentTrack ?? songHistory[0]?.track} />\n        </div>\n      </>\n    );\n\n  return (\n    <div className=\"Broadcast\">\n      {player}\n      {trackList}\n    </div>\n  );\n}\n\nexport default Broadcast;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Listen from \"./Listen.js\";\nimport Broadcast from \"./Broadcast.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nfunction Channel() {\n  const authInfo = React.useContext(AuthContext);\n  const { id } = useParams();\n\n  if (authInfo?.username === id) {\n    return <Broadcast />;\n  }\n\n  return <Listen hostUsername={id} />;\n}\n\nexport default Channel;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Home.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\n\nconst UserList = ({ users }) => (\n  <div className=\"Home-userList\">\n    {users.map((user) => (\n      <Link key={user.userID} className=\"Home-link\" to={`/u/${user.userID}`}>\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        👂 /u/{user.userID}\n      </Link>\n    ))}\n  </div>\n);\n\nfunction Home() {\n  const authInfo = React.useContext(AuthContext);\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <div className=\"Home\">\n      <div className=\"Home-content\">\n        <div>\n          <em>\n            eardrum.monster allows you to sync your spotify client with friends\n          </em>\n        </div>\n        <h1>How do I use it?</h1>\n        {authInfo != null ? (\n          <>\n            <div>1. Click \"Broadcast\" at the top ☝️</div>\n            <div>2. Share the URL with your friends️</div>\n          </>\n        ) : (\n          <>\n            <div>1. Click \"Login\" at the top ☝️</div>\n            <div>2. Click \"Broadcast\" at the top ☝️</div>\n            <div>3. Share the URL with your friends️</div>\n          </>\n        )}\n\n        <h1>Its great for:</h1>\n        <div>\n          ✅ Streamers who want to let their viewers sync up their music with\n          high quality spotify audio\n        </div>\n        <div>✅ Online gamers who want listen together while gaming</div>\n        <div>\n          ✅ People who are quarantined and want to have virtual power hours\n          together\n        </div>\n\n        <h1>Did you say power hour?</h1>\n        <div>\n          ✅ Yes! eardrum.monster now features <em>Power hour mode™️</em> that\n          will automatically change the song every 60s. Everybody must drink\n          when the song changes.\n        </div>\n\n        <h1>Can I play century club?</h1>\n        <div>\n          ✅ We've got you covered! <em>Power hour mode™️</em> will keep em'\n          coming well beyond the traditional 60 minutes so you can attempt to\n          join the century club as many times as you want!\n        </div>\n      </div>\n      <div className=\"Home-list\">\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        <h2 className=\"Home-title\">😈 MONSTER LIST 😈</h2>\n        <Connect\n          query={graphqlOperation(queries.listUsers, {\n            limit: 50,\n          })}\n          subscription={graphqlOperation(subscriptions.onUpdateUser)}\n          onSubscriptionMsg={(prev, { onUserUpdate }) => {\n            // TODO update user list here\n            return prev;\n          }}\n        >\n          {({ data, loading, error }) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users = (data.listUsers && data.listUsers.items) ?? [];\n            return <UserList users={users} />;\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport Channel from \"./Channel.js\";\nimport Home from \"./Home.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AuthProvider, AuthRedirect } from \"./Auth.js\";\nimport { SpotifyProvider } from \"./SpotifyContext.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AuthProvider>\n          <SpotifyProvider>\n            <Header />\n            <div className=\"App-content\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/auth/\">\n                  <AuthRedirect />\n                </Route>\n                <Route path=\"/u/:id\">\n                  <Channel />\n                </Route>\n              </Switch>\n            </div>\n          </SpotifyProvider>\n        </AuthProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n  aws_project_region: \"us-east-1\",\n  aws_appsync_graphqlEndpoint:\n    \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n  aws_appsync_region: \"us-east-1\",\n  aws_appsync_authenticationType: \"API_KEY\",\n  aws_appsync_apiKey: \"da2-jxgfvq7zzvacfozrt7vucdiipq\",\n};\n\nexport default awsmobile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport awsconfig from \"./aws-exports\";\nimport Amplify from \"aws-amplify\";\n\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";"],"sourceRoot":""}