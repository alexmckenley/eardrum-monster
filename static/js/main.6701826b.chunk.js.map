{"version":3,"sources":["logo.png","spotify.js","Header.js","MaybeUpdateAccessToken.js","graphql/mutations.js","Listen.js","graphql/queries.js","graphql/subscriptions.js","Broadcast.js","Channel.js","Home.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SpotifyClient","accessToken","this","freshAccessToken","player","getCurrentState","console","error","Promise","reject","state","newUri","spotifyURI","fetchState","then","currentState","getUriFromState","play","Math","abs","position","seek","pause","ms","nextTrack","uri","fetch","deviceId","method","body","JSON","stringify","uris","headers","Authorization","response","ok","callback","addListener","newSong","getTrackFromState","newSongUri","currentSongUri","newState","resolve","window","onSpotifyWebPlaybackSDKReady","initializePlayer","sdkScript","document","createElement","src","appendChild","Spotify","Player","name","getOAuthToken","fetchOauthToken","bind","volume","on","message","id","device_id","device_ids","connect","success","status","json","data","device","track_window","current_track","type","Header","clearAccessToken","username","redirectURI","encodeURIComponent","process","authorizeURI","className","to","logo","alt","href","onClick","e","preventDefault","MaybeUpdateAccessToken","setAccessToken","React","useEffect","location","hash","params","slice","split","map","param","forEach","tup","access_token","createSongEvent","ListView","songs","song","key","PlaySong","spotify","useState","deviceID","setDeviceID","fetchCurrentDeviceId","setDeviceId","prepareSpotifyClient","handleNewState","DevPublisher","hostUsername","timeoutID","setInterval","songEvent","userID","timestamp","floor","Date","now","random","toString","API","graphql","graphqlOperation","mutations","input","log","clearInterval","Listen","devPublisherEnabled","search","includes","Connect","query","sortDirection","subscription","onSubscriptionMsg","prev","onCreateSongEvent","songEventsByUserID","items","unshift","length","pop","loading","Broadcast","phEnabled","setPhEnabled","phCount","setPhCount","currentSong","setCurrentSong","phEnabledRef","useRef","phCountRef","current","catch","onPlayerStateChanged","onChange","checked","Channel","useParams","Home","awsmobile","Amplify","configure","awsconfig","App","storedToken","localStorage","getItem","storedUsername","setAccessTokenRaw","setUsernameRaw","setSpotify","removeItem","spotifyInst","fetchUserInfo","user","setItem","setUsername","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6701826b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";","export default class SpotifyClient {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n    this.freshAccessToken = true;\n    this.player = null;\n  }\n\n  /**\n   * Fetches the current Spotify status.\n   * Resolves instantly with default params. (No long polling)\n   * @params - Query params that can add/overwrite default params.\n   * @returns { Promise } - Spotify status\n   */\n  fetchState() {\n    if (!this.player) {\n      console.error('Player not initialized');\n      return Promise.reject('player not initialized');\n    }\n\n    return this.player.getCurrentState();\n  }\n\n  // TODO Mejorar esta funcion\n  /**\n   * Handles a new state by pausing/playing/seeking depending on current status\n   * @param state\n   */\n  handleNewState(state) {\n    const newUri = state.spotifyURI;\n\n    if (this.player) {\n      // We're using the web player\n      this.fetchState().then(currentState => {\n        const currentUri = SpotifyClient.getUriFromState(currentState);\n        if (currentUri === newUri) {\n          if (Math.abs(state.position - currentState.position) > 10000) {\n            this.seek(state.position);\n          }\n          return;\n        }\n        this.play(newUri);\n      });\n    } else {\n      // We arent using the web player\n      this.play(newUri);\n    }\n  }\n\n  /**\n   * Pause Spotify client\n   * @returns { Promise } - Spotify Status\n   */\n  pause() {\n    return this.player.pause();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  /**\n   * Play a song given a uri and seek to seconds (optional)\n   * We have to call pause() initially because calling play with the same song errors out\n   * @param uri - Track uri\n   * @param seconds - Seconds where the player should seek to\n   * @returns { Promise } - Spotify Status\n   */\n  play(uri) {\n    return fetch(\n      `https://api.spotify.com/v1/me/player/play?device_id=${this.deviceId}`,\n      {\n        method: 'PUT',\n        body: JSON.stringify({ uris: [uri] }),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      },\n    ).then(response => {\n      if (!response.ok) {\n        console.error('error playing uri');\n      }\n      // DISPATCH HERE\n    //   return store.dispatch(\n    //     `channel/${channelActionTypes.SET_IS_PLAYING}`,\n    //     true,\n    //   );\n    });\n  }\n\n  /**\n   * Sets polling query params and calls fetchStatus\n   * This is a long polling implementation with Spotify's client which\n   * resolves when play/pause/seek or after 60 seconds\n   */\n  onPlayerStateChanged(callback) {\n    this.player.addListener('player_state_changed', state => {\n      let newSong = SpotifyClient.getTrackFromState(state);\n      const newSongUri = SpotifyClient.getUriFromState(state);\n\n      if (newSongUri === this.currentSongUri) {\n        newSong = null;\n      }\n\n      this.currentSongUri = newSongUri;\n\n      callback({\n        newState: state,\n        newSong,\n      });\n    });\n  }\n\n  prepareSpotifyClient() {\n    return new Promise(resolve => {\n        if (this.player) {\n            resolve();\n            return;\n        }\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n            this.initializePlayer().then(resolve);\n        };\n\n        const sdkScript = document.createElement('script');\n        sdkScript.src = 'https://sdk.scdn.co/spotify-player.js';\n        document.body.appendChild(sdkScript);\n    });\n  }\n\n  initializePlayer() {\n    return new Promise(resolve => {\n      this.player = new window.Spotify.Player({\n        name: 'eardrum.monster',\n        getOAuthToken: this.fetchOauthToken.bind(this),\n        volume: 0.1,\n      });\n\n      this.player.on('initialization_error', ({ message }) => {\n        console.error('Failed to initialize', message);\n      });\n      this.player.on('authentication_error', ({ message }) => {\n        console.error('Failed to authenticate', message);\n      });\n      this.player.on('account_error', ({ message }) => {\n        console.error('Failed to validate Spotify account', message);\n      });\n      this.player.on('playback_error', ({ message }) => {\n        console.error('Failed to perform playback', message);\n      });\n      this.player.on('ready', ({ device_id: id }) => {\n        // Transfer playback to web player\n        this.deviceId = id;\n        fetch('https://api.spotify.com/v1/me/player', {\n          method: 'PUT',\n          body: JSON.stringify({ device_ids: [this.deviceId], play: true }),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.accessToken}`,\n          },\n        }).then(response => {\n          if (response.ok) {\n            resolve();\n          } else {\n            console.error('unable to transfer playback to web player');\n          }\n        });\n      });\n\n      this.player.connect().then(success => {\n        if (!success) {\n          console.error('Failed to connect to the web player');\n        }\n      });\n    });\n  }\n\n  /**\n   * Fetch and set Spotify's Oauth token needed to authenticate requests\n   * @returns {Promise.<*>}\n   * @private\n   */\n  fetchOauthToken(callback) {\n    if (this.freshAccessToken) {\n      callback(this.accessToken);\n    } else {\n      // TODO: Fetch a new access token from the server\n      console.error('fetchOauthToken called more than once');\n      callback(this.accessToken);\n    }\n  }\n\n  static getTrackFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track;\n    }\n\n    return null;\n  }\n\n  static getUriFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.uri;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns if a given status is an Ad\n   * @param state\n   * @returns { boolean } - true if the track is an ad, false otherwise\n   */\n  static isAd(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.type === 'ad';\n    }\n\n    return false;\n  }\n\n  fetchCurrentDeviceId() {\n    return fetch('https://api.spotify.com/v1/me/player', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    }).then(response => {\n      if (!response.ok) {\n        console.error('error fetching device id');\n      }\n      if (response.status === 204) {\n          return {};\n      }\n      return response.json();\n    }).then(data => {\n      if (data.device && data.device.id) {\n        return data.device.id;\n      }\n      return null;\n    });\n  }\n\n  fetchUserInfo() {\n    return fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    }).then(response => {\n      if (!response.ok) {\n          throw(response);\n      }\n      return response.json();\n    });\n  }\n\n  setDeviceId(id) {\n    this.deviceId = id;\n  }\n}\n","import React from 'react';\nimport logo from './logo.png';\nimport {\n Link\n} from \"react-router-dom\";\n\nfunction Header({accessToken, clearAccessToken, username}) {\n  const clientID = 'd73f9dfa97c44b57ac7cefcc031c4df9';\n  const scopes = 'streaming+user-read-email+user-read-private+user-read-playback-state+user-modify-playback-state+user-read-currently-playing';\n  const redirectURI = encodeURIComponent(process.env.REACT_APP_SPOTIFY_REDIRECT_URI);\n  const authorizeURI = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}`;\n\n  function handleLogout(e) {\n      e.preventDefault();\n      clearAccessToken();\n  }\n\n  return (\n      <header className=\"App-header\">\n        <Link className=\"App-title\" to=\"/\"><h1 >EARDRUM MONSTER</h1></Link>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {accessToken != null ?\n          // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          (<><Link className=\"App-link\" to={`/u/${username}`}>/u/{username}</Link><a className=\"App-link\" href=\"#\" onClick={handleLogout} >Logout</a></>) :\n          <a className=\"App-link\" href={authorizeURI}>Login with Spotify</a>\n        }\n      </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction MaybeUpdateAccessToken({setAccessToken}) {\n  React.useEffect(() => {\n    if (window.location.hash) {\n        const params = {};\n        window.location.hash.slice(1).split('&').map(param => param.split('=')).forEach(tup => { params[tup[0]] = tup[1] });\n        const accessToken = params.access_token;\n        window.location.hash = '';\n        setAccessToken(accessToken);\n    }\n  });\n  return null;\n}\n\nexport default MaybeUpdateAccessToken;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { API, graphqlOperation }  from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\n\nimport * as queries from './graphql/queries';\nimport * as subscriptions from './graphql/subscriptions';\nimport * as mutations from './graphql/mutations';\n\nconst ListView = ({ songs }) => (\n    <div>\n        <h3>Recently played</h3>\n        <ul>\n            {songs.map(song => <li key={song.id}>{song.spotifyURI}</li>)}\n        </ul>\n    </div>\n);\n\nfunction PlaySong({song, spotify}) {\n    const [deviceID, setDeviceID] = React.useState(null);\n    React.useEffect(() => {\n      if (spotify) {\n        spotify\n        .fetchCurrentDeviceId()\n        .then(id => {\n          if (id) {\n            return spotify.setDeviceId(id);\n          }\n          return spotify.prepareSpotifyClient();\n        })\n        .then(() => setDeviceID(spotify.deviceId));\n      }\n    }, [spotify])\n\n    React.useEffect(() => {\n        spotify && song && deviceID && spotify.handleNewState(song);\n    }, [song, deviceID, spotify]);\n    return null;\n}\n\nfunction DevPublisher({hostUsername}) {\n    React.useEffect(() => {\n\n const timeoutID = setInterval(() => {\n    const tracks = [\n    \"spotify:track:08KMh61hPslT7sEf2tEgtT\", \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\", \"spotify:track:59nNxS2V7M4UDH058BU5qJ\", \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\", \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\", \"spotify:track:6AynxUt8LJy9S6bovDdFLr\", \"spotify:track:000PzErbB04ALQCv9iYiQm\", \"spotify:track:6AynxUt8LJy9S6bovDdFLr\", \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\", \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\"\n    ];\n    const songEvent = {\n        userID: hostUsername,\n        timestamp: Math.floor(Date.now() / 100),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n    };\n    API.graphql(graphqlOperation(mutations.createSongEvent, {input: songEvent})).then(data => console.log('Publishing: ', data));\n}, 5000);\n\nreturn () => {\n    clearInterval(timeoutID);\n}\n    }, [hostUsername]);\n    return <h1>DevPublisher enabled</h1>;\n}\n\nfunction Listen({username, hostUsername, spotify}) {\n\n\n\nconst devPublisherEnabled = window.location.search.includes('DEV=1');\n  return (\n      <>\n      {username != null ?\n      (<div>Listening to {hostUsername}'s channel!</div>) :\n      (<div>Login to spotify to set the eardrum monster free</div>)\n      }\n\n      {devPublisherEnabled && <DevPublisher hostUsername={hostUsername} />}\n\n    <Connect\n    query={graphqlOperation(queries.songEventsByUserId, {userID: hostUsername, sortDirection: 'DESC'})}\n    subscription={graphqlOperation(subscriptions.onCreateSongEvent, {userID: hostUsername})}\n    onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n        prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n        if (prev.songEventsByUserID.items.length > 50) {\n            prev.songEventsByUserID.items.pop();\n        }\n        return prev;\n    }}\n>\n    {({ data, loading, error }) => {\n        if (error) return (<h3>Error</h3>);\n        if (loading || !data ) return (<h3>Loading...</h3>);\n        const songs = (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n        return (\n            <>\n                <PlaySong song={songs[0]} spotify={spotify} />\n                <ListView songs={songs} />\n            </>\n        );\n    }}\n </Connect>\n </>\n  );\n}\n\nexport default Listen;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        userID\n        user {\n          userID\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        userID\n        user {\n          userID\n        }\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const onCreateUser = /* GraphQL */ `\n  subscription OnCreateUser {\n    onCreateUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser {\n    onUpdateUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onDeleteUser = /* GraphQL */ `\n  subscription OnDeleteUser {\n    onDeleteUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from './graphql/mutations';\nimport Switch from 'react-switch';\nimport SpotifyClient from './spotify.js';\n\n\nfunction Broadcast({username, spotify}) {\n    const [phEnabled, setPhEnabled] = React.useState(false);\n    const [phCount, setPhCount] = React.useState(1);\n    const [currentSong, setCurrentSong] = React.useState(null);\n    const phEnabledRef = React.useRef(phEnabled);\n    const phCountRef = React.useRef(phCount);\n    phEnabledRef.current = phEnabled;\n    phCountRef.current = phCount;\n    // Ensure the user is created on mount\n    React.useEffect(() => {\n        if (username) {\n            API.graphql(graphqlOperation(mutations.createUser, {input: {\n                userID: username\n            }})).catch(() => console.error('user creation failed'));\n        }\n    }, [username]);\n\n    // initialize spotify web player\n    React.useEffect(() => {\n        if(spotify && username) {\n            spotify.prepareSpotifyClient()\n            .then(() => {\n                spotify.fetchState().then(currentState => setCurrentSong(SpotifyClient.getUriFromState(currentState)));\n                spotify.onPlayerStateChanged(data => {\n                    if (data.newSong != null) {\n                        const songEvent = {\n                            userID: username,\n                            timestamp: Math.floor(Date.now() / 100),\n                            position: data.newState.position ?? 0,\n                            spotifyURI: data.newSong.uri,\n                        };\n                        API.graphql(graphqlOperation(mutations.createSongEvent, {input: songEvent}));\n                        setCurrentSong(data.newSong.uri);\n                    }\n                });\n            });\n        }\n    }, [spotify, username]);\n\n    React.useEffect(() => {\n        if(phEnabled && spotify) {\n            spotify.nextTrack();\n            const timeoutID = setInterval(() => {\n                if(phEnabledRef.current) {\n                    setPhCount(phCountRef.current + 1);\n                    spotify.nextTrack();\n                } else {\n                    clearInterval(timeoutID);\n                    setPhCount(1);\n                }\n            }, 60000);\n        }\n\n    }, [phEnabled, phEnabledRef, spotify]);\n\n    if (username == null) {\n        return <div>Login to spotify to set the eardrum monster free</div>;\n    }\n\n    if (spotify == null) {\n        return <div>Initializing spotify web player...</div>;\n    }\n\n    return (\n        <>\n      <label>\n        <span>Power hour mode enabled</span>\n        <Switch onChange={setPhEnabled} checked={phEnabled}/>\n      </label>\n      {phEnabled && <h1>{phCount}</h1>}\n      <div>broadcasting: {currentSong}</div>\n      </>\n    );\n}\n\nexport default Broadcast;\n","import React from 'react';\nimport {\n  useParams\n} from \"react-router-dom\";\nimport Listen from './Listen.js';\nimport Broadcast from './Broadcast.js';\n\nfunction Channel({username, spotify}) {\n  const { id } = useParams();\n\n  if (username === id) {\n    return (<Broadcast username={username} spotify={spotify}/>);\n  }\n\n  return (<Listen username={username} hostUsername={id} spotify={spotify} />);\n\n}\n\nexport default Channel;\n","import React from 'react';\nimport {\n  Link\n} from \"react-router-dom\";\n\nfunction Home({username}) {\n  return (\n      <div>\n      <h2>Currently broadcasting:</h2>\n      <ul>\n      {username != null ? <li><Link className=\"App-link\" to={`/u/${username}`}>/u/{username}</Link></li> : null}\n      <li><Link to=\"/u/alta\">/u/alta</Link></li>\n      <li><Link to=\"/u/hajkowicz\">/u/hajkowicz</Link></li>\n      <li><Link to=\"/u/cilo\">/u/cilo</Link></li>\n      </ul>\n      </div>\n  );\n}\n\nexport default Home;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-jxgfvq7zzvacfozrt7vucdiipq\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport './App.css';\nimport SpotifyClient from './spotify.js';\nimport Header from './Header.js';\nimport MaybeUpdateAccessToken from './MaybeUpdateAccessToken.js';\nimport Channel from './Channel.js';\nimport Home from './Home.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport awsconfig from './aws-exports';\nimport Amplify from 'aws-amplify';\n\nAmplify.configure(awsconfig);\n\nfunction App() {\n  const storedToken = window.localStorage.getItem('spotifyAccessToken');\n  const storedUsername = window.localStorage.getItem('spotifyUsername');\n  const [accessToken, setAccessTokenRaw] = React.useState(storedToken);\n  const [username, setUsernameRaw] = React.useState(storedUsername);\n  const [spotify, setSpotify] = React.useState(null);\n\n  React.useEffect(() => {\n    if (accessToken) {\n      const spotifyInst = new SpotifyClient(accessToken);\n      setSpotify(spotifyInst);\n      spotifyInst.fetchUserInfo().then(user => {\n        setUsername(user.id);\n      }).catch(() => {\n        clearAccessToken();\n      });\n    }\n  }, [accessToken]);\n\n  function clearAccessToken() {\n    window.localStorage.removeItem('spotifyAccessToken');\n    window.localStorage.removeItem('spotifyUsername');\n    setAccessTokenRaw(null);\n    setUsernameRaw(null);\n  }\n\n  function setAccessToken(accessToken) {\n    window.localStorage.setItem('spotifyAccessToken', accessToken);\n    setAccessTokenRaw(accessToken);\n  }\n\n  function setUsername(username) {\n    window.localStorage.setItem('spotifyUsername', username);\n    setUsernameRaw(username);\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n          <MaybeUpdateAccessToken setAccessToken={setAccessToken} />\n          <Header clearAccessToken={clearAccessToken} accessToken={accessToken} username={username}/>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home username={username} />\n            </Route>\n            <Route path=\"/u/:id\">\n              <Channel username={username} spotify={spotify} />\n            </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}