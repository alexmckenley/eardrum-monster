{"version":3,"sources":["SpotifyAPI.js","graphql/mutations.ts","graphql/queries.ts","Auth.js","Header.js","DevPublisher.js","SpotifyWebPlayer.js","SpotifyContext.js","useSpotifyWebPlayer.js","SongPlayerWithControls.js","useSpotifyAPI.js","Track.js","TrackList.js","EQBars.js","Utils.ts","Listeners.tsx","graphql/subscriptions.ts","Listen.js","useAuth.ts","BroadcastPublisher.tsx","PowerHourControl.js","Broadcast.js","Channel.js","ChannelList.tsx","graphql/customQueries.ts","Home.tsx","RedirectToLoginOrBroadcast.tsx","ChangeUsername.tsx","App.js","serviceWorker.js","aws-exports.js","index.js","logo.png"],"names":["SpotifyAPI","accessToken","onUnauthorized","Error","this","maybeHandle401","bind","response","status","fetch","method","headers","Authorization","then","ok","json","console","error","data","device","id","uri","deviceID","query","body","JSON","stringify","uris","device_ids","play","updateUser","createSongEvent","usersByDisplayName","songEventsByUserId","AuthContext","createContext","AuthRedirect","style","textAlign","getAuthorizeURI","pathname","redirectURI","encodeURIComponent","process","currentPath","AuthProvider","children","useLocalStorage","authInfo","setAuthInfo","location","useLocation","history","useHistory","username","userImg","displayName","React","useEffect","hash","params","slice","split","map","param","forEach","tup","access_token","fetchUserInfo","user","product","spotifyIdentifier","images","url","API","graphql","graphqlOperation","userID","getUser","input","type","createUser","dislayName","log","oldImg","mutations","push","decodeURIComponent","state","catch","replace","handleAuthRedirect","authContext","useMemo","logout","retryAuth","window","href","Provider","value","Header","useContext","authorizeURI","match","useRouteMatch","className","to","onClick","e","preventDefault","src","alt","DevPublisher","hostUserID","timeoutID","setInterval","songEvent","timestamp","Math","floor","Date","now","position","spotifyURI","random","toString","clearInterval","SpotifyWebPlayer","player","spotifyAPI","getCurrentState","pause","resume","ms","seek","nextTrack","callback","addListener","removeListener","transferPlayback","Promise","resolve","Spotify","Player","onSpotifyWebPlaybackSDKReady","sdkScript","document","createElement","appendChild","__accessToken","__onUnauthorized","__spotifyAPI","EMglobalPlayerInstance","EMGlobalPlayerInstance","name","getOAuthToken","cb","volume","on","message","device_id","connect","success","inject","initializePlayer","track_window","current_track","SpotifyContext","SpotifyProvider","useState","webPlayer","setWebPlayer","setSpotifyAPI","api","createInstance","inst","spotifyContext","useSpotifyWebPlayer","SongPlayerWithControls","song","useSpotifyAPI","spotifyWebPlayer","devices","setDevices","activeDeviceID","setActiveDeviceID","activeDeviceIDRef","useRef","isReady","setIsReady","current","eardrumPlayer","getDeviceID","deviceList","find","d","fetchDevices","activeDevice","is_active","onChange","event","target","key","Track","track","albumImg","logo","artistName","TrackList","songs","EQBars","isUserOnline","latestSongEvent","isUserListening","latestListenPing","getListenerCount","listeners","items","filter","listener","length","Listeners","hostDisplayName","hostUserImg","rerender","setRerender","setTimeout","r","clearTimeout","Connect","listeningTo","sortDirection","limit","subscription","onSubscriptionMsg","prev","onUpdateUser","usersByListeningTo","index","findIndex","isListening","wasListening","audio","Audio","loading","onlineUsers","users","getActiveListeners","StartListening","publishListenPing","ListenPlayer","isCurrentlyLive","isListeningUsername","setIsListeningUsername","NoSleep","noSleep","enable","disable","intervalID","handleJoin","useCallback","Listen","devPublisherEnabled","search","includes","setHostUserID","setHostUserImg","failedLookup","setFailedLookup","queries","fetchHostByDisplayName","host","onCreateSongEvent","songEventsByUserID","unshift","pop","online","publishBroadcastPing","BroadcastPublisher","currentSongEvent","onSongEvent","useAuth","handlePlayerStateChangedRef","currentSongEventRef","newState","newTrack","getTrackFromState","isSameTrack","trackInProgress","durationMs","trackID","duration_ms","albumName","album","artists","localSongEvent","__typename","publishTrack","publishSongEvent","changeListener","initFunc","fetchState","addStateChangeListener","fetchCurrentDeviceID","removeStateChangeListener","PowerHourControl","phEnabled","setPhEnabled","phCount","setPhCount","phCallbackRef","handleChange","enabled","htmlFor","checked","Broadcast","songHistory","setSongHistory","copied","setCopied","handleSongEvent","h","concat","trackList","shareURI","disabled","size","text","onCopy","Channel","useParams","img","cta","title","subtitle","ChannelList","usersByLatestSongEvent","sort","a","b","latestSong","songEvents","numListeners","Home","RedirectToLoginOrBroadcast","val","setVal","setSuccess","onSubmit","App","exact","path","Boolean","hostname","awsmobile","Amplify","configure","awsconfig","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.00b25743.chunk.js","sourcesContent":["export default class SpotifyAPI {\n  constructor(accessToken, onUnauthorized) {\n    if (accessToken == null) {\n      throw new Error(\"Access token was null\");\n    }\n    this.accessToken = accessToken;\n    this.onUnauthorized = onUnauthorized ?? (() => {});\n    this.maybeHandle401 = this.maybeHandle401.bind(this);\n  }\n\n  maybeHandle401(response) {\n    if (response.status === 401) {\n      this.onUnauthorized();\n      throw new Error(\"Unauthorized: \", response);\n    }\n    return response;\n  }\n\n  fetchUserInfo() {\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n        return response.json();\n      });\n  }\n\n  fetchCurrentDeviceID() {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"error fetching device id\");\n        }\n        if (response.status === 204) {\n          return null;\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data?.device?.id) {\n          return data.device.id;\n        }\n        return null;\n      });\n  }\n\n  play(uri, deviceID) {\n    const query = deviceID != null ? `?device_id=${deviceID}` : \"\";\n    return fetch(`https://api.spotify.com/v1/me/player/play/${query}`, {\n      method: \"PUT\",\n      body: JSON.stringify({ uris: [uri] }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"Error playing uri\", response);\n        }\n      });\n  }\n\n  transferPlayback(deviceID) {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      body: JSON.stringify({ device_ids: [deviceID], play: true }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to transfer playback to device: \" + deviceID);\n        }\n      });\n  }\n\n  fetchDevices() {\n    return fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then(this.maybeHandle401)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"unable to fetch devices\");\n        }\n        return response.json();\n      });\n  }\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const createTrack = /* GraphQL */ `\n  mutation CreateTrack(\n    $input: CreateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    createTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const updateTrack = /* GraphQL */ `\n  mutation UpdateTrack(\n    $input: UpdateTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    updateTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const deleteTrack = /* GraphQL */ `\n  mutation DeleteTrack(\n    $input: DeleteTrackInput!\n    $condition: ModelTrackConditionInput\n  ) {\n    deleteTrack(input: $input, condition: $condition) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const getTrack = /* GraphQL */ `\n  query GetTrack($uri: String!) {\n    getTrack(uri: $uri) {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const listTracks = /* GraphQL */ `\n  query ListTracks(\n    $uri: String\n    $filter: ModelTrackFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTracks(\n      uri: $uri\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByLatestSongEvent = /* GraphQL */ `\n  query UsersByLatestSongEvent(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByListeningTo = /* GraphQL */ `\n  query UsersByListeningTo(\n    $listeningTo: String\n    $latestListenPing: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByListeningTo(\n      listeningTo: $listeningTo\n      latestListenPing: $latestListenPing\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const usersByDisplayName = /* GraphQL */ `\n  query UsersByDisplayName(\n    $displayName: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByDisplayName(\n      displayName: $displayName\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByType = /* GraphQL */ `\n  query SongEventsByType(\n    $type: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByType(\n      type: $type\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        track {\n          uri\n          trackID\n          name\n          durationMs\n          albumName\n          artistName\n          albumImg\n        }\n        userID\n        user {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import React, { createContext } from \"react\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport * as queries from \"./graphql/queries\";\n\nexport const AuthContext = createContext();\n\nexport function AuthRedirect() {\n  return <div style={{ textAlign: \"center\" }}>Logging in...</div>;\n}\n\nexport function getAuthorizeURI(pathname) {\n  const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\n  const scopes = process.env.REACT_APP_SPOTIFY_SCOPES;\n  const redirectURI = encodeURIComponent(\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n  );\n  const currentPath = encodeURIComponent(pathname);\n  return `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}&state=${currentPath}`;\n}\n\nfunction handleAuthRedirect(setAuthInfo, history, location) {\n  if (location.hash) {\n    const params = {};\n    location.hash\n      .slice(1)\n      .split(\"&\")\n      .map((param) => param.split(\"=\"))\n      .forEach((tup) => {\n        params[tup[0]] = tup[1];\n      });\n    const accessToken = params.access_token;\n    if (accessToken == null) {\n      return;\n    }\n    location.hash = \"\";\n    new SpotifyAPI(accessToken).fetchUserInfo().then((user) => {\n      if (user.product !== \"premium\") {\n        history.replace(\"/premium_required\");\n        return;\n      }\n      const spotifyIdentifier = user.id;\n      const userImg = user.images?.[0]?.url ?? null;\n      // Ensure the user is created upon login\n      API.graphql(\n        graphqlOperation(queries.getUser, {\n          userID: spotifyIdentifier,\n        })\n      )\n        .then((data) => {\n          if (data.data.getUser == null) {\n            return API.graphql(\n              graphqlOperation(mutations.createUser, {\n                input: {\n                  userID: spotifyIdentifier,\n                  displayName: spotifyIdentifier,\n                  userImg: userImg,\n                  type: \"USER\",\n                },\n              })\n            ).then((data) => {\n              return data.data.createUser.dislayName;\n            });\n          } else {\n            console.log();\n            const oldImg = data?.data?.getUser?.userImg;\n            if (userImg != null && userImg !== oldImg) {\n              API.graphql(\n                graphqlOperation(mutations.updateUser, {\n                  input: {\n                    userID: spotifyIdentifier,\n                    userImg: userImg,\n                  },\n                })\n              );\n            }\n          }\n          return data.data.getUser.displayName;\n        })\n        .then((displayName) => {\n          setAuthInfo({\n            accessToken,\n            username: spotifyIdentifier,\n            displayName,\n            userImg,\n          });\n          history.push(decodeURIComponent(params.state));\n        })\n        .catch(() => {\n          history.push(\"/\");\n          console.error(\"user creation failed\");\n        });\n    });\n  }\n  return null;\n}\n\nexport function AuthProvider({ children }) {\n  const [authInfo, setAuthInfo] = useLocalStorage(\"EMAuthInfo\");\n  const location = useLocation();\n  const history = useHistory();\n  const username = authInfo?.username;\n  const accessToken = authInfo?.accessToken;\n  const userImg = authInfo?.userImg;\n  const displayName = authInfo?.displayName || username;\n\n  React.useEffect(() => {\n    handleAuthRedirect(setAuthInfo, history, location);\n  }, [setAuthInfo, history, location]);\n\n  const authContext = React.useMemo(() => {\n    return accessToken != null && username != null\n      ? {\n          accessToken: accessToken,\n          username: username,\n          userImg: userImg,\n          displayName: displayName,\n          logout: () => setAuthInfo(null),\n          retryAuth: () => {\n            setAuthInfo(null);\n            window.location.href = getAuthorizeURI(window.location.pathname);\n          },\n          setAuthInfo: setAuthInfo,\n        }\n      : null;\n  }, [username, accessToken, setAuthInfo, userImg, displayName]);\n\n  return (\n    <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\n\nfunction Header() {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const authorizeURI = getAuthorizeURI(location.pathname);\n  const match = useRouteMatch(\"/u/\" + authInfo?.displayName);\n\n  function handleLogout(e) {\n    e.preventDefault();\n    authInfo.logout();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      {authInfo != null ? (\n        <>\n          {match == null ? (\n            <Link className=\"App-link\" to={`/u/${authInfo.displayName}`}>\n              Host a channel\n            </Link>\n          ) : (\n            /* eslint-disable-next-line jsx-a11y/anchor-is-valid */\n            <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          )}\n          <div className=\"App-headerPhoto\">\n            <Link className=\"App-smallLink\" to={`/u/${authInfo.displayName}`}>\n              {authInfo.displayName}\n            </Link>\n            {authInfo.userImg ? (\n              <img\n                className=\"App-headerImg\"\n                src={authInfo.userImg}\n                alt=\"profile pic\"\n              />\n            ) : (\n              authInfo.displayName\n            )}\n            <Link className=\"App-smallLink\" to={`/change_username`}>\n              Change username\n            </Link>\n          </div>\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Host a channel\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\n\nexport default function DevPublisher({ hostUserID }) {\n  React.useEffect(() => {\n    const timeoutID = setInterval(() => {\n      const tracks = [\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\n      ];\n      const songEvent = {\n        userID: hostUserID,\n        timestamp: Math.floor(Date.now() / 1000),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n        type: \"NEW_SONG\",\n      };\n      API.graphql(\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\n      ).then((data) => console.log(\"Publishing: \", data));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeoutID);\n    };\n  }, [hostUserID]);\n\n  return <h1>DevPublisher enabled</h1>;\n}\n","export default class SpotifyWebPlayer {\n  constructor(player, spotifyAPI) {\n    this.player = player;\n    this.spotifyAPI = spotifyAPI;\n  }\n\n  fetchState() {\n    return this.player.getCurrentState();\n  }\n\n  pause() {\n    return this.player.pause();\n  }\n\n  resume() {\n    return this.player.resume();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  addStateChangeListener(callback) {\n    this.player.addListener(\"player_state_changed\", callback);\n  }\n\n  removeStateChangeListener(callback) {\n    this.player.removeListener(\"player_state_changed\", callback);\n  }\n\n  getDeviceID() {\n    return this.player.deviceID;\n  }\n\n  transferPlayback() {\n    return this.spotifyAPI.transferPlayback(this.player.deviceID);\n  }\n\n  static inject() {\n    return new Promise((resolve) => {\n      if (window?.Spotify?.Player) {\n        resolve();\n        return;\n      }\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n      };\n      const sdkScript = document.createElement(\"script\");\n      sdkScript.src = process.env.REACT_APP_SPOTIFY_WEB_PLAYER_SDK;\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  static initializePlayer(spotifyAPI, accessToken, onUnauthorized) {\n    // Update accessToken singleton so existing players can access it;\n    SpotifyWebPlayer.__accessToken = accessToken;\n    SpotifyWebPlayer.__onUnauthorized = onUnauthorized;\n    SpotifyWebPlayer.__spotifyAPI = spotifyAPI;\n\n    return new Promise((resolve) => {\n      if (window.EMglobalPlayerInstance) {\n        resolve(window.EMGlobalPlayerInstance);\n        return;\n      }\n\n      const player = new window.Spotify.Player({\n        name: \"eardrum.monster\",\n        getOAuthToken: (cb) => {\n          cb(SpotifyWebPlayer.__accessToken);\n          SpotifyWebPlayer.__spotifyAPI.fetchUserInfo();\n        },\n        volume: 0.1,\n      });\n\n      player.on(\"initialization_error\", ({ message }) => {\n        console.error(\"Failed to initialize\", message);\n      });\n      player.on(\"authentication_error\", ({ message }) => {\n        console.error(\"Failed to authenticate\", message);\n        SpotifyWebPlayer.__onUnauthorized();\n      });\n      player.on(\"account_error\", ({ message }) => {\n        console.error(\"Spotify premium required\", message);\n      });\n      player.on(\"playback_error\", ({ message }) => {\n        console.error(\"Failed to perform playback\", message);\n      });\n      player.on(\"ready\", ({ device_id: id }) => {\n        player.deviceID = id;\n        window.EMGlobalPlayerInstance = player;\n        resolve(player);\n      });\n\n      player.connect().then((success) => {\n        if (!success) {\n          console.error(\"Failed to connect to the web player\");\n        }\n      });\n    });\n  }\n\n  static createInstance(accessToken, spotifyAPI, onUnauthorized) {\n    return SpotifyWebPlayer.inject()\n      .then(() =>\n        SpotifyWebPlayer.initializePlayer(\n          spotifyAPI,\n          accessToken,\n          onUnauthorized\n        )\n      )\n      .then((player) => new SpotifyWebPlayer(player, spotifyAPI));\n  }\n\n  static getTrackFromState(state) {\n    return state?.track_window?.current_track;\n  }\n}\n","import React, { createContext } from \"react\";\nimport SpotifyAPI from \"./SpotifyAPI.js\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nexport const SpotifyContext = createContext();\n\nexport function SpotifyProvider({ children }) {\n  const authInfo = React.useContext(AuthContext);\n  const [webPlayer, setWebPlayer] = React.useState(null);\n  const [spotifyAPI, setSpotifyAPI] = React.useState(null);\n\n  React.useEffect(() => {\n    if (authInfo == null) {\n      setWebPlayer(null);\n      setSpotifyAPI(null);\n    } else {\n      const api = new SpotifyAPI(authInfo.accessToken, authInfo.retryAuth);\n      setSpotifyAPI(api);\n      SpotifyWebPlayer.createInstance(\n        authInfo.accessToken,\n        api,\n        authInfo.retryAuth\n      ).then((inst) => {\n        setWebPlayer(inst);\n      });\n    }\n  }, [authInfo]);\n\n  const spotifyContext = React.useMemo(\n    () => ({\n      webPlayer,\n      spotifyAPI,\n    }),\n    [webPlayer, spotifyAPI]\n  );\n\n  return (\n    <SpotifyContext.Provider value={spotifyContext}>\n      {children}\n    </SpotifyContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyWebPlayer() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.webPlayer;\n}\n","import React from \"react\";\nimport useSpotifyAPI from \"./useSpotifyAPI.js\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\n\nexport default function SongPlayerWithControls({ song }) {\n  const spotifyAPI = useSpotifyAPI();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [devices, setDevices] = React.useState(null);\n  const [activeDeviceID, setActiveDeviceID] = React.useState(null);\n  const activeDeviceIDRef = React.useRef(null);\n  const [isReady, setIsReady] = React.useState(false);\n  activeDeviceIDRef.current = activeDeviceID;\n\n  const eardrumPlayer = spotifyWebPlayer && {\n    id: spotifyWebPlayer.getDeviceID(),\n    name: \"eardrum.monster\",\n  };\n  const deviceList = devices ?? [];\n  if (\n    eardrumPlayer != null &&\n    !deviceList.find((d) => d.id === eardrumPlayer.id)\n  ) {\n    deviceList.push(eardrumPlayer);\n  }\n\n  // Fetch devices\n  React.useEffect(() => {\n    spotifyAPI &&\n      spotifyAPI.fetchDevices().then((data) => {\n        setDevices(data.devices);\n      });\n  }, [spotifyAPI]);\n\n  // Use web player if there is no active device\n  React.useEffect(() => {\n    if (spotifyAPI && devices) {\n      const activeDevice = devices.find((device) => device.is_active === true);\n      if (activeDevice) {\n        setActiveDeviceID(activeDevice.id);\n        setIsReady(true);\n      } else if (spotifyWebPlayer) {\n        setActiveDeviceID(spotifyWebPlayer.getDeviceID());\n        setIsReady(true);\n      }\n    }\n  }, [spotifyAPI, devices, spotifyWebPlayer]);\n\n  React.useEffect(() => {\n    activeDeviceIDRef.current &&\n      isReady &&\n      spotifyAPI &&\n      spotifyAPI.play(song.spotifyURI, activeDeviceIDRef.current);\n  }, [spotifyAPI, song, isReady]);\n\n  const handleChange = (event) => {\n    const deviceID = event.target.value;\n    spotifyAPI.transferPlayback(deviceID);\n    setActiveDeviceID(deviceID);\n  };\n\n  return (\n    <div className=\"Listen-controls\">\n      <div>Playing on device:</div>\n      <select value={activeDeviceID ?? \"\"} onChange={handleChange}>\n        {deviceList?.map((device) => (\n          <option key={device.id} value={device.id}>\n            {device.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SpotifyContext } from \"./SpotifyContext.js\";\n\nexport default function useSpotifyAPI() {\n  const spotifyContext = React.useContext(SpotifyContext);\n  return spotifyContext?.spotifyAPI;\n}\n","import React from \"react\";\nimport \"./Track.css\";\nimport logo from \"./logo.png\";\n\nfunction Track({ track }) {\n  return (\n    <div className=\"Track\">\n      <img\n        className=\"Track-albumImg\"\n        src={track?.albumImg ?? logo}\n        alt=\"Album art\"\n      />\n      <div className=\"Track-details\">\n        <p className=\"Track-name\">{track?.name ?? \"Unknown\"}</p>\n        <p className=\"Track-artist\">{track?.artistName}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"./Track.js\";\n\nexport default function TrackList({ songs }) {\n  return (\n    <>\n      <h3>Recently played tracks</h3>\n      {songs.map(\n        (song) =>\n          song != null && (\n            <div key={song.id} className=\"Listen-track\">\n              <Track track={song.track} />\n            </div>\n          )\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./EQBars.css\";\n\nexport default function EQBars({ className }) {\n  return (\n    <div className={className}>\n      <div className=\"EQBars-container\">\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n        <ol className=\"EQBars-column\">\n          <li className=\"colour-bar\"></li>\n        </ol>\n      </div>\n    </div>\n  );\n}\n","import type { User, SongEvent } from \"./Types\";\n\nexport function getActiveListeners(users: User[]): User[] {\n  return users.filter((user) => {\n    if (user == null) {\n      return false;\n    }\n    const isOnline =\n      Math.floor(Date.now() / 1000) - (user?.latestListenPing ?? 0) < 30;\n    return isOnline;\n  }) as User[];\n}\n\nexport function isUserOnline(user: User): boolean {\n  if (user == null) {\n    return false;\n  }\n  const latestSongEvent = user.latestSongEvent ?? 0;\n  return Math.floor(Date.now() / 1000) - latestSongEvent < 30;\n}\n\nexport function isUserListening(user: User): boolean {\n  if (user == null) {\n    return false;\n  }\n  const hasRecentPing =\n    Math.floor(Date.now() / 1000) - (user.latestListenPing ?? 0) < 30;\n  return hasRecentPing;\n}\n\nexport function isOnline(songEvents: SongEvent[]): boolean {\n  const mostRecentSongEvent = songEvents && songEvents[0];\n  if (mostRecentSongEvent == null) {\n    return false;\n  }\n  const isOnline =\n    Math.floor(Date.now() / 1000) - mostRecentSongEvent.timestamp <\n    (mostRecentSongEvent.track?.durationMs ?? 0) / 1000 + 60;\n  return isOnline;\n}\n\nexport function getListenerCount(user: User) {\n  return (\n    (user?.listeners?.items ?? []).filter((listener) => {\n      if (listener == null) {\n        return false;\n      }\n      return isUserListening(listener as User);\n    }).length + 1\n  );\n}\n","import React from \"react\";\nimport { Connect } from \"aws-amplify-react\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as queries from \"./graphql/queries\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { getActiveListeners, isUserListening } from \"./Utils\";\nimport \"./Listeners.css\";\n\nimport type { OnUpdateUserSubscription, UsersByListeningToQuery } from \"./API\";\nimport type { User } from \"./Types\";\n\nexport default function Listeners({\n  hostUserID,\n  hostDisplayName,\n  hostUserImg,\n}: {\n  hostUserID: string;\n  hostDisplayName: string;\n  hostUserImg: string;\n}) {\n  const [rerender, setRerender] = React.useState(false);\n\n  // Re-render every 10s to update listeners\n  React.useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      setRerender((r) => !r);\n    }, 10000);\n    return () => {\n      clearTimeout(timeoutID);\n    };\n  }, [rerender]);\n\n  return (\n    <div className=\"Listeners\">\n      <div className=\"Listeners-title\">Listeners</div>\n      <div className=\"Listeners-list\">\n        <Connect\n          query={graphqlOperation(queries.usersByListeningTo, {\n            listeningTo: hostUserID,\n            sortDirection: \"DESC\",\n            limit: 50,\n          })}\n          subscription={graphqlOperation(subscriptions.onUpdateUser, {\n            listeningTo: hostUserID,\n          })}\n          // @ts-ignore\n          onSubscriptionMsg={(\n            prev: UsersByListeningToQuery,\n            data: OnUpdateUserSubscription\n          ) => {\n            const { onUpdateUser } = data;\n            const items = prev.usersByListeningTo?.items;\n            if (items == null || onUpdateUser == null) {\n              console.error(\"unexpected null Listeners\", prev);\n              return prev;\n            }\n            const index = items.findIndex(\n              (user) => user && user.userID === onUpdateUser.userID\n            );\n            const isListening = isUserListening(onUpdateUser);\n            let wasListening = isUserListening(items[index] as User);\n            if (index >= 0) {\n              items[index] = onUpdateUser;\n            } else {\n              items.push(onUpdateUser);\n            }\n            if (isListening && !wasListening) {\n              const audio = new Audio(process.env.PUBLIC_URL + \"/notif.wav\");\n              audio.volume = 0.2;\n              audio.play();\n            }\n            return prev;\n          }}\n        >\n          {({ data, loading, error }: any) => {\n            if (error) return <h3>Error</h3>;\n            if (loading || !data) return <h3>Loading...</h3>;\n            const users =\n              (data.usersByListeningTo && data.usersByListeningTo.items) ?? [];\n            const onlineUsers = getActiveListeners(users);\n            return (\n              <>\n                <div className=\"Listeners-item\">\n                  {hostUserImg && (\n                    <img\n                      className=\"Listeners-userImg\"\n                      src={hostUserImg}\n                      alt={`Profile Pic`}\n                    />\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                  <div>{hostDisplayName} ⭐</div>\n                </div>\n                {onlineUsers.map((user) => {\n                  if (user == null) {\n                    return null;\n                  }\n                  return (\n                    <div className=\"Listeners-item\" key={user.userID}>\n                      {user?.userImg && (\n                        <img\n                          className=\"Listeners-userImg\"\n                          src={user?.userImg}\n                          alt={`Profile Pic`}\n                        />\n                      )}\n                      <span>{user.displayName || user.userID}</span>\n                    </div>\n                  );\n                })}\n              </>\n            );\n          }}\n        </Connect>\n      </div>\n    </div>\n  );\n}\n","// tslint:disable\n// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      track {\n        uri\n        trackID\n        name\n        durationMs\n        albumName\n        artistName\n        albumImg\n      }\n      userID\n      user {\n        userID\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n          }\n          nextToken\n        }\n        listeners {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          nextToken\n        }\n        displayName\n        userImg\n        type\n      }\n      type\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser($listeningTo: String) {\n    onUpdateUser(listeningTo: $listeningTo) {\n      userID\n      latestSongEvent\n      latestListenPing\n      listeningTo\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          track {\n            uri\n            trackID\n            name\n            durationMs\n            albumName\n            artistName\n            albumImg\n          }\n          userID\n          user {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            displayName\n            userImg\n            type\n          }\n          type\n        }\n        nextToken\n      }\n      listeners {\n        items {\n          userID\n          latestSongEvent\n          latestListenPing\n          listeningTo\n          songEvents {\n            nextToken\n          }\n          listeners {\n            nextToken\n          }\n          displayName\n          userImg\n          type\n        }\n        nextToken\n      }\n      displayName\n      userImg\n      type\n    }\n  }\n`;\nexport const onCreateTrack = /* GraphQL */ `\n  subscription OnCreateTrack {\n    onCreateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onUpdateTrack = /* GraphQL */ `\n  subscription OnUpdateTrack {\n    onUpdateTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\nexport const onDeleteTrack = /* GraphQL */ `\n  subscription OnDeleteTrack {\n    onDeleteTrack {\n      uri\n      trackID\n      name\n      durationMs\n      albumName\n      artistName\n      albumImg\n    }\n  }\n`;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Listen.css\";\nimport DevPublisher from \"./DevPublisher.js\";\nimport { AuthContext, getAuthorizeURI } from \"./Auth.js\";\nimport SongPlayerWithControls from \"./SongPlayerWithControls.js\";\nimport TrackList from \"./TrackList.js\";\nimport Track from \"./Track.js\";\nimport EQBars from \"./EQBars.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport Listeners from \"./Listeners\";\nimport { isUserOnline } from \"./Utils\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as mutations from \"./graphql/mutations\";\n\nfunction StartListening({ children, isListening, onClick }) {\n  const location = useLocation();\n  const authInfo = React.useContext(AuthContext);\n\n  if (isListening) {\n    return children;\n  }\n\n  return (\n    <div className=\"Listen-startListening\">\n      <div className=\"Listen-startListeningMask\">{children}</div>\n      <div className=\"Listen-startListeningContent\">\n        <EQBars className=\"Listen-EQ\" />\n      </div>\n      <div className=\"Listen-startListeningContent\">\n        <a className=\"Listen-play\" href={location.pathname} onClick={onClick}>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          👂\n          <span className=\"Listen-playLink\">\n            {authInfo == null ? \"Login to join ▶\" : \"Join ▶\"}\n          </span>\n          {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n          😈\n        </a>\n      </div>\n    </div>\n  );\n}\n\nfunction publishListenPing(userID, hostUserID) {\n  return API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID,\n        latestListenPing: Math.floor(Date.now() / 1000),\n        listeningTo: hostUserID,\n      },\n    })\n  );\n}\n\nfunction fetchHostByDisplayName(hostDisplayName) {\n  return API.graphql(\n    graphqlOperation(queries.usersByDisplayName, {\n      displayName: hostDisplayName,\n      sortDirection: \"DESC\",\n      limit: 1,\n    })\n  ).then((data) => {\n    return data?.data?.usersByDisplayName?.items?.[0];\n  });\n}\n\nfunction ListenPlayer({ isCurrentlyLive, songs, hostUserID, hostDisplayName }) {\n  const authInfo = React.useContext(AuthContext);\n  const location = useLocation();\n  const [isListeningUsername, setIsListeningUsername] = useLocalStorage(\n    \"EMisListeningUsername\"\n  );\n  const isListening = authInfo && hostUserID === isListeningUsername;\n  const NoSleep = window.NoSleep;\n\n  React.useEffect(() => {\n    if (isListening && NoSleep != null) {\n      const noSleep = new NoSleep();\n      noSleep.enable();\n      return () => noSleep.disable();\n    }\n  }, [isListening, NoSleep]);\n\n  React.useEffect(() => {\n    if (isListening && authInfo) {\n      publishListenPing(authInfo.username, hostUserID);\n      const intervalID = setInterval(() => {\n        publishListenPing(authInfo.username, hostUserID);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [isListening, authInfo, hostUserID]);\n\n  const handleJoin = React.useCallback(\n    (e) => {\n      e.preventDefault();\n      setIsListeningUsername(hostUserID);\n      if (authInfo == null) {\n        window.location.href = getAuthorizeURI(location.pathname);\n      }\n    },\n    [setIsListeningUsername, authInfo, location, hostUserID]\n  );\n\n  if (!isCurrentlyLive) {\n    return <h1>offline</h1>;\n  }\n\n  return (\n    <StartListening isListening={isListening} onClick={handleJoin}>\n      {isListening && <p>Listening to {hostDisplayName}'s channel!</p>}\n      {isListening && <SongPlayerWithControls song={songs[0]} />}\n      <div>Now Playing:</div>\n      <Track track={songs[0].track} />\n    </StartListening>\n  );\n}\n\nfunction Listen({ hostDisplayName }) {\n  const location = useLocation();\n  const devPublisherEnabled = location.search.includes(\"DEV=1\");\n  const [hostUserID, setHostUserID] = React.useState(null);\n  const [hostUserImg, setHostUserImg] = React.useState(null);\n  const [failedLookup, setFailedLookup] = React.useState(false);\n\n  //Resolve host username\n  React.useEffect(() => {\n    fetchHostByDisplayName(hostDisplayName)\n      .then((host) => {\n        if (host == null) {\n          throw new Error(\"Could not locate user\");\n        }\n        setHostUserID(host?.userID);\n        setHostUserImg(host?.userImg);\n      })\n      .catch(() => {\n        setFailedLookup(true);\n      });\n  }, [hostDisplayName]);\n\n  if (failedLookup) {\n    return <div className=\"Listen\">User not found</div>;\n  }\n\n  if (hostUserID == null) {\n    return <div className=\"Listen\"></div>;\n  }\n\n  return (\n    <div className=\"Listen\">\n      <Connect\n        query={graphqlOperation(queries.songEventsByUserId, {\n          userID: hostUserID,\n          sortDirection: \"DESC\",\n          limit: 50,\n        })}\n        subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\n          userID: hostUserID,\n        })}\n        onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n          if (prev?.songEventsByUserID?.items == null) {\n            console.error(\"bad state in listen\", prev);\n            return prev;\n          }\n          prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n          if (prev.songEventsByUserID.items.length > 50) {\n            prev.songEventsByUserID.items.pop();\n          }\n          return prev;\n        }}\n      >\n        {({ data, loading, error }) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const songs =\n            (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n          if (songs.length === 0) {\n            return <div>No track history for {hostDisplayName}</div>;\n          }\n          const online = songs.length > 0 && isUserOnline(songs[0].user);\n\n          return (\n            <>\n              {online && (\n                <div className=\"Listen-listeners\">\n                  <Listeners\n                    hostUserID={hostUserID}\n                    hostDisplayName={hostDisplayName}\n                    hostUserImg={hostUserImg}\n                  />\n                </div>\n              )}\n              <div className=\"Listen-trackList\">\n                <div className=\"Listen-header\">\n                  {hostDisplayName}'s Channel\n                  {devPublisherEnabled && (\n                    <DevPublisher hostUserID={hostUserID} />\n                  )}\n                </div>\n                <>\n                  <ListenPlayer\n                    isCurrentlyLive={online}\n                    songs={songs}\n                    hostDisplayName={hostDisplayName}\n                    hostUserID={hostUserID}\n                  />\n                  <TrackList songs={online ? songs.slice(1) : songs} />\n                </>\n              </div>\n            </>\n          );\n        }}\n      </Connect>\n    </div>\n  );\n}\n\nexport default Listen;\n","import React from \"react\";\nimport { AuthContext } from \"./Auth\";\n\nexport type AuthInfo = {\n  username: string;\n  accessToken: string;\n  userImg: string | null;\n  displayName: string | null;\n  setAuthInfo: (authInfo: AuthInfo) => void;\n} | null;\n\nexport default function useSpotifyAPI(): AuthInfo {\n  const authContext = React.useContext(AuthContext);\n  return authContext as AuthInfo;\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport * as mutations from \"./graphql/mutations\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer\";\nimport SpotifyWebPlayer from \"./SpotifyWebPlayer\";\nimport useAuth from \"./useAuth\";\n\nimport type { CreateSongEventInput, CreateTrackInput } from \"./API\";\nimport type { SongEvent } from \"./Types\";\nimport type { SpotifyWebPlayerState } from \"./SpotifyWebPlayerTypes\";\n\nexport type BroadcastPublisherProps = {\n  currentSongEvent: SongEvent;\n  onSongEvent: (songEvent: SongEvent) => void;\n};\n\nfunction publishSongEvent(songEvent: CreateSongEventInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createSongEvent, {\n      input: songEvent,\n    })\n  );\n}\n\nfunction publishBroadcastPing(username: string) {\n  API.graphql(\n    graphqlOperation(mutations.updateUser, {\n      input: {\n        userID: username,\n        latestSongEvent: Math.floor(Date.now() / 1000),\n      },\n    })\n  );\n}\n\nfunction publishTrack(track: CreateTrackInput) {\n  return API.graphql(\n    graphqlOperation(mutations.createTrack, { input: track })\n  ) as Promise<GraphQLResult>;\n}\n\nexport default function BroadcastPublisher({\n  currentSongEvent,\n  onSongEvent,\n}: BroadcastPublisherProps) {\n  const authInfo = useAuth();\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const handlePlayerStateChangedRef = React.useRef<(newState: any) => void>(\n    () => {}\n  );\n  const currentSongEventRef = React.useRef<SongEvent>(currentSongEvent);\n\n  React.useEffect(() => {\n    if (authInfo) {\n      publishBroadcastPing(authInfo.username);\n      const intervalID = setInterval(() => {\n        publishBroadcastPing(authInfo.username);\n      }, 10000);\n      return () => clearInterval(intervalID);\n    }\n  }, [authInfo]);\n\n  const handlePlayerStateChanged = (newState: SpotifyWebPlayerState) => {\n    const newTrack = SpotifyWebPlayer.getTrackFromState(newState);\n    // If there is not a valid track, dont publish\n    if (newTrack == null || authInfo == null) {\n      return;\n    }\n    const isSameTrack =\n      newTrack.uri === currentSongEventRef.current?.spotifyURI;\n    const trackInProgress =\n      currentSongEventRef.current != null &&\n      currentSongEventRef.current.track != null &&\n      currentSongEventRef.current.track.durationMs != null &&\n      Math.floor(Date.now() / 1000) - currentSongEventRef.current.timestamp <\n        currentSongEventRef.current.track.durationMs / 1000 + 60;\n    // Avoid updating if track is the same\n    if (isSameTrack && trackInProgress) {\n      return;\n    }\n    const track = {\n      uri: newTrack.uri,\n      trackID: newTrack.id,\n      name: newTrack.name,\n      durationMs: newTrack.duration_ms,\n      albumName: newTrack.album.name,\n      artistName: newTrack.artists[0].name,\n      albumImg: newTrack.album.images[0].url,\n    };\n    const songEvent = {\n      userID: authInfo.username,\n      timestamp: Math.floor(Date.now() / 1000),\n      position: Math.floor(newState.position ?? 0),\n      spotifyURI: newTrack.uri,\n      type: \"NEW_SONG\",\n    };\n    const localSongEvent = {\n      ...songEvent,\n      __typename: \"SongEvent\" as \"SongEvent\",\n      track: {\n        __typename: \"Track\" as \"Track\",\n        ...track,\n      },\n      id: Math.random().toString(),\n      user: null,\n    };\n    currentSongEventRef.current = localSongEvent;\n    onSongEvent(localSongEvent);\n    publishTrack(track).then(() => {\n      publishSongEvent(songEvent);\n    });\n  };\n  handlePlayerStateChangedRef.current = handlePlayerStateChanged;\n\n  React.useEffect(() => {\n    if (spotifyWebPlayer) {\n      const changeListener = (newState: any) =>\n        handlePlayerStateChangedRef.current(newState);\n      const initFunc = {\n        current: (id: any) => {\n          if (id === spotifyWebPlayer.getDeviceID()) {\n            // Request current state\n            spotifyWebPlayer.fetchState().then((newState: any) => {\n              handlePlayerStateChangedRef.current(newState);\n            });\n            spotifyWebPlayer.resume();\n          } else {\n            // Transfer playback to the web player\n            spotifyWebPlayer.transferPlayback();\n          }\n        },\n      };\n      // Subscribe to future changes\n      spotifyWebPlayer.addStateChangeListener(changeListener);\n\n      // get current state or transfer playback\n      spotifyWebPlayer.spotifyAPI.fetchCurrentDeviceID().then((id: any) => {\n        initFunc.current(id);\n      });\n\n      // Remove the listener on unMount\n      return () => {\n        spotifyWebPlayer.removeStateChangeListener(changeListener);\n        initFunc.current = () => {};\n        spotifyWebPlayer.pause();\n      };\n    }\n  }, [spotifyWebPlayer, handlePlayerStateChangedRef]);\n\n  return null;\n}\n","import React from \"react\";\nimport Switch from \"react-switch\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\n\nexport default function PowerHourControl() {\n  const [phEnabled, setPhEnabled] = useLocalStorage(\"EMPhEnabled\", false);\n  const [phCount, setPhCount] = useLocalStorage(\"EMPhCount\", 1);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const phCallbackRef = React.useRef();\n\n  const phCallback = (timeoutID) => {\n    if (phEnabled) {\n      spotifyWebPlayer.nextTrack();\n      setPhCount(phCount + 1);\n    } else {\n      clearInterval(timeoutID);\n    }\n  };\n  phCallbackRef.current = phCallback;\n\n  const handleChange = React.useCallback(\n    (enabled) => {\n      setPhEnabled(enabled);\n      if (enabled) {\n        setPhCount(1);\n        spotifyWebPlayer && spotifyWebPlayer.nextTrack();\n      }\n    },\n    [setPhEnabled, setPhCount, spotifyWebPlayer]\n  );\n\n  React.useEffect(() => {\n    if (phEnabled && spotifyWebPlayer) {\n      const timeoutID = setInterval(() => {\n        phCallbackRef.current(timeoutID);\n      }, 60000);\n      return () => {\n        clearInterval(timeoutID);\n      };\n    }\n  }, [phEnabled, spotifyWebPlayer, phCallbackRef]);\n\n  return (\n    <>\n      <div className=\"Broadcast-controls\">\n        <label htmlFor=\"phToggle\">Power hour mode</label>\n        <Switch\n          className=\"Broadcast-switch\"\n          id=\"phToggle\"\n          onChange={handleChange}\n          checked={phEnabled}\n        />\n      </div>\n      {phEnabled && <h1>{phCount}</h1>}\n    </>\n  );\n}\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"./graphql/queries\";\nimport useSpotifyWebPlayer from \"./useSpotifyWebPlayer.js\";\nimport Track from \"./Track.js\";\nimport TrackList from \"./TrackList.js\";\nimport \"./Broadcast.css\";\nimport { AuthContext } from \"./Auth.js\";\nimport BroadcastPublisher from \"./BroadcastPublisher\";\nimport PowerHourControl from \"./PowerHourControl.js\";\nimport EQBars from \"./EQBars.js\";\nimport Listeners from \"./Listeners\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nfunction Broadcast() {\n  const authInfo = React.useContext(AuthContext);\n  const [songHistory, setSongHistory] = React.useState(null);\n  const spotifyWebPlayer = useSpotifyWebPlayer();\n  const [copied, setCopied] = React.useState(false);\n\n  const handleSongEvent = React.useCallback(\n    (songEvent) => {\n      setSongHistory((h) => [songEvent].concat(h));\n    },\n    [setSongHistory]\n  );\n\n  React.useEffect(() => {\n    if (authInfo) {\n      API.graphql(\n        graphqlOperation(queries.songEventsByUserId, {\n          userID: authInfo.username,\n          sortDirection: \"DESC\",\n          limit: 10,\n        })\n      ).then((response) => {\n        setSongHistory(response.data?.songEventsByUserID?.items ?? []);\n      });\n    }\n  }, [authInfo]);\n\n  React.useEffect(() => {\n    if (copied) {\n      const timeoutID = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n      return () => clearTimeout(timeoutID);\n    }\n  }, [copied]);\n\n  if (authInfo == null) {\n    return <div>Login to spotify to set the eardrum monster free</div>;\n  }\n\n  const trackList =\n    songHistory == null ? null : (\n      <div className=\"Broadcast-history\">\n        <TrackList songs={songHistory.slice(1)} />\n      </div>\n    );\n\n  const shareURI = `https://eardrum.monster/u/${authInfo.displayName}`;\n\n  const player =\n    spotifyWebPlayer == null || songHistory == null ? (\n      <div>Initializing Spotify web player...</div>\n    ) : (\n      <>\n        <div className=\"Broadcast-title\">{authInfo.displayName}'s channel</div>\n        <div className=\"Broadcast-text\">You are the DJ.</div>\n        <div className=\"Broadcast-text\">\n          <div>1. Control your spotify like normal to change the music</div>\n          <div>2. keep this page open to continue streaming</div>\n        </div>\n        <div className=\"Broadcast-text\">\n          Share this URL to add listeners:\n          <input value={shareURI} disabled size={shareURI.length} />\n          <button>\n            <CopyToClipboard\n              text={`https://eardrum.monster/u/${authInfo.displayName}`}\n              onCopy={() => {\n                setCopied(true);\n              }}\n            >\n              <span>{copied ? \"Copied!\" : \"Copy\"}</span>\n            </CopyToClipboard>\n          </button>\n        </div>\n        <PowerHourControl />\n        <EQBars className=\"Broadcast-streaming\" />\n        <p>Now playing:</p>\n        <div className=\"Broadcast-currentTrack\">\n          <BroadcastPublisher\n            currentSongEvent={songHistory[0]}\n            onSongEvent={handleSongEvent}\n          />\n          <Track track={songHistory[0]?.track} />\n        </div>\n      </>\n    );\n\n  return (\n    <div className=\"Broadcast\">\n      <div className=\"Broadcast-listeners\">\n        <Listeners\n          hostUserID={authInfo.username}\n          hostDisplayName={authInfo.displayName}\n          hostUserImg={authInfo.userImg}\n        />\n      </div>\n      <div className=\"Broadcast-player\">\n        {player}\n        {trackList}\n      </div>\n    </div>\n  );\n}\n\nexport default Broadcast;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Listen from \"./Listen.js\";\nimport Broadcast from \"./Broadcast.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nfunction Channel() {\n  const authInfo = React.useContext(AuthContext);\n  const { id } = useParams();\n\n  if (authInfo?.displayName === id) {\n    return <Broadcast />;\n  }\n\n  return <Listen hostDisplayName={id} />;\n}\n\nexport default Channel;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport \"./Home.css\";\n// import { AuthContext } from \"./Auth.js\";\nimport * as queries from \"./graphql/customQueries\";\n// import EQBars from \"./EQBars.js\";\n// import useAuth from \"./useAuth\";\nimport logo from \"./logo.png\";\nimport { isUserOnline, getListenerCount } from \"./Utils\";\n\nimport type { User } from \"./Types\";\n\nfunction Channel({\n  img,\n  cta,\n  title,\n  subtitle,\n}: {\n  img: string | null;\n  title: string;\n  subtitle: string;\n  cta: React.ReactNode;\n}) {\n  return (\n    <div className=\"Home-user\">\n      <div className=\"Home-userTitle\">{title}</div>\n      <div className=\"Home-userSubtitle\">{subtitle}</div>\n      <img className=\"Home-userImg\" src={img ?? logo} alt=\"Album art\" />\n      {cta}\n    </div>\n  );\n}\n\nexport default function ChannelList() {\n  return (\n    <div className=\"ChannelList\">\n      <h2 className=\"Home-title\">\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n        😈 Users currently streaming 😈\n      </h2>\n      <Connect\n        query={graphqlOperation(queries.usersByLatestSongEventCustom, {\n          type: \"USER\",\n          sortDirection: \"DESC\",\n          limit: 50,\n        })}\n      >\n        {({ data, loading, error }: any) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const users =\n            (data.usersByLatestSongEvent &&\n              data.usersByLatestSongEvent.items) ??\n            [];\n          const onlineUsers = users\n            .filter((user: User) => isUserOnline(user))\n            .sort((a: User, b: User) =>\n              getListenerCount(a) > getListenerCount(b) ? -1 : 1\n            );\n          return (\n            <div className=\"Home-userList\">\n              {onlineUsers.map((user: User) => {\n                if (user == null) {\n                  return null;\n                }\n                const latestSong = user.songEvents?.items?.[0];\n                const img = latestSong?.track?.albumImg ?? null;\n                const numListeners = getListenerCount(user);\n                return (\n                  <Channel\n                    key={user.userID}\n                    img={img}\n                    title={user.displayName || user.userID}\n                    subtitle={`${numListeners} ${\n                      numListeners === 1 ? \"listener\" : \"listeners\"\n                    }`}\n                    cta={\n                      <Link\n                        className=\"Home-link\"\n                        to={`/u/${user.displayName || user.userID}`}\n                      >\n                        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                        Join ▶️\n                      </Link>\n                    }\n                  />\n                );\n              })}\n              <Channel\n                img={null}\n                title=\"Start a channel\"\n                subtitle=\"\"\n                cta={\n                  <Link className=\"Home-link\" to={`/broadcast`}>\n                    My channel\n                  </Link>\n                }\n              />\n            </div>\n          );\n        }}\n      </Connect>\n    </div>\n  );\n}\n","export const usersByLatestSongEventCustom = /* GraphQL */ `\n  query UsersByLatestSongEventCustom(\n    $type: String\n    $latestSongEvent: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    usersByLatestSongEvent(\n      type: $type\n      latestSongEvent: $latestSongEvent\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        userID\n        displayName\n        userImg\n        latestSongEvent\n        latestListenPing\n        listeningTo\n        songEvents(sortDirection: DESC) {\n          items {\n            id\n            spotifyURI\n            timestamp\n            position\n            userID\n            type\n            track {\n              durationMs\n              name\n              albumName\n              albumImg\n            }\n          }\n          nextToken\n        }\n        listeners(sortDirection: DESC) {\n          items {\n            userID\n            latestSongEvent\n            latestListenPing\n            listeningTo\n            type\n          }\n          nextToken\n        }\n        type\n      }\n      nextToken\n    }\n  }\n`;\n","import React from \"react\";\nimport \"./Home.css\";\nimport ChannelList from \"./ChannelList\";\n\nfunction Home() {\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <div className=\"Home\">\n      <div>\n        <em>\n          eardrum.monster allows you to sync your spotify client with friends\n        </em>\n      </div>\n      <div className=\"Home-list\">\n        <ChannelList />\n      </div>\n      <div className=\"Home-content\">\n        <h1>How do I use it?</h1>\n        <div>1. Join a channel or create your own ☝️</div>\n        <div>2. Share the URL with your friends️</div>\n        <h1>Its great for:</h1>\n        <div>\n          ✅ Streamers who want to let their viewers sync up their music with\n          high quality spotify audio\n        </div>\n        <div>✅ Online gamers who want listen together while gaming</div>\n        <div>\n          ✅ People who are quarantined and want to have virtual power hours\n          together\n        </div>\n\n        <h1>Did you say power hour?</h1>\n        <div>\n          ✅ Yes! eardrum.monster now features <em>Power hour mode™️</em> that\n          will automatically change the song every 60s. Everybody must drink\n          when the song changes.\n        </div>\n\n        <h1>Can I play century club?</h1>\n        <div>\n          ✅ We've got you covered! <em>Power hour mode™️</em> will keep em'\n          coming well beyond the traditional 60 minutes so you can attempt to\n          join the century club as many times as you want!\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { getAuthorizeURI } from \"./Auth\";\n\nexport default function RedirectToLoginOrBroadcast() {\n  const location = useLocation();\n  const authInfo = useAuth();\n  if (authInfo) {\n    return <Redirect to={`/u/${authInfo.displayName}`} />;\n  }\n  window.location.href = getAuthorizeURI(location.pathname);\n  return null;\n}\n","import React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport * as queries from \"./graphql/queries\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction updateDisplayName(userID: string, displayName: string) {\n  return (API.graphql(\n    graphqlOperation(queries.usersByDisplayName, {\n      displayName,\n    })\n  ) as Promise<GraphQLResult>)\n    .then((data: any) => {\n      const user = data?.data?.usersByDisplayName?.items?.[0];\n      if (user != null) {\n        throw new Error(\"Username exists\");\n      }\n    })\n    .then(() => {\n      return API.graphql(\n        graphqlOperation(mutations.updateUser, {\n          input: {\n            userID,\n            displayName,\n          },\n        })\n      ) as Promise<GraphQLResult>;\n    }) as Promise<GraphQLResult>;\n}\n\nexport default function RedirectToLoginOrBroadcast() {\n  const [val, setVal] = React.useState(\"\");\n  const [success, setSuccess] = React.useState<boolean | null>(null);\n  const authInfo = useAuth();\n  const history = useHistory();\n\n  const handleUpdate = (e: any) => {\n    setVal(e.target.value);\n  };\n\n  const updateName = (event: any) => {\n    if (authInfo == null) {\n      return;\n    }\n    event.preventDefault();\n    updateDisplayName(authInfo.username, val)\n      .then(() => {\n        setSuccess(true);\n        authInfo.setAuthInfo({ ...authInfo, displayName: val });\n        history.replace(`/u/${val}`);\n      })\n      .catch(() => {\n        setSuccess(false);\n      });\n  };\n\n  return (\n    <div className=\"App-container\">\n      <form onSubmit={updateName}>\n        <label>New Username:</label>\n        <input value={val} onChange={handleUpdate} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      {success === null ? null : success === false ? \"Error\" : \"Success!\"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport Channel from \"./Channel.js\";\nimport Home from \"./Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AuthProvider, AuthRedirect } from \"./Auth.js\";\nimport { SpotifyProvider } from \"./SpotifyContext.js\";\nimport RedirectToLoginOrBroadcast from \"./RedirectToLoginOrBroadcast\";\nimport ChangeUsername from \"./ChangeUsername\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AuthProvider>\n          <SpotifyProvider>\n            <Header />\n            <div className=\"App-content\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/auth/\">\n                  <AuthRedirect />\n                </Route>\n                <Route path=\"/u/:id\">\n                  <Channel />\n                </Route>\n                <Route path=\"/broadcast\">\n                  <RedirectToLoginOrBroadcast />\n                </Route>\n                <Route path=\"/premium_required\">\n                  {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n                  <div className=\"App-msg\">\n                    Error: Spotify premium required for syncing with\n                    eardrum.monster 😞\n                  </div>\n                </Route>\n                <Route path=\"/change_username\">\n                  <ChangeUsername />\n                </Route>\n              </Switch>\n            </div>\n          </SpotifyProvider>\n        </AuthProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-jxgfvq7zzvacfozrt7vucdiipq\"\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport awsconfig from \"./aws-exports\";\nimport Amplify from \"aws-amplify\";\n\nAmplify.configure(awsconfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";"],"sourceRoot":""}