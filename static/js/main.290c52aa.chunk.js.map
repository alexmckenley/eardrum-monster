{"version":3,"sources":["logo.png","spotify.js","Header.js","MaybeUpdateAccessToken.js","graphql/mutations.js","Listen.js","graphql/queries.js","graphql/subscriptions.js","Broadcast.js","Channel.js","Home.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SpotifyClient","accessToken","this","freshAccessToken","player","getCurrentState","console","error","Promise","reject","state","newUri","spotifyURI","fetchState","then","currentState","getUriFromState","play","Math","abs","position","seek","pause","ms","nextTrack","uri","fetch","deviceId","method","body","JSON","stringify","uris","headers","Authorization","response","ok","callback","addListener","newSong","getTrackFromState","newSongUri","currentSongUri","newState","resolve","window","onSpotifyWebPlaybackSDKReady","initializePlayer","sdkScript","document","createElement","src","appendChild","Spotify","Player","name","getOAuthToken","fetchOauthToken","bind","volume","on","message","id","device_id","device_ids","connect","success","status","json","data","device","track_window","current_track","type","Header","clearAccessToken","username","redirectURI","encodeURIComponent","process","authorizeURI","className","to","logo","alt","href","onClick","e","preventDefault","MaybeUpdateAccessToken","setAccessToken","React","useEffect","location","hash","params","slice","split","map","param","forEach","tup","access_token","createSongEvent","ListView","songs","song","key","PlaySong","spotify","useState","deviceID","setDeviceID","fetchCurrentDeviceId","setDeviceId","prepareSpotifyClient","handleNewState","DevPublisher","hostUsername","timeoutID","setInterval","songEvent","userID","timestamp","floor","Date","now","random","toString","API","graphql","graphqlOperation","mutations","input","log","clearInterval","Listen","devPublisherEnabled","search","includes","Connect","query","sortDirection","subscription","onSubscriptionMsg","prev","onCreateSongEvent","songEventsByUserID","items","unshift","length","pop","loading","Broadcast","phEnabled","setPhEnabled","phCount","setPhCount","currentSong","setCurrentSong","phEnabledRef","useRef","phCountRef","current","catch","onPlayerStateChanged","onChange","checked","Channel","useParams","Home","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","awsconfig","App","storedToken","localStorage","getItem","storedUsername","setAccessTokenRaw","setUsernameRaw","setSpotify","removeItem","spotifyInst","fetchUserInfo","user","setItem","setUsername","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.290c52aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86828523.png\";","export default class SpotifyClient {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n    this.freshAccessToken = true;\n    this.player = null;\n  }\n\n  /**\n   * Fetches the current Spotify status.\n   * Resolves instantly with default params. (No long polling)\n   * @params - Query params that can add/overwrite default params.\n   * @returns { Promise } - Spotify status\n   */\n  fetchState() {\n    if (!this.player) {\n      console.error(\"Player not initialized\");\n      return Promise.reject(\"player not initialized\");\n    }\n\n    return this.player.getCurrentState();\n  }\n\n  // TODO Mejorar esta funcion\n  /**\n   * Handles a new state by pausing/playing/seeking depending on current status\n   * @param state\n   */\n  handleNewState(state) {\n    const newUri = state.spotifyURI;\n\n    if (this.player) {\n      // We're using the web player\n      this.fetchState().then((currentState) => {\n        const currentUri = SpotifyClient.getUriFromState(currentState);\n        if (currentUri === newUri) {\n          if (Math.abs(state.position - currentState.position) > 10000) {\n            this.seek(state.position);\n          }\n          return;\n        }\n        this.play(newUri);\n      });\n    } else {\n      // We arent using the web player\n      this.play(newUri);\n    }\n  }\n\n  /**\n   * Pause Spotify client\n   * @returns { Promise } - Spotify Status\n   */\n  pause() {\n    return this.player.pause();\n  }\n\n  seek(ms) {\n    return this.player.seek(ms);\n  }\n\n  nextTrack() {\n    return this.player.nextTrack();\n  }\n\n  /**\n   * Play a song given a uri and seek to seconds (optional)\n   * We have to call pause() initially because calling play with the same song errors out\n   * @param uri - Track uri\n   * @param seconds - Seconds where the player should seek to\n   * @returns { Promise } - Spotify Status\n   */\n  play(uri) {\n    return fetch(\n      `https://api.spotify.com/v1/me/player/play?device_id=${this.deviceId}`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify({ uris: [uri] }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.accessToken}`,\n        },\n      }\n    ).then((response) => {\n      if (!response.ok) {\n        console.error(\"error playing uri\");\n      }\n      // DISPATCH HERE\n      //   return store.dispatch(\n      //     `channel/${channelActionTypes.SET_IS_PLAYING}`,\n      //     true,\n      //   );\n    });\n  }\n\n  /**\n   * Sets polling query params and calls fetchStatus\n   * This is a long polling implementation with Spotify's client which\n   * resolves when play/pause/seek or after 60 seconds\n   */\n  onPlayerStateChanged(callback) {\n    this.player.addListener(\"player_state_changed\", (state) => {\n      let newSong = SpotifyClient.getTrackFromState(state);\n      const newSongUri = SpotifyClient.getUriFromState(state);\n\n      if (newSongUri === this.currentSongUri) {\n        newSong = null;\n      }\n\n      this.currentSongUri = newSongUri;\n\n      callback({\n        newState: state,\n        newSong,\n      });\n    });\n  }\n\n  prepareSpotifyClient() {\n    return new Promise((resolve) => {\n      if (this.player) {\n        resolve();\n        return;\n      }\n\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        this.initializePlayer().then(resolve);\n      };\n\n      const sdkScript = document.createElement(\"script\");\n      sdkScript.src = \"https://sdk.scdn.co/spotify-player.js\";\n      document.body.appendChild(sdkScript);\n    });\n  }\n\n  initializePlayer() {\n    return new Promise((resolve) => {\n      this.player = new window.Spotify.Player({\n        name: \"eardrum.monster\",\n        getOAuthToken: this.fetchOauthToken.bind(this),\n        volume: 0.1,\n      });\n\n      this.player.on(\"initialization_error\", ({ message }) => {\n        console.error(\"Failed to initialize\", message);\n      });\n      this.player.on(\"authentication_error\", ({ message }) => {\n        console.error(\"Failed to authenticate\", message);\n      });\n      this.player.on(\"account_error\", ({ message }) => {\n        console.error(\"Failed to validate Spotify account\", message);\n      });\n      this.player.on(\"playback_error\", ({ message }) => {\n        console.error(\"Failed to perform playback\", message);\n      });\n      this.player.on(\"ready\", ({ device_id: id }) => {\n        // Transfer playback to web player\n        this.deviceId = id;\n        fetch(\"https://api.spotify.com/v1/me/player\", {\n          method: \"PUT\",\n          body: JSON.stringify({ device_ids: [this.deviceId], play: true }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.accessToken}`,\n          },\n        }).then((response) => {\n          if (response.ok) {\n            resolve();\n          } else {\n            console.error(\"unable to transfer playback to web player\");\n          }\n        });\n      });\n\n      this.player.connect().then((success) => {\n        if (!success) {\n          console.error(\"Failed to connect to the web player\");\n        }\n      });\n    });\n  }\n\n  /**\n   * Fetch and set Spotify's Oauth token needed to authenticate requests\n   * @returns {Promise.<*>}\n   * @private\n   */\n  fetchOauthToken(callback) {\n    if (this.freshAccessToken) {\n      callback(this.accessToken);\n    } else {\n      // TODO: Fetch a new access token from the server\n      console.error(\"fetchOauthToken called more than once\");\n      callback(this.accessToken);\n    }\n  }\n\n  static getTrackFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track;\n    }\n\n    return null;\n  }\n\n  static getUriFromState(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.uri;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns if a given status is an Ad\n   * @param state\n   * @returns { boolean } - true if the track is an ad, false otherwise\n   */\n  static isAd(state) {\n    if (state && state.track_window && state.track_window.current_track) {\n      return state.track_window.current_track.type === \"ad\";\n    }\n\n    return false;\n  }\n\n  fetchCurrentDeviceId() {\n    return fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          console.error(\"error fetching device id\");\n        }\n        if (response.status === 204) {\n          return {};\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data.device && data.device.id) {\n          return data.device.id;\n        }\n        return null;\n      });\n  }\n\n  fetchUserInfo() {\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.accessToken}`,\n      },\n    }).then((response) => {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.json();\n    });\n  }\n\n  setDeviceId(id) {\n    this.deviceId = id;\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header({ accessToken, clearAccessToken, username }) {\n  const clientID = \"d73f9dfa97c44b57ac7cefcc031c4df9\";\n  const scopes =\n    \"streaming+user-read-email+user-read-private+user-read-playback-state+user-modify-playback-state+user-read-currently-playing\";\n  const redirectURI = encodeURIComponent(\n    process.env.REACT_APP_SPOTIFY_REDIRECT_URI\n  );\n  const authorizeURI = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${scopes}&redirect_uri=${redirectURI}`;\n\n  function handleLogout(e) {\n    e.preventDefault();\n    clearAccessToken();\n  }\n\n  return (\n    <header className=\"App-header\">\n      <Link className=\"App-title\" to=\"/\">\n        <h1>EARDRUM MONSTER</h1>\n      </Link>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      {accessToken != null ? (\n        <>\n          <Link className=\"App-link\" to={`/u/${username}`}>\n            /u/{username}\n          </Link>\n          {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n          <a className=\"App-link\" href=\"#\" onClick={handleLogout}>\n            Logout\n          </a>\n        </>\n      ) : (\n        <a className=\"App-link\" href={authorizeURI}>\n          Login with Spotify\n        </a>\n      )}\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction MaybeUpdateAccessToken({ setAccessToken }) {\n  React.useEffect(() => {\n    if (window.location.hash) {\n      const params = {};\n      window.location.hash\n        .slice(1)\n        .split(\"&\")\n        .map((param) => param.split(\"=\"))\n        .forEach((tup) => {\n          params[tup[0]] = tup[1];\n        });\n      const accessToken = params.access_token;\n      window.location.hash = \"\";\n      setAccessToken(accessToken);\n    }\n  });\n  return null;\n}\n\nexport default MaybeUpdateAccessToken;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const createSongEvent = /* GraphQL */ `\n  mutation CreateSongEvent(\n    $input: CreateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    createSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const updateSongEvent = /* GraphQL */ `\n  mutation UpdateSongEvent(\n    $input: UpdateSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    updateSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const deleteSongEvent = /* GraphQL */ `\n  mutation DeleteSongEvent(\n    $input: DeleteSongEventInput!\n    $condition: ModelSongEventConditionInput\n  ) {\n    deleteSongEvent(input: $input, condition: $condition) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as subscriptions from \"./graphql/subscriptions\";\nimport * as mutations from \"./graphql/mutations\";\n\nconst ListView = ({ songs }) => (\n  <div>\n    <h3>Recently played</h3>\n    <ul>\n      {songs.map((song) => (\n        <li key={song.id}>{song.spotifyURI}</li>\n      ))}\n    </ul>\n  </div>\n);\n\nfunction PlaySong({ song, spotify }) {\n  const [deviceID, setDeviceID] = React.useState(null);\n  React.useEffect(() => {\n    if (spotify) {\n      spotify\n        .fetchCurrentDeviceId()\n        .then((id) => {\n          if (id) {\n            return spotify.setDeviceId(id);\n          }\n          return spotify.prepareSpotifyClient();\n        })\n        .then(() => setDeviceID(spotify.deviceId));\n    }\n  }, [spotify]);\n\n  React.useEffect(() => {\n    spotify && song && deviceID && spotify.handleNewState(song);\n  }, [song, deviceID, spotify]);\n  return null;\n}\n\nfunction DevPublisher({ hostUsername }) {\n  React.useEffect(() => {\n    const timeoutID = setInterval(() => {\n      const tracks = [\n        \"spotify:track:08KMh61hPslT7sEf2tEgtT\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:59nNxS2V7M4UDH058BU5qJ\",\n        \"spotify:track:1CkrhTdtRhUzPmA8qtr6y6\",\n        \"spotify:track:4mFDsq9pt9msJ9ywYvBzHo\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:000PzErbB04ALQCv9iYiQm\",\n        \"spotify:track:6AynxUt8LJy9S6bovDdFLr\",\n        \"spotify:track:7JGepQzDnQDYeGxLCTBSsG\",\n        \"spotify:track:4PPrsYpzuRqe4QoCDGAG4b\",\n      ];\n      const songEvent = {\n        userID: hostUsername,\n        timestamp: Math.floor(Date.now() / 100),\n        position: 0,\n        spotifyURI: tracks[(Math.random() * 100).toString()[0]],\n      };\n      API.graphql(\n        graphqlOperation(mutations.createSongEvent, { input: songEvent })\n      ).then((data) => console.log(\"Publishing: \", data));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeoutID);\n    };\n  }, [hostUsername]);\n  return <h1>DevPublisher enabled</h1>;\n}\n\nfunction Listen({ username, hostUsername, spotify }) {\n  const devPublisherEnabled = window.location.search.includes(\"DEV=1\");\n  return (\n    <>\n      {username != null ? (\n        <div>Listening to {hostUsername}'s channel!</div>\n      ) : (\n        <div>Login to spotify to set the eardrum monster free</div>\n      )}\n\n      {devPublisherEnabled && <DevPublisher hostUsername={hostUsername} />}\n\n      <Connect\n        query={graphqlOperation(queries.songEventsByUserId, {\n          userID: hostUsername,\n          sortDirection: \"DESC\",\n        })}\n        subscription={graphqlOperation(subscriptions.onCreateSongEvent, {\n          userID: hostUsername,\n        })}\n        onSubscriptionMsg={(prev, { onCreateSongEvent }) => {\n          prev.songEventsByUserID.items.unshift(onCreateSongEvent);\n          if (prev.songEventsByUserID.items.length > 50) {\n            prev.songEventsByUserID.items.pop();\n          }\n          return prev;\n        }}\n      >\n        {({ data, loading, error }) => {\n          if (error) return <h3>Error</h3>;\n          if (loading || !data) return <h3>Loading...</h3>;\n          const songs =\n            (data.songEventsByUserID && data.songEventsByUserID.items) ?? [];\n          return (\n            <>\n              <PlaySong song={songs[0]} spotify={spotify} />\n              <ListView songs={songs} />\n            </>\n          );\n        }}\n      </Connect>\n    </>\n  );\n}\n\nexport default Listen;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($userID: String!) {\n    getUser(userID: $userID) {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $userID: String\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      userID: $userID\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSongEvent = /* GraphQL */ `\n  query GetSongEvent($id: ID!) {\n    getSongEvent(id: $id) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const listSongEvents = /* GraphQL */ `\n  query ListSongEvents(\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSongEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        userID\n        user {\n          userID\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const songEventsByUserId = /* GraphQL */ `\n  query SongEventsByUserId(\n    $userID: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSongEventFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    songEventsByUserID(\n      userID: $userID\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        spotifyURI\n        timestamp\n        position\n        userID\n        user {\n          userID\n        }\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateSongEvent = /* GraphQL */ `\n  subscription OnCreateSongEvent($userID: String!) {\n    onCreateSongEvent(userID: $userID) {\n      id\n      spotifyURI\n      timestamp\n      position\n      userID\n      user {\n        userID\n        songEvents {\n          nextToken\n        }\n      }\n    }\n  }\n`;\nexport const onCreateUser = /* GraphQL */ `\n  subscription OnCreateUser {\n    onCreateUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser {\n    onUpdateUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\nexport const onDeleteUser = /* GraphQL */ `\n  subscription OnDeleteUser {\n    onDeleteUser {\n      userID\n      songEvents {\n        items {\n          id\n          spotifyURI\n          timestamp\n          position\n          userID\n        }\n        nextToken\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"./graphql/mutations\";\nimport Switch from \"react-switch\";\nimport SpotifyClient from \"./spotify.js\";\n\nfunction Broadcast({ username, spotify }) {\n  const [phEnabled, setPhEnabled] = React.useState(false);\n  const [phCount, setPhCount] = React.useState(1);\n  const [currentSong, setCurrentSong] = React.useState(null);\n  const phEnabledRef = React.useRef(phEnabled);\n  const phCountRef = React.useRef(phCount);\n  phEnabledRef.current = phEnabled;\n  phCountRef.current = phCount;\n  // Ensure the user is created on mount\n  React.useEffect(() => {\n    if (username) {\n      API.graphql(\n        graphqlOperation(mutations.createUser, {\n          input: {\n            userID: username,\n          },\n        })\n      ).catch(() => console.error(\"user creation failed\"));\n    }\n  }, [username]);\n\n  // initialize spotify web player\n  React.useEffect(() => {\n    if (spotify && username) {\n      spotify.prepareSpotifyClient().then(() => {\n        spotify\n          .fetchState()\n          .then((currentState) =>\n            setCurrentSong(SpotifyClient.getUriFromState(currentState))\n          );\n        spotify.onPlayerStateChanged((data) => {\n          if (data.newSong != null) {\n            const songEvent = {\n              userID: username,\n              timestamp: Math.floor(Date.now() / 100),\n              position: data.newState.position ?? 0,\n              spotifyURI: data.newSong.uri,\n            };\n            API.graphql(\n              graphqlOperation(mutations.createSongEvent, { input: songEvent })\n            );\n            setCurrentSong(data.newSong.uri);\n          }\n        });\n      });\n    }\n  }, [spotify, username]);\n\n  React.useEffect(() => {\n    if (phEnabled && spotify) {\n      spotify.nextTrack();\n      const timeoutID = setInterval(() => {\n        if (phEnabledRef.current) {\n          setPhCount(phCountRef.current + 1);\n          spotify.nextTrack();\n        } else {\n          clearInterval(timeoutID);\n          setPhCount(1);\n        }\n      }, 60000);\n    }\n  }, [phEnabled, phEnabledRef, spotify]);\n\n  if (username == null) {\n    return <div>Login to spotify to set the eardrum monster free</div>;\n  }\n\n  if (spotify == null) {\n    return <div>Initializing spotify web player...</div>;\n  }\n\n  return (\n    <>\n      <label>\n        <span>Power hour mode enabled</span>\n        <Switch onChange={setPhEnabled} checked={phEnabled} />\n      </label>\n      {phEnabled && <h1>{phCount}</h1>}\n      <div>broadcasting: {currentSong}</div>\n    </>\n  );\n}\n\nexport default Broadcast;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Listen from \"./Listen.js\";\nimport Broadcast from \"./Broadcast.js\";\n\nfunction Channel({ username, spotify }) {\n  const { id } = useParams();\n\n  if (username === id) {\n    return <Broadcast username={username} spotify={spotify} />;\n  }\n\n  return <Listen username={username} hostUsername={id} spotify={spotify} />;\n}\n\nexport default Channel;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home({ username }) {\n  return (\n    <div>\n      <h2>Currently broadcasting:</h2>\n      <ul>\n        {username != null ? (\n          <li>\n            <Link className=\"App-link\" to={`/u/${username}`}>\n              /u/{username}\n            </Link>\n          </li>\n        ) : null}\n        <li>\n          <Link to=\"/u/alta\">/u/alta</Link>\n        </li>\n        <li>\n          <Link to=\"/u/hajkowicz\">/u/hajkowicz</Link>\n        </li>\n        <li>\n          <Link to=\"/u/cilo\">/u/cilo</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Home;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n  aws_project_region: \"us-east-1\",\n  aws_appsync_graphqlEndpoint:\n    \"https://kponrlcw6jap7j62gb56h2abf4.appsync-api.us-east-1.amazonaws.com/graphql\",\n  aws_appsync_region: \"us-east-1\",\n  aws_appsync_authenticationType: \"API_KEY\",\n  aws_appsync_apiKey: \"da2-jxgfvq7zzvacfozrt7vucdiipq\",\n};\n\nexport default awsmobile;\n","import React from \"react\";\nimport \"./App.css\";\nimport SpotifyClient from \"./spotify.js\";\nimport Header from \"./Header.js\";\nimport MaybeUpdateAccessToken from \"./MaybeUpdateAccessToken.js\";\nimport Channel from \"./Channel.js\";\nimport Home from \"./Home.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport awsconfig from \"./aws-exports\";\nimport Amplify from \"aws-amplify\";\n\nAmplify.configure(awsconfig);\n\nfunction App() {\n  const storedToken = window.localStorage.getItem(\"spotifyAccessToken\");\n  const storedUsername = window.localStorage.getItem(\"spotifyUsername\");\n  const [accessToken, setAccessTokenRaw] = React.useState(storedToken);\n  const [username, setUsernameRaw] = React.useState(storedUsername);\n  const [spotify, setSpotify] = React.useState(null);\n\n  React.useEffect(() => {\n    if (accessToken) {\n      const spotifyInst = new SpotifyClient(accessToken);\n      setSpotify(spotifyInst);\n      spotifyInst\n        .fetchUserInfo()\n        .then((user) => {\n          setUsername(user.id);\n        })\n        .catch(() => {\n          clearAccessToken();\n        });\n    }\n  }, [accessToken]);\n\n  function clearAccessToken() {\n    window.localStorage.removeItem(\"spotifyAccessToken\");\n    window.localStorage.removeItem(\"spotifyUsername\");\n    setAccessTokenRaw(null);\n    setUsernameRaw(null);\n  }\n\n  function setAccessToken(accessToken) {\n    window.localStorage.setItem(\"spotifyAccessToken\", accessToken);\n    setAccessTokenRaw(accessToken);\n  }\n\n  function setUsername(username) {\n    window.localStorage.setItem(\"spotifyUsername\", username);\n    setUsernameRaw(username);\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <MaybeUpdateAccessToken setAccessToken={setAccessToken} />\n        <Header\n          clearAccessToken={clearAccessToken}\n          accessToken={accessToken}\n          username={username}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home username={username} />\n          </Route>\n          <Route path=\"/u/:id\">\n            <Channel username={username} spotify={spotify} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}