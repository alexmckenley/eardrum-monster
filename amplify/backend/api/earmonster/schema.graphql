type User
  @model(subscriptions: null)
  @key(fields: ["userID"])
  @key(
    name: "byLatestSongEvent"
    fields: ["type", "latestSongEvent"]
    queryField: "usersByLatestSongEvent"
  )
  @key(
    name: "byListeningTo"
    fields: ["listeningTo", "latestListenPing"]
    queryField: "usersByListeningTo"
  )
  @key(
    name: "byDisplayName"
    fields: ["displayName", "latestSongEvent"]
    queryField: "usersByDisplayName"
  ) {
  userID: String!
  latestSongEvent: AWSTimestamp
  latestListenPing: AWSTimestamp
  listeningTo: String
  songEvents: [SongEvent] @connection(keyName: "byUser", fields: ["userID"])
  listeners: [User] @connection(keyName: "byListeningTo", fields: ["userID"])
  displayName: String
  userImg: String
  type: String!
}

type SongEvent
  @model(subscriptions: null)
  @key(
    name: "byUser"
    fields: ["userID", "timestamp"]
    queryField: "songEventsByUserID"
  )
  @key(
    name: "byType"
    fields: ["type", "timestamp"]
    queryField: "songEventsByType"
  ) {
  id: ID!
  spotifyURI: String!
  timestamp: AWSTimestamp!
  position: Int!
  track: Track @connection(fields: ["spotifyURI"])
  userID: String!
  user: User @connection(fields: ["userID"])
  type: String!
}

type Track @model @key(fields: ["uri"]) {
  uri: String!
  trackID: String
  name: String
  durationMs: Int
  albumName: String
  artistName: String
  albumImg: String
}

type Subscription {
  onCreateSongEvent(userID: String!): SongEvent
    @aws_subscribe(mutations: ["createSongEvent"])
  onUpdateUserByListeningTo(listeningTo: String): User
    @aws_subscribe(mutations: ["updateUser"])
  onUpdateUserByUserID(userID: String): User
    @aws_subscribe(mutations: ["updateUser"])
}
